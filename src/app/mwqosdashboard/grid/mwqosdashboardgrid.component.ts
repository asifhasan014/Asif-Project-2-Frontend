import { Component, OnInit } from "@angular/core";
import { Router } from "@angular/router";
import { GridOptions } from "ag-grid";
import { BluecolumnComponent } from "../../grid-ui/bluecolumn/bluecolumn.component";

import { FormBuilder, FormGroup, Validators } from "@angular/forms";
import * as Highcharts from "highcharts";
import HC_exportData from "highcharts/modules/export-data";
import exporting from "highcharts/modules/exporting";
import offline from "highcharts/modules/offline-exporting";
import { Mwqosdashboardconfiguration } from "src/app/mwqosdashboardconfiguration/dto/mwqosdashboardconfiguration";
import { Locationhierarchyoss } from "src/app/locationhierarchyoss/dto/locationhierarchyoss";
import { LocationhierarchyossService } from "src/app/locationhierarchyoss/service/locationhierarchyoss.service";
import { IDropdownSettings } from "ng-multiselect-dropdown";
import { VendorWiseBarChartDTO } from "../dto/VendorWiseBarChartDTO";
import { TopNBarChartDTO } from "../dto/TopNBarChartDTO";
import { TrajectoryAnalysisDTO } from "../dto/TrajectoryAnalysisDTO";
import { ZonewisePiechartDTO } from "../dto/ZonewisePiechartDTO";
import { SingleZoneMultiCategoryPiechartDTO } from "../dto/SingleZoneMultiCategoryPiechartDTO";
import { MwqosdashboardconfigurationService } from "src/app/mwqosdashboardconfiguration/service/mwqosdashboardconfiguration.service";
import { ShowvalidationinfoService } from "src/app/showvalidationinfo/service/showvalidationinfo.service";

import { Mwqosdashboard } from "../dto/mwqosdashboard";
import { MwqosdashboardService } from "../service/mwqosdashboard.service";
import { ApiResponse } from "../../common/apiresponse";
import { AlertService } from "src/app/alert/_services";
import { saveAs } from "file-saver";
import * as moment from "moment";
import { catchError } from "rxjs/operators/catchError";
import { throwError } from "rxjs";

@Component({
   selector: "app-mwqosdashboardgrid",
   templateUrl: "./mwqosdashboardgrid.component.html",
   styleUrls: ["./mwqosdashboardgrid.component.css"],
})
export class MwqosdashboardgridComponent implements OnInit {
   apiDataForTrajectory = [
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "77.0",
         xAxisData: "2021-01-09",
         date: null,
         categoryNames: "ES",
         dataType1:
            "DHBDDA6-EMTN-01/2/1_DHBDDC1-EMTN-01/2/1|DH23E19422|183.58 Mbit/s|200 Mbit/s|512 QAM,NOBGM33-EMTN-01/14/1_NOBGM58-EMTN-01/4/1|CM18E15721|158.35 Mbit/s|203 Mbit/s|512 QAM,CMNKT02-EMTN-01/7/1_CMCDG07-EMTN-01/3/1|CM13E11230|189.17 Mbit/s|203 Mbit/s|512 QAM,GPKPS29-EMTN-01/2+3/1_NSSBP05-EMTN-01/14+15/1|DH18E18294|214.67 Mbit/s|224 Mbit/s|1024 QAM,CGRNG29-EMTN-01/6/1_CGRNG12-EMTN-01/6/1|CG13E12154|345.09000000000003 Mbit/s|224 Mbit/s|1024 QAM,CPHGN26-EMTN-01/2/1_CPHGN05-EMTN-01/6/1|CM15E15900|210.56 Mbit/s|224 Mbit/s|1024 QAM,MNGZR02-EMTN-01/6/1_MNGZR05-EMTN-01/2/1|DH18E17648|129.46 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,CXSDR43-EMTN-01/4/1_CXSDR86-EMTN-01/2/1|CG23E25438|89.25 Mbit/s|97 Mbit/s|512 QAM,NSBLB02-EMTN-02/12+13/1_NSRPR14-EMTN-01/6+7/1|DH15E18237|183.85 Mbit/s|224 Mbit/s|1024 QAM,CMBRR57-EMTN-01/2/1_CMBRR45-EMTN-01/3/1|CM23E15197|101.21 Mbit/s|107 Mbit/s|1024 QAM,CGMIR49-EMTN-01/4/1_CGMIR01-EMTN-02/16/1|CG07E16152|254.82 Mbit/s|201 Mbit/s|1024 QAM,NGSDR72-EMTN-01/4/1_NGSDR23-EMTN-01/3/1||137.68 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,FPNGR27-EMTN-01/4/1_FPNGR25-EMTN-01/2/1|KU23E21711|105.32 Mbit/s|107 Mbit/s|1024 QAM,NSSDR50-EMTN-01/2/1_NSSDR53-EMTN-02/2/1|DH07E22294|179.74 Mbit/s|224 Mbit/s|1024 QAM,CMSDD03-EMTN-01/4+5/1_CMSDR20-EMTN-01/8+9/1|CM15E11771|154.12 Mbit/s|201 Mbit/s|512 QAM,CGMIR02-EMTN-01/7/1_CGMIR43-EMTN-01/2/1|CG26E12111|179.74 Mbit/s|224 Mbit/s|1024 QAM,CMLXM02-EMTN-01/5/1_CMLXM01-EMTN-01/5/1|CM15E11086|202.34 Mbit/s|224 Mbit/s|1024 QAM,CXCKR13-EMTN-01/2/1_CXCKR06-EMTN-01/4/1|CG13E02936|220.84 Mbit/s|224 Mbit/s|1024 QAM,CGFTK59-EMTN-01/4+5/1_KCRMG05-EMTN-01/4+5/1|CG15E09338|178.9 Mbit/s|203 Mbit/s|512 QAM,BBLMA04-EMTN-01/8/1_BBTCI02-EMTN-01/8/1|CG07E16455|197.39 Mbit/s|203 Mbit/s|512 QAM,CGCND34-EMTN-01/14/1_CGCND02-EMTN-01/3/1|CG23E00591|208.51 Mbit/s|224 Mbit/s|1024 QAM,CPSDR15-EMTN-01/12/1_CPSDR32-EMTN-01/3/1|CM15E11528|177.68 Mbit/s|224 Mbit/s|1024 QAM,GPKPS38-EMTN-01/6/1_GPKPS32-EMTN-01/2/1|DH13E26746|214.67 Mbit/s|224 Mbit/s|1024 QAM,NGSNG35-EMTN-01/3/1_NGSNG09-EMTN-01/3/1|DH23E17676|63.72 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,DHKGNT1-EMTN-01/14/1_DHSVR73-EMTN-01/4/1|DH18E17628|143.88 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,NOBGM03-EMTN-01/3/1_NOBGM19-EMTN-01/9/1|CM18E24961|199.45 Mbit/s|203 Mbit/s|512 QAM,CMSDR37-EMTN-01/3/1_CMSDR51-EMTN-01/2/1|CM15E10631|216.73 Mbit/s|224 Mbit/s|1024 QAM,CGBAK12-EMTN-01/4/1_CGBAK14-EMTN-01/3/1|CG23E12174|208.51 Mbit/s|224 Mbit/s|1024 QAM,DHSVR81-EMTN-01/2+3/1_DHSVR09-EMTN-01/2+3/1||183.01 Mbit/s|203 Mbit/s|512 QAM,LXRPR06-EMTN-01/4/1_LXRPR02-EMTN-01/16/1|CM07E24943|366.02 Mbit/s|203 Mbit/s|512 QAM,DHKCH03-EMTN-01/2+3/1_DHLLB04-EMTN-01/4+5/1|DH18H03812|200.29 Mbit/s|224 Mbit/s|1024 QAM,NOCMP32-EMTN-01/8/1_FNDGN07-EMTN-01/2/1|CM15E11090|202.34 Mbit/s|224 Mbit/s|1024 QAM,CXCKR17-EMTN-01/2+3/1_CXCKR06-EMTN-01/2+3/1|CG18E12427|218.78 Mbit/s|224 Mbit/s|1024 QAM,RPSDR65-EMTN-01/2/1_RPSDR57-EMTN-01/4/1|RP13E24536|224.95 Mbit/s|224 Mbit/s|1024 QAM,CGANW08-EMTN-01/6/1_CGANW09-EMTN-01/2/1|CG07E12873|179.74 Mbit/s|224 Mbit/s|1024 QAM,NOSNB01-EMTN-01/3/1_NOSNB14-EMTN-01/7/1|CM18E24951|214.67 Mbit/s|224 Mbit/s|1024 QAM,FNSNG09-EMTN-01/3/1_FNSNG30-EMTN-01/3/1|CM18E24939|204.4 Mbit/s|224 Mbit/s|1024 QAM,BMAKH02-EMTN-01/4+5/1_BMAKH01-EMTN-01/8+9/1|CM15E11393|180.84 Mbit/s|201 Mbit/s|1024 QAM,DHJTB47-EMTN-01/4/1_DHJTB68-EMTN-01/2/1|DH23E19786|162.66 Mbit/s|183 Mbit/s|256 QAM,GPSDRQ4-EMTN-01/5/1_GPSDRN9-EMTN-01/3/1|DH18E19391|218.78 Mbit/s|224 Mbit/s|1024 QAM,CXMHK19-EMTN-01/2/1_CXMHK05-EMTN-01/4/1|CG18E07233|143.88 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,BMSRL03-EMTN-01/6/1_BMNNG05-EMTN-01/18/1|CM13E22320|224.95 Mbit/s|224 Mbit/s|1024 QAM,NGSDR64-EMTN-01/2/1_MNSDR17-EMTN-01/2/1||88.38 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NOHTA10-EMTN-01/3/1_NOHTA09-EMTN-01/2/1|CM13E08022|189.17 Mbit/s|203 Mbit/s|512 QAM,CGRZN16-EMTN-01/4+5/1_CGRZN01-EMTN-01/8+9/1|CG18E13059|91.31 Mbit/s|97 Mbit/s|512 QAM,CGPTG39-EMTN-01/3/1_CGPRT36-EMTN-01/2/1|CG18E15192|87.2 Mbit/s|97 Mbit/s|512 QAM,MGSNG04-EMTN-01/2+3/1_DHSVR46-EMTN-01/4+5/1|DH07E17681|134.77 Mbit/s|159 Mbit/s|128 QAM,CGBLK08-EMTN-01/2+3/1_CGBLK13-EMTN-01/6+7/1|CG13E10059|192.07 Mbit/s|224 Mbit/s|1024 QAM,DHKGNT1-EMTN-02/2+3/1_DHKGN41-EMTN-02/2+3/1|DH23E18252|195.34 Mbit/s|203 Mbit/s|512 QAM,PTSDR16-EMTN-01/5/1_PTSDR13-EMTN-01/2/1|BS13E09709|145.94 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,CMCND10-EMTN-01/15/1_CMCND46-EMTN-01/2/1|CM15E25564|90.42 Mbit/s|100 Mbit/s|1024 QAM,FNCGL10-EMTN-01/10/1_FNSDR59-EMTN-01/10/1|CM18E05772|157.13 Mbit/s|224 Mbit/s|1024 QAM,CMDBD12-EMTN-01/6/1_CMDBD04-EMTN-01/19/1|CM08E25041|214.67 Mbit/s|224 Mbit/s|1024 QAM,CGSKD30-EMTN-01/2+3/1_CGSKD04-EMTN-01/6+7/1|CG23E12115|200.29 Mbit/s|224 Mbit/s|1024 QAM,BMNBG04-EMTN-01/2+3/1_BMNBG35-EMTN-01/4+5/1|CM07E10442|170.56 Mbit/s|201 Mbit/s|512 QAM,FNSDR56-EMTN-01/8/1_FNCGL11-EMTN-01/14/1|CM15E11732|15.02 Mbit/s|224 Mbit/s|1024 QAM,CGPTA52-EMTN-02/2/1_CGPTA80-EMTN-01/3/1|CG18E18378|91.31 Mbit/s|97 Mbit/s|512 QAM,KCMHC02-EMTN-01/4+5/1_KCMHC01-EMTN-01/2+3/1|CG13A03462|187.12 Mbit/s|203 Mbit/s|512 QAM,CPSDR10-EMTN-02/6+7/1_CPSDR02-EMTN-01/2+3/1|CM18E00912|200.29 Mbit/s|224 Mbit/s|1024 QAM,MNGZR16-EMTN-01/4/1_MNGZR15-EMTN-01/4/1|DH18E020468|204.4 Mbit/s|224 Mbit/s|1024 QAM,CPSDR62-EMTN-01/2/1_CPSDR26-EMTN-01/3/1|CM23E21004|61.66 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,GPSDR41-EMTN-01/2/1_GPSDRN1-EMTN-01/5/1|DH23E19538|139.77 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,BMBNC01-EMTN-01/8/1_BMBNC16-EMTN-01/2/1|CM18E09078|150.04 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NGRPG51-EMTN-01/2/1_NGRPG49-EMTN-01/16/1|DH11E19428|61.66 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,MDSHB05-HRTN-02/3/1_FPBHN03-HRTN-09/3/1|BS08H25995|Hybrid(454Mbit/s)||,CGDMGA6-HRTN-04/13/1_CGDMGB3-HRTN-01/4/1|CG23H24070|Hybrid(183Mbit/s)||,CPSDR51-HRTN-01/8/1_CPFDG40-HRTN-01/5/1|CM06H27759|Hybrid(183Mbit/s)||,CGHTZ02-HRTN-02/1/1_CGHTZ44-HRTN-01/1/1|CG23E08527|Hybrid(219Mbit/s)||,MASLK02-HRTN-03/3/1_MASLK03-HRTN-02/3/1|KU13H10754|Hybrid(242Mbit/s)||,CMMDN59-HRTN-01/2/1_CMHMN06-HRTN-01/1/1|CM07H30259|Hybrid(652Mbit/s)||,SYSDR78-HRTN-01/6/1_SYSDRA8-HRTN-01/3/1|SY18H25008|Hybrid(228Mbit/s)||,CGSDP11-EMTN-01/3/1_CGSDP31-EMTN-01/2/1|CG13E13167|93.36 Mbit/s|97 Mbit/s|512 QAM,DHDHR24-EMTN-01/4/1_DHNWG52-EMTN-01/4/1|DH15E22292|18.5 Mbit/s|107 Mbit/s|1024 QAM,SYDKS04-HRTN-01/3/1_SYDKS15-HRTN-01/3/1|SY23H14890|Hybrid(196Mbit/s)||,SYGWN10-HRTN-02/7/1_SYGWN04-HRTN-03/7/1|SY13H27911|Hybrid(242Mbit/s)||,DHDKK04-HRTN-01/3/1_DHAPT08-HRTN-01/5/1|DH23H01380|Hybrid(432Mbit/s)||,KSSDR06-HRTN-01/4/1_KSHSN08-HRTN-01/3/1|MY13H17348|Hybrid(228Mbit/s)||",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "64.0",
         xAxisData: "2021-01-10",
         date: null,
         categoryNames: "ES",
         dataType1:
            "CMCND10-EMTN-01/15/1_CMCND46-EMTN-01/2/1|CM15E25564|90.42 Mbit/s|100 Mbit/s|1024 QAM,FNCGL10-EMTN-01/10/1_FNSDR59-EMTN-01/10/1|CM18E05772|157.13 Mbit/s|224 Mbit/s|1024 QAM,CMCND10-EMTN-01/7/1_CMCND36-EMTN-01/3/1|CM18E15190|93.36 Mbit/s|97 Mbit/s|512 QAM,NSBLB02-EMTN-02/12+13/1_NSRPR14-EMTN-01/6+7/1|DH15E18237|183.85 Mbit/s|224 Mbit/s|1024 QAM,MNGZR02-EMTN-01/6/1_MNGZR05-EMTN-01/2/1|DH18E17648|129.46 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,GPKPS29-EMTN-01/2+3/1_NSSBP05-EMTN-01/14+15/1|DH18E18294|214.67 Mbit/s|224 Mbit/s|1024 QAM,CGRNG29-EMTN-01/6/1_CGRNG12-EMTN-01/6/1|CG13E12154|345.09000000000003 Mbit/s|224 Mbit/s|1024 QAM,CPHGN26-EMTN-01/2/1_CPHGN05-EMTN-01/6/1|CM15E15900|210.56 Mbit/s|224 Mbit/s|1024 QAM,LXKMN07-EMTN-01/3/1_LXKMN03-EMTN-01/2/1|CM15E10973|193.28 Mbit/s|203 Mbit/s|512 QAM,CMBRR57-EMTN-01/2/1_CMBRR45-EMTN-01/3/1|CM23E15197|101.21 Mbit/s|107 Mbit/s|1024 QAM,PTSDR16-EMTN-01/5/1_PTSDR13-EMTN-01/2/1|BS13E09709|145.94 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,SYGWN10-HRTN-02/7/1_SYGWN04-HRTN-03/7/1|SY13H27911|Hybrid(242Mbit/s)||,GPSDRO5-HRTN-01/7/1_GPSDR1P-HRTN-01/7/1|DH26H29474|Hybrid(242Mbit/s)||,DHDKK04-HRTN-01/3/1_DHAPT08-HRTN-01/5/1|DH23H01380|Hybrid(432Mbit/s)||,KSSDR06-HRTN-01/4/1_KSHSN08-HRTN-01/3/1|MY13H17348|Hybrid(228Mbit/s)||,CGSDP11-EMTN-01/3/1_CGSDP31-EMTN-01/2/1|CG13E13167|93.36 Mbit/s|97 Mbit/s|512 QAM,CMDBD12-EMTN-01/6/1_CMDBD04-EMTN-01/19/1|CM08E25041|214.67 Mbit/s|224 Mbit/s|1024 QAM,SRSBD09-HRTN-01/3/1_SRJNG02-HRTN-04/4/1|MY13H17542|Hybrid(183Mbit/s)||,CPSDR10-EMTN-02/6+7/1_CPSDR02-EMTN-01/2+3/1|CM18E00912|200.29 Mbit/s|224 Mbit/s|1024 QAM,CMCND10-EMTN-01/2/1_CMBRR03-EMTN-01/4/1|CM07E11800|244.4 Mbit/s|224 Mbit/s|1024 QAM,DHKGNT1-EMTN-02/2+3/1_DHKGN41-EMTN-02/2+3/1|DH23E18252|195.34 Mbit/s|203 Mbit/s|512 QAM,CXTKN65-EMTN-01/2/1_CXTKN11-EMTN-01/6/1|CG18E24583|87.2 Mbit/s|97 Mbit/s|512 QAM,NGRPG51-EMTN-01/2/1_NGRPG49-EMTN-01/16/1|DH11E19428|61.66 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,FNSDR56-EMTN-01/8/1_FNCGL11-EMTN-01/14/1|CM15E11732|15.02 Mbit/s|224 Mbit/s|1024 QAM,CGSKD30-EMTN-01/2+3/1_CGSKD04-EMTN-01/6+7/1|CG23E12115|200.29 Mbit/s|224 Mbit/s|1024 QAM,CGKTL42-EMTN-01/9/1_CGKTL39-EMTN-01/3/1||101.21 Mbit/s|107 Mbit/s|1024 QAM,BMNBG04-EMTN-01/2+3/1_BMNBG35-EMTN-01/4+5/1|CM07E10442|170.56 Mbit/s|201 Mbit/s|512 QAM,MASLK02-HRTN-03/3/1_MASLK03-HRTN-02/3/1|KU13H10754|Hybrid(242Mbit/s)||,NWSDR18-HRTN-01/3/1_NWSDR16-HRTN-02/3/1|RS18H23009|Hybrid(228Mbit/s)||,DHKKT54-HRTN-01/7/1_DHKKT44-HRTN-02/7/1|DH26H29349|Hybrid(161Mbit/s)||,SYSDR78-HRTN-01/6/1_SYSDRA8-HRTN-01/3/1|SY18H25008|Hybrid(228Mbit/s)||,CMMDN37-HRTN-01/6/1_BMKSB23-HRTN-01/4/1|CM06H27413|Hybrid(159Mbit/s)||,MASDR07-HRTN-03/3/1_MASDR12-HRTN-01/3/1|KU07H06372|Hybrid(183Mbit/s)||,CXCKR01-HRTN-01/7/1_CXCKR91-HRTN-01/7/1|CG23E30270|Hybrid(10Mbit/s)||,JSJKR14-HRTN-01/2/1_JSCGH02-HRTN-02/1/1|KH07H20520|Hybrid(183Mbit/s)||,CPSDR51-HRTN-01/8/1_CPFDG40-HRTN-01/5/1|CM06H27759|Hybrid(183Mbit/s)||,MDSHB05-HRTN-02/3/1_FPBHN03-HRTN-09/3/1|BS08H25995|Hybrid(454Mbit/s)||,CGPRT45-HRTN-02/5/1_CGPRT61-HRTN-01/13/1||Hybrid(364Mbit/s)||,GPKPS38-EMTN-01/6/1_GPKPS32-EMTN-01/2/1|DH13E26746|214.67 Mbit/s|224 Mbit/s|1024 QAM,BMASG07-EMTN-01/2/1_BMASG11-EMTN-01/4/1|CM15E11929|224.95 Mbit/s|224 Mbit/s|1024 QAM,BBLMA04-EMTN-01/8/1_BBTCI02-EMTN-01/8/1|CG07E16455|197.39 Mbit/s|203 Mbit/s|512 QAM,BMAKH02-EMTN-01/4+5/1_BMAKH01-EMTN-01/8+9/1|CM15E11393|180.84 Mbit/s|201 Mbit/s|1024 QAM,CMMHG03-EMTN-01/4+5/1_CMMHG06-EMTN-01/2+3/1|CM13E11189|204.4 Mbit/s|224 Mbit/s|1024 QAM,NOHTA10-EMTN-01/3/1_NOHTA09-EMTN-01/2/1|CM13E08022|189.17 Mbit/s|203 Mbit/s|512 QAM,CMBRR10-EMTN-01/10/1_CMLXM20-EMTN-01/2/1|CM15E15615|139.77 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NGSDR64-EMTN-01/2/1_MNSDR17-EMTN-01/2/1||88.38 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NOBGM33-EMTN-01/14/1_NOBGM58-EMTN-01/4/1|CM18E15721|158.35 Mbit/s|203 Mbit/s|512 QAM,CMNKT02-EMTN-01/7/1_CMCDG07-EMTN-01/3/1|CM13E11230|189.17 Mbit/s|203 Mbit/s|512 QAM,CMLXM02-EMTN-01/5/1_CMLXM01-EMTN-01/5/1|CM15E11086|202.34 Mbit/s|224 Mbit/s|1024 QAM,CXMHK44-EMTN-01/2/1_CXMHK25-EMTN-01/3/1|CG18E25468|86.82 Mbit/s|107 Mbit/s|1024 QAM,CGMIR02-EMTN-01/7/1_CGMIR43-EMTN-01/2/1|CG26E12111|179.74 Mbit/s|224 Mbit/s|1024 QAM,CXCKR13-EMTN-01/2/1_CXCKR06-EMTN-01/4/1|CG13E02936|220.84 Mbit/s|224 Mbit/s|1024 QAM,JHSLK03-EMTN-01/2+3/1_KUSDR02-EMTN-01/4+5/1|KU07E09993|136.58 Mbit/s|224 Mbit/s|1024 QAM,FPNGR11-EMTN-01/4+5/1_GGMKS02-EMTN-01/2+3/1|KH13E08178|107.54 Mbit/s|200 Mbit/s|512 QAM,NOSNB01-EMTN-01/3/1_NOSNB14-EMTN-01/7/1|CM18E24951|214.67 Mbit/s|224 Mbit/s|1024 QAM,NOCMP32-EMTN-01/8/1_FNDGN07-EMTN-01/2/1|CM15E11090|202.34 Mbit/s|224 Mbit/s|1024 QAM,CXCKR17-EMTN-01/2+3/1_CXCKR06-EMTN-01/2+3/1|CG18E12427|218.78 Mbit/s|224 Mbit/s|1024 QAM,RPSDR65-EMTN-01/2/1_RPSDR57-EMTN-01/4/1|RP13E24536|224.95 Mbit/s|224 Mbit/s|1024 QAM,CPSDR30-EMTN-01/2/1_CPSDR15-EMTN-01/6/1|CM15E08039|208.51 Mbit/s|224 Mbit/s|1024 QAM,NOBGM03-EMTN-01/3/1_NOBGM19-EMTN-01/9/1|CM18E24961|199.45 Mbit/s|203 Mbit/s|512 QAM,CMSDR37-EMTN-01/3/1_CMSDR51-EMTN-01/2/1|CM15E10631|216.73 Mbit/s|224 Mbit/s|1024 QAM,CGBAK12-EMTN-01/4/1_CGBAK14-EMTN-01/3/1|CG23E12174|208.51 Mbit/s|224 Mbit/s|1024 QAM,DHSVR81-EMTN-01/2+3/1_DHSVR09-EMTN-01/2+3/1||183.01 Mbit/s|203 Mbit/s|512 QAM,CGCND34-EMTN-01/14/1_CGCND02-EMTN-01/3/1|CG23E00591|208.51 Mbit/s|224 Mbit/s|1024 QAM",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "72.0",
         xAxisData: "2021-01-11",
         date: null,
         categoryNames: "ES",
         dataType1:
            "MYBLK37-EMTN-01/6/1_MYBLK36-EMTN-01/2/1|MY15E21802|194.12 Mbit/s|224 Mbit/s|1024 QAM,CGANW08-EMTN-01/6/1_CGANW09-EMTN-01/2/1|CG07E12873|179.74 Mbit/s|224 Mbit/s|1024 QAM,CMCND11-EMTN-01/3/1_CMCND25-EMTN-01/2/1|CM18E09374|87.2 Mbit/s|97 Mbit/s|512 QAM,NOBGM03-EMTN-01/3/1_NOBGM19-EMTN-01/9/1|CM18E24961|199.45 Mbit/s|203 Mbit/s|512 QAM,CGBAK12-EMTN-01/4/1_CGBAK14-EMTN-01/3/1|CG23E12174|208.51 Mbit/s|224 Mbit/s|1024 QAM,CPSDR30-EMTN-01/2/1_CPSDR15-EMTN-01/6/1|CM15E08039|208.51 Mbit/s|224 Mbit/s|1024 QAM,NOKBH17-EMTN-01/3/1_NOKBH02-EMTN-02/17/1|CM18E24988|183.85 Mbit/s|224 Mbit/s|1024 QAM,CPUMT08-EMTN-01/2/1_CPUMT09-EMTN-01/2/1|CM07E11142|139.74 Mbit/s|150 Mbit/s|512 QAM,NOCMP32-EMTN-01/8/1_FNDGN07-EMTN-01/2/1|CM15E11090|202.34 Mbit/s|224 Mbit/s|1024 QAM,CXCKR17-EMTN-01/2+3/1_CXCKR06-EMTN-01/2+3/1|CG18E12427|218.78 Mbit/s|224 Mbit/s|1024 QAM,RPSDR65-EMTN-01/2/1_RPSDR57-EMTN-01/4/1|RP13E24536|224.95 Mbit/s|224 Mbit/s|1024 QAM,CGMIR02-EMTN-01/7/1_CGMIR43-EMTN-01/2/1|CG26E12111|179.74 Mbit/s|224 Mbit/s|1024 QAM,CMLXM02-EMTN-01/5/1_CMLXM01-EMTN-01/5/1|CM15E11086|202.34 Mbit/s|224 Mbit/s|1024 QAM,FPNGR11-EMTN-01/4+5/1_GGMKS02-EMTN-01/2+3/1|KH13E08178|107.54 Mbit/s|200 Mbit/s|512 QAM,CGFTK27-EMTN-01/4+5/1_CGFTK37-EMTN-01/4+5/1|CG23E12289|208.51 Mbit/s|224 Mbit/s|1024 QAM,LXRPR06-EMTN-01/4/1_LXRPR02-EMTN-01/16/1|CM07E24943|366.02 Mbit/s|203 Mbit/s|512 QAM,CMSDD03-EMTN-01/4+5/1_CMSDR20-EMTN-01/8+9/1|CM15E11771|154.12 Mbit/s|201 Mbit/s|512 QAM,DHSVR81-EMTN-01/2+3/1_DHSVR09-EMTN-01/2+3/1||183.01 Mbit/s|203 Mbit/s|512 QAM,CGCND34-EMTN-01/14/1_CGCND02-EMTN-01/3/1|CG23E00591|208.51 Mbit/s|224 Mbit/s|1024 QAM,BMAKH02-EMTN-01/4+5/1_BMAKH01-EMTN-01/8+9/1|CM15E11393|180.84 Mbit/s|201 Mbit/s|1024 QAM,CGRNG17-EMTN-01/4+5/1_RMRTL01-EMTN-01/4+5/1|CG13E13001|178.78 Mbit/s|201 Mbit/s|1024 QAM,GPKPS38-EMTN-01/6/1_GPKPS32-EMTN-01/2/1|DH13E26746|214.67 Mbit/s|224 Mbit/s|1024 QAM,BBLMA04-EMTN-01/8/1_BBTCI02-EMTN-01/8/1|CG07E16455|197.39 Mbit/s|203 Mbit/s|512 QAM,SYGWN10-HRTN-02/7/1_SYGWN04-HRTN-03/7/1|SY13H27911|Hybrid(242Mbit/s)||,KHPKG01-HRTN-04/4/1_KHPKG02-HRTN-02/2/1|KH11H23126|Hybrid(196Mbit/s)||,MASLK02-HRTN-03/3/1_MASLK03-HRTN-02/3/1|KU13H10754|Hybrid(242Mbit/s)||,MBSML01-HRTN-01/2/1_MBSML04-HRTN-01/3/1|SY13H17176|Hybrid(242Mbit/s)||,KSSDR06-HRTN-01/4/1_KSHSN08-HRTN-01/3/1|MY13H17348|Hybrid(228Mbit/s)||,GPSDRO5-HRTN-01/7/1_GPSDR1P-HRTN-01/7/1|DH26H29474|Hybrid(242Mbit/s)||,CGHTZ02-HRTN-02/1/1_CGHTZ44-HRTN-01/1/1|CG23E08527|Hybrid(219Mbit/s)||,DHSVR06-HRTN-02/1/1_DHSVR50-HRTN-01/7/1|DH18H01142|Hybrid(432Mbit/s)||,DHDKK04-HRTN-01/3/1_DHAPT08-HRTN-01/5/1|DH23H01380|Hybrid(432Mbit/s)||,CXCKR01-HRTN-01/7/1_CXCKR91-HRTN-01/7/1|CG23E30270|Hybrid(10Mbit/s)||,NSBLB02-EMTN-02/12+13/1_NSRPR14-EMTN-01/6+7/1|DH15E18237|183.85 Mbit/s|224 Mbit/s|1024 QAM,KCMKC01-EMTN-01/4/1_CGFTK15-EMTN-02/14/1|CG13E12639|417.02 Mbit/s|224 Mbit/s|1024 QAM,GPKPS29-EMTN-01/2+3/1_NSSBP05-EMTN-01/14+15/1|DH18E18294|214.67 Mbit/s|224 Mbit/s|1024 QAM,CGRNG29-EMTN-01/6/1_CGRNG12-EMTN-01/6/1|CG13E12154|345.09000000000003 Mbit/s|224 Mbit/s|1024 QAM,CPHGN26-EMTN-01/2/1_CPHGN05-EMTN-01/6/1|CM15E15900|210.56 Mbit/s|224 Mbit/s|1024 QAM,DHSVR78-EMTN-01/2/1_DHDHM15-EMTN-01/8+9/1|DH07E08950|204.4 Mbit/s|224 Mbit/s|1024 QAM,NGSDR64-EMTN-01/2/1_MNSDR17-EMTN-01/2/1||88.38 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,DHBDDA6-EMTN-01/2/1_DHBDDC1-EMTN-01/2/1|DH23E19422|183.58 Mbit/s|200 Mbit/s|512 QAM,CMMHG03-EMTN-01/4+5/1_CMMHG06-EMTN-01/2+3/1|CM13E11189|204.4 Mbit/s|224 Mbit/s|1024 QAM,NOHTA10-EMTN-01/3/1_NOHTA09-EMTN-01/2/1|CM13E08022|189.17 Mbit/s|203 Mbit/s|512 QAM,NOBGM33-EMTN-01/14/1_NOBGM58-EMTN-01/4/1|CM18E15721|158.35 Mbit/s|203 Mbit/s|512 QAM,CMNKT02-EMTN-01/7/1_CMCDG07-EMTN-01/3/1|CM13E11230|189.17 Mbit/s|203 Mbit/s|512 QAM,CMCND10-EMTN-01/7/1_CMCND36-EMTN-01/3/1|CM18E15190|93.36 Mbit/s|97 Mbit/s|512 QAM,KCMHC03-EMTN-01/2+3/1_RMNNC01-EMTN-01/8+9/1|CG07E16111|201.39 Mbit/s|203 Mbit/s|512 QAM,PTSDR06-EMTN-01/4/1_PTSDR01-EMTN-01/3/1|BS07E08230|147.99 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,FPNGR27-EMTN-01/4/1_FPNGR25-EMTN-01/2/1|KU23E21711|105.32 Mbit/s|107 Mbit/s|1024 QAM,SYSDR78-HRTN-01/6/1_SYSDRA8-HRTN-01/3/1|SY18H25008|Hybrid(228Mbit/s)||,BRSDR02-HRTN-02/6/1_BRSDR12-HRTN-03/6/1|BS13H25974|Hybrid(242Mbit/s)||,DHKGN85-EMTN-01/2+3/1_DHKGN28-EMTN-01/4+5/1|DH23E17713|183.58 Mbit/s|200 Mbit/s|512 QAM,CGBLK08-EMTN-01/2+3/1_CGBLK13-EMTN-01/6+7/1|CG13E10059|192.07 Mbit/s|224 Mbit/s|1024 QAM,CPHGN25-EMTN-01/2/1_CPHGN07-EMTN-01/6/1|CM23E08364|86.29 Mbit/s|94 Mbit/s|512 QAM,TNDDR16-EMTN-01/2/1_TNMZP47-EMTN-01/2/1|MY13E26581|185.9 Mbit/s|224 Mbit/s|1024 QAM,CGSKD30-EMTN-01/2+3/1_CGSKD04-EMTN-01/6+7/1|CG23E12115|200.29 Mbit/s|224 Mbit/s|1024 QAM,FNCGL10-EMTN-01/10/1_FNSDR59-EMTN-01/10/1|CM18E05772|157.13 Mbit/s|224 Mbit/s|1024 QAM,CMBRR11-EMTN-01/2+3/1_CMSDR10-EMTN-01/8+9/1|CM15E07443|192.07 Mbit/s|224 Mbit/s|1024 QAM,CMCND10-EMTN-01/15/1_CMCND46-EMTN-01/2/1|CM15E25564|90.42 Mbit/s|100 Mbit/s|1024 QAM,NOSNB07-EMTN-01/4/1_NOSNB04-EMTN-01/6/1|CM13E10985|219.2 Mbit/s|200 Mbit/s|512 QAM,PTSDR16-EMTN-01/5/1_PTSDR13-EMTN-01/2/1|BS13E09709|145.94 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,BMBNC01-EMTN-01/8/1_BMBNC16-EMTN-01/2/1|CM18E09078|150.04 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NGRPG51-EMTN-01/2/1_NGRPG49-EMTN-01/16/1|DH11E19428|61.66 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,LXRGT03-EMTN-01/18/1_LXKMN02-EMTN-01/2/1|CM08E24965|203.56 Mbit/s|203 Mbit/s|512 QAM,CGKTL42-EMTN-01/9/1_CGKTL39-EMTN-01/3/1||101.21 Mbit/s|107 Mbit/s|1024 QAM,BMNBG04-EMTN-01/2+3/1_BMNBG35-EMTN-01/4+5/1|CM07E10442|170.56 Mbit/s|201 Mbit/s|512 QAM,FNSDR56-EMTN-01/8/1_FNCGL11-EMTN-01/14/1|CM15E11732|15.02 Mbit/s|224 Mbit/s|1024 QAM,CGSDP11-EMTN-01/3/1_CGSDP31-EMTN-01/2/1|CG13E13167|93.36 Mbit/s|97 Mbit/s|512 QAM,CPSDR10-EMTN-02/6+7/1_CPSDR02-EMTN-01/2+3/1|CM18E00912|200.29 Mbit/s|224 Mbit/s|1024 QAM,CPSDR62-EMTN-01/2/1_CPSDR26-EMTN-01/3/1|CM23E21004|61.66 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,CMDBD12-EMTN-01/6/1_CMDBD04-EMTN-01/19/1|CM08E25041|214.67 Mbit/s|224 Mbit/s|1024 QAM,RJPNG05-EMTN-01/2/1_RJBLK03-EMTN-01/3/1||89.25 Mbit/s|97 Mbit/s|512 QAM",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "78.0",
         xAxisData: "2021-01-12",
         date: null,
         categoryNames: "ES",
         dataType1:
            "CXCKR17-EMTN-01/2+3/1_CXCKR06-EMTN-01/2+3/1|CG18E12427|218.78 Mbit/s|224 Mbit/s|1024 QAM,PTSDR01-EMTN-01/3/1_PTSDR06-EMTN-01/4/1|BS07E08230|147.99 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,CMBRR11-EMTN-01/2+3/1_CMSDR10-EMTN-01/8+9/1|CM15E07443|192.07 Mbit/s|224 Mbit/s|1024 QAM,FNCGL10-EMTN-01/10/1_FNSDR59-EMTN-01/10/1|CM18E05772|157.13 Mbit/s|224 Mbit/s|1024 QAM,RMRTL01-EMTN-01/4+5/1_CGRNG17-EMTN-01/4+5/1|CG13E13001|224.95 Mbit/s|224 Mbit/s|1024 QAM,CMCND10-EMTN-01/7/1_CMCND36-EMTN-01/3/1|CM18E15190|93.36 Mbit/s|97 Mbit/s|512 QAM,CXSDRC4-EMTN-01/2/1_CXSDR14-EMTN-01/6/1|CG18E28901|89.25 Mbit/s|97 Mbit/s|512 QAM,NGSDR64-EMTN-01/2/1_MNSDR17-EMTN-01/2/1||88.38 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,CGBAK12-EMTN-01/4/1_CGBAK14-EMTN-01/3/1|CG23E12174|208.51 Mbit/s|224 Mbit/s|1024 QAM,MYBLK37-EMTN-01/6/1_MYBLK36-EMTN-01/2/1|MY15E21802|194.12 Mbit/s|224 Mbit/s|1024 QAM,NOBGM33-EMTN-01/14/1_NOBGM58-EMTN-01/4/1|CM18E15721|158.35 Mbit/s|203 Mbit/s|512 QAM,CMNKT02-EMTN-01/7/1_CMCDG07-EMTN-01/3/1|CM13E11230|210.56 Mbit/s|224 Mbit/s|1024 QAM,FPNGR25-EMTN-01/2/1_FPNGR27-EMTN-01/4/1|KU23E21711|105.32 Mbit/s|107 Mbit/s|1024 QAM,CXSDR88-EMTN-01/3/1_CXSDR12-EMTN-01/6/1|CG18E20476|200.02 Mbit/s|200 Mbit/s|512 QAM,CGRNG12-EMTN-01/6/1_CGRNG29-EMTN-01/6/1|CG13E12154|345.09000000000003 Mbit/s|224 Mbit/s|1024 QAM,CPUMT09-EMTN-01/2/1_CPUMT08-EMTN-01/2/1|CM07E11142|145.9 Mbit/s|150 Mbit/s|512 QAM,FNSNG20-EMTN-01/2/1_FNSNG03-EMTN-01/4/1|CM18E11653|93.36 Mbit/s|97 Mbit/s|512 QAM,CMLXM01-EMTN-01/5/1_CMLXM02-EMTN-01/5/1|CM15E11086|202.34 Mbit/s|224 Mbit/s|1024 QAM,RPSDR54-EMTN-01/2/1_RPSDR64-EMTN-01/16/1|RP23E22039|224.95 Mbit/s|224 Mbit/s|1024 QAM,BBTCI02-EMTN-01/8/1_BBLMA04-EMTN-01/8/1|CG07E16455|355.74 Mbit/s|203 Mbit/s|512 QAM,NGSNG35-EMTN-01/3/1_NGSNG09-EMTN-01/3/1|DH23E17676|63.72 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NOHTA09-EMTN-01/2/1_NOHTA10-EMTN-01/3/1|CM13E08022|210.56 Mbit/s|224 Mbit/s|1024 QAM,CMSDR09-EMTN-01/4/1_CMSDR12-EMTN-01/13/1||210.56 Mbit/s|224 Mbit/s|1024 QAM,CGSDP11-EMTN-01/3/1_CGSDP31-EMTN-01/2/1|CG13E13167|93.36 Mbit/s|97 Mbit/s|512 QAM,RJPNG05-EMTN-01/2/1_RJBLK03-EMTN-01/3/1||26.72 Mbit/s|97 Mbit/s|512 QAM,FNSDR56-EMTN-01/8/1_FNCGL11-EMTN-01/14/1|CM15E11732|194.12 Mbit/s|224 Mbit/s|1024 QAM,CMSDD01-EMTN-01/17/1_CMSDR23-EMTN-01/3/1|CM13E11014|191.12 Mbit/s|201 Mbit/s|512 QAM,KCMHC02-EMTN-01/4+5/1_KCMHC01-EMTN-01/2+3/1|CG13A03462|208.51 Mbit/s|224 Mbit/s|1024 QAM,MNGZR16-EMTN-01/4/1_MNGZR15-EMTN-01/4/1|DH18E020468|204.4 Mbit/s|224 Mbit/s|1024 QAM,CMDBD12-EMTN-01/6/1_CMDBD04-EMTN-01/19/1|CM08E25041|214.67 Mbit/s|224 Mbit/s|1024 QAM,CPSDR62-EMTN-01/2/1_CPSDR26-EMTN-01/3/1|CM23E21004|61.66 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NGRPG51-EMTN-01/2/1_NGRPG49-EMTN-01/16/1|DH11E19428|61.66 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,CMSDR51-EMTN-01/2/1_CMSDR37-EMTN-01/3/1|CM15E10631|216.73 Mbit/s|224 Mbit/s|1024 QAM,BMBNC01-EMTN-01/16/1_BMBNC16-EMTN-01/2/1|CM18E09078|402.78 Mbit/s|201 Mbit/s|512 QAM,CPHGN26-EMTN-01/2/1_CPHGN05-EMTN-01/6/1|CM15E15900|210.56 Mbit/s|224 Mbit/s|1024 QAM,CMNKT36-EMTN-01/2/1_NOSNB08-EMTN-01/15/1|CM15E11955|199.45 Mbit/s|203 Mbit/s|512 QAM,BMSDR21-EMTN-02/2+3/1_BMSDR04-EMTN-04/2+3/1|CM13E21050|428.51 Mbit/s|224 Mbit/s|1024 QAM,CMCND09-EMTN-01/21/1_CMCND24-EMTN-01/2/1|CM18E09359|84.24 Mbit/s|94 Mbit/s|512 QAM,NGSDRG3-EMTN-01/4+5/1_NGSDRE8-EMTN-01/2+3/1|DH18E19202|224.95 Mbit/s|224 Mbit/s|1024 QAM,NSMND05-EMTN-01/8/1_NSMND19-EMTN-02/5/1|DH15E14182|204.4 Mbit/s|224 Mbit/s|1024 QAM,GPKPS38-EMTN-01/6/1_GPKPS32-EMTN-01/2/1|DH13E26746|220.84 Mbit/s|224 Mbit/s|1024 QAM,CXMHK05-EMTN-01/4/1_CXMHK19-EMTN-01/2/1|CG18E07233|143.88 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NOSNB01-EMTN-01/3/1_NOSNB14-EMTN-01/7/1|CM18E24951|214.67 Mbit/s|224 Mbit/s|1024 QAM,RMBRK01-EMTN-01/4+5/1_RMBRKT1-EMTN-01/4+5/1|CG18E17727|200.29 Mbit/s|224 Mbit/s|1024 QAM,BMNBG35-EMTN-01/4+5/1_BMNBG04-EMTN-01/2+3/1|CM07E10442|224.95 Mbit/s|224 Mbit/s|1024 QAM,CMCND10-EMTN-01/15/1_CMCND46-EMTN-01/2/1|CM15E25564|90.42 Mbit/s|100 Mbit/s|1024 QAM,MNGZR05-EMTN-01/2/1_MNGZR02-EMTN-01/6/1|DH18E17648|224.95 Mbit/s|224 Mbit/s|1024 QAM,JHSLK03-EMTN-01/2+3/1_KUSDR02-EMTN-01/4+5/1|KU07E09993|150.97 Mbit/s|224 Mbit/s|1024 QAM,GPSDRO8-EMTN-01/8/1_GPSDRO0-EMTN-01/2/1|DH18E26609|179.47 Mbit/s|200 Mbit/s|512 QAM,SGSJP21-EMTN-01/3/1_SGULP31-EMTN-01/5/1|RS15E21907|194.12 Mbit/s|224 Mbit/s|1024 QAM,PTSDR13-EMTN-01/2/1_PTSDR16-EMTN-01/5/1|BS13E09709|145.94 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,CGMIR43-EMTN-01/2/1_CGMIR02-EMTN-01/7/1|CG26E12111|179.74 Mbit/s|224 Mbit/s|1024 QAM,CGMIR48-EMTN-01/7/1_CGMIR55-EMTN-01/2/1|CG15E10217|137.72 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,LXRGT03-EMTN-01/18/1_LXKMN02-EMTN-01/2/1|CM08E24965|199.45 Mbit/s|203 Mbit/s|512 QAM,CGKTL42-EMTN-01/9/1_CGKTL39-EMTN-01/3/1||101.21 Mbit/s|107 Mbit/s|1024 QAM,HGNBG28-HRTN-03/3/1_HGNBG30-HRTN-05/2/1||Hybrid(454Mbit/s)||,CPSDR10-EMTN-02/6+7/1_CPSDR02-EMTN-01/2+3/1|CM18E00912|200.29 Mbit/s|224 Mbit/s|1024 QAM,SRSBD09-HRTN-01/3/1_SRJNG02-HRTN-04/4/1|MY13H17542|Hybrid(183Mbit/s)||,KHPKG01-HRTN-04/4/1_KHPKG02-HRTN-02/2/1|KH11H23126|Hybrid(196Mbit/s)||,CXCKR01-HRTN-01/7/1_CXCKR91-HRTN-01/7/1|CG23H30270|Hybrid(105Mbit/s)||,KSSDR06-HRTN-01/4/1_KSHSN08-HRTN-01/3/1|MY13H17348|Hybrid(228Mbit/s)||,DHSVR06-HRTN-02/1/1_DHSVR50-HRTN-01/7/1|DH18H01142|Hybrid(454Mbit/s)||,DHDKK04-HRTN-01/3/1_DHAPT08-HRTN-01/5/1|DH23H01380|Hybrid(432Mbit/s)||,SYGWN10-HRTN-02/7/1_SYGWN04-HRTN-03/7/1|SY13H27911|Hybrid(242Mbit/s)||,CGPRT45-HRTN-02/5/1_CGPRT61-HRTN-01/13/1||Hybrid(364Mbit/s)||,NGSDRI8-EMTN-01/3/1_NGSDRF0-EMTN-01/2/1|DH18E19727|174.68 Mbit/s|201 Mbit/s|1024 QAM,CMCND11-EMTN-01/3/1_CMCND25-EMTN-01/2/1|CM18E09374|87.2 Mbit/s|97 Mbit/s|512 QAM,CXSDR33-EMTN-01/4+5/1_CXSDR30-EMTN-01/4+5/1|CG18H04411|172.73 Mbit/s|203 Mbit/s|512 QAM,CMLXM20-EMTN-01/2/1_CMBRR10-EMTN-01/10/1|CM15E15615|139.77 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NSRPR14-EMTN-01/6+7/1_NSBLB02-EMTN-02/12+13/1|DH15E18237|224.95 Mbit/s|224 Mbit/s|1024 QAM,DHCNT08-EMTN-01/2/1_DHCNT89-EMTN-01/2/1|DH15E19420|87.2 Mbit/s|97 Mbit/s|512 QAM,CMBRR57-EMTN-01/2/1_CMBRR45-EMTN-01/3/1|CM23E15197|101.21 Mbit/s|107 Mbit/s|1024 QAM,CXCKR13-EMTN-01/2/1_CXCKR06-EMTN-01/4/1|CG13E02936|220.84 Mbit/s|224 Mbit/s|1024 QAM,DHSVR81-EMTN-01/2+3/1_DHSVR09-EMTN-01/2+3/1||204.4 Mbit/s|224 Mbit/s|1024 QAM,CMSDD03-EMTN-01/4+5/1_CMSDR20-EMTN-01/8+9/1|CM15E11771|176.73 Mbit/s|201 Mbit/s|512 QAM,LXRPR06-EMTN-01/4/1_LXRPR02-EMTN-01/16/1|CM07E24943|183.01 Mbit/s|203 Mbit/s|512 QAM,GPKPS29-EMTN-01/2+3/1_NSSBP05-EMTN-01/14+15/1|DH18E18294|214.67 Mbit/s|224 Mbit/s|1024 QAM,NOCMP29-EMTN-01/2/1_NOCMP34-EMTN-01/3/1|CM15E15521|187.12 Mbit/s|203 Mbit/s|512 QAM",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "80.0",
         xAxisData: "2021-01-13",
         date: null,
         categoryNames: "ES",
         dataType1:
            "CGHTZ02-HRTN-02/1/1_CGHTZ44-HRTN-01/1/1|CG23E08527|Hybrid(219Mbit/s)||,DHSVR06-HRTN-02/1/1_DHSVR50-HRTN-01/7/1|DH18H01142|Hybrid(454Mbit/s)||,CGPRT45-HRTN-02/5/1_CGPRT61-HRTN-01/13/1||Hybrid(364Mbit/s)||,DHDKK04-HRTN-01/3/1_DHAPT08-HRTN-01/5/1|DH23H01380|Hybrid(432Mbit/s)||,KSSDR06-HRTN-01/4/1_KSHSN08-HRTN-01/3/1|MY13H17348|Hybrid(228Mbit/s)||,SNJGN21-HRTN-01/4/1_SNJGN19-HRTN-01/3/1|SY15H20920|Hybrid(90Mbit/s)||,KHPKG01-HRTN-04/4/1_KHPKG02-HRTN-02/2/1|KH11H23126|Hybrid(196Mbit/s)||,KSSDR02-EMTN-01/2/1_KSKRM01-EMTN-01/2/1|MY13E01535|224.95 Mbit/s|224 Mbit/s|1024 QAM,FNSDR56-EMTN-01/8/1_FNCGL11-EMTN-01/14/1|CM15E11732|194.12 Mbit/s|224 Mbit/s|1024 QAM,CGKTL42-EMTN-01/9/1_CGKTL39-EMTN-01/3/1||101.21 Mbit/s|107 Mbit/s|1024 QAM,NOHTAT1-HRTN-01/2/2_NOHTA02-HRTN-03/4/1|CM11H32257|Hybrid(454Mbit/s)||,NGSDRH6-EMTN-01/2/1_NGSDRI5-EMTN-01/6/1|DH23E26516|202.34 Mbit/s|224 Mbit/s|1024 QAM,BMNBG35-EMTN-01/4+5/1_BMNBG04-EMTN-01/2+3/1|CM07E10442|224.95 Mbit/s|224 Mbit/s|1024 QAM,NGRPG51-EMTN-01/2/1_NGRPG49-EMTN-01/16/1|DH11E19428|61.66 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,CPSDR10-EMTN-02/6+7/1_CPSDR02-EMTN-01/2+3/1|CM18E00912|200.29 Mbit/s|224 Mbit/s|1024 QAM,MNGZR16-EMTN-01/4/1_MNGZR15-EMTN-01/4/1|DH18E020468|204.4 Mbit/s|224 Mbit/s|1024 QAM,CMSDR51-EMTN-01/2/1_CMSDR37-EMTN-01/3/1|CM15E10631|216.73 Mbit/s|224 Mbit/s|1024 QAM,BMBNC12-EMTN-02/2/1_CMHMN31-EMTN-01/2/1|CM26E25707|96.58 Mbit/s|201 Mbit/s|512 QAM,CGSDP11-EMTN-01/3/1_CGSDP31-EMTN-01/2/1|CG13E13167|93.36 Mbit/s|97 Mbit/s|512 QAM,MDRJR02-HRTN-02/4/1_MDSDR06-HRTN-01/3/1|KH13H14960|Hybrid(242Mbit/s)||,MBSML01-HRTN-01/2/1_MBSML04-HRTN-01/3/1|SY13H17176|Hybrid(242Mbit/s)||,DHSVR12-EMTN-01/12+13/1_GPKLK05-EMTN-01/4+5/1|DH07E04623|160.29 Mbit/s|224 Mbit/s|1024 QAM,CGFTK27-EMTN-01/4+5/1_CGFTK37-EMTN-01/4+5/1|CG23E12289|208.51 Mbit/s|224 Mbit/s|1024 QAM,CMLXM20-EMTN-01/2/1_CMBRR10-EMTN-01/10/1|CM15E15615|139.77 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,BMAKH02-EMTN-01/4+5/1_BMAKH01-EMTN-01/8+9/1|CM15E11393|180.84 Mbit/s|201 Mbit/s|1024 QAM,NSMND05-EMTN-01/8/1_NSMND19-EMTN-02/5/1|DH15E14182|204.4 Mbit/s|224 Mbit/s|1024 QAM,DHKGNT1-EMTN-01/14/1_DHSVR73-EMTN-01/4/1|DH18E17628|143.88 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,CMCDG07-EMTN-01/3/1_CMNKT02-EMTN-01/7/1|CM13E11230|210.56 Mbit/s|224 Mbit/s|1024 QAM,NSBLB02-EMTN-02/12+13/1_NSRPR14-EMTN-01/6+7/1|DH15E18237|224.95 Mbit/s|224 Mbit/s|1024 QAM,CMCND36-EMTN-01/3/1_CMCND10-EMTN-01/7/1|CM18E15190|93.36 Mbit/s|97 Mbit/s|512 QAM,CXMHK19-EMTN-01/2/1_CXMHK05-EMTN-01/4/1|CG18E07233|143.88 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,GPSDRN9-EMTN-01/3/1_GPSDRQ4-EMTN-01/5/1|DH18E19391|218.78 Mbit/s|224 Mbit/s|1024 QAM,SGSJP21-EMTN-01/4/1_SGSJP22-EMTN-01/2/1|RS06E21885|191.23 Mbit/s|203 Mbit/s|512 QAM,DHDHR24-EMTN-01/4/1_DHNWG52-EMTN-01/4/1|DH15E22292|99.15 Mbit/s|107 Mbit/s|1024 QAM,CMCND24-EMTN-01/2/1_CMCND09-EMTN-01/21/1|CM18E09359|84.24 Mbit/s|94 Mbit/s|512 QAM,CMBRR03-EMTN-01/4/1_CMCND10-EMTN-01/2/1|CM07E11800|122.2 Mbit/s|224 Mbit/s|1024 QAM,NOHTA09-EMTN-01/2/1_NOHTA10-EMTN-01/3/1|CM13E08022|210.56 Mbit/s|224 Mbit/s|1024 QAM,CXSDR33-EMTN-01/4+5/1_CXSDR30-EMTN-01/4+5/1|CG18H04411|172.73 Mbit/s|203 Mbit/s|512 QAM,DHSVR81-EMTN-01/2+3/1_DHSVR09-EMTN-01/2+3/1||204.4 Mbit/s|224 Mbit/s|1024 QAM,FNDGN07-EMTN-01/2/1_NOCMP32-EMTN-01/8/1|CM15E11090|202.34 Mbit/s|224 Mbit/s|1024 QAM,NSSBP05-EMTN-01/14+15/1_GPKPS29-EMTN-01/2+3/1|DH18E18294|214.67 Mbit/s|224 Mbit/s|1024 QAM,CXCKR06-EMTN-01/2+3/1_CXCKR17-EMTN-01/2+3/1|CG18E12427|218.78 Mbit/s|224 Mbit/s|1024 QAM,CGRNG12-EMTN-01/6/1_CGRNG29-EMTN-01/6/1|CG13E12154|163.3 Mbit/s|224 Mbit/s|1024 QAM,RMSDR06-EMTN-01/10/1_RMSDR10-EMTN-01/2/1|CG18E16398|210.56 Mbit/s|224 Mbit/s|1024 QAM,FPNGR25-EMTN-01/2/1_FPNGR27-EMTN-01/4/1|KU23E21711|105.32 Mbit/s|107 Mbit/s|1024 QAM,DHKGN85-EMTN-01/2+3/1_DHKGN28-EMTN-01/4+5/1|DH23E17713|208.51 Mbit/s|224 Mbit/s|1024 QAM,CGFTK15-EMTN-02/14/1_KCMKC01-EMTN-01/4/1|CG13E12639|216.73 Mbit/s|224 Mbit/s|1024 QAM,CMLXM02-EMTN-01/5/1_CMLXM01-EMTN-01/5/1|CM15E11086|202.34 Mbit/s|224 Mbit/s|1024 QAM,NOBGM01-EMTN-01/16/1_NOBGM31-EMTN-01/2/1|CM13E15735|115.76 Mbit/s|200 Mbit/s|512 QAM,BMBNC01-EMTN-01/16/1_BMBNC16-EMTN-01/2/1|CM18E09078|402.78 Mbit/s|201 Mbit/s|512 QAM,PTSDR13-EMTN-01/2/1_PTSDR16-EMTN-01/5/1|BS13E09709|145.94 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,LXRGN06-EMTN-04/8/1_LXRGN10-EMTN-01/17/1|CM13E24971|158.35 Mbit/s|203 Mbit/s|512 QAM,NOBGM19-EMTN-01/9/1_NOBGM03-EMTN-01/3/1|CM18E24961|199.45 Mbit/s|203 Mbit/s|512 QAM,CMSDD03-EMTN-01/4+5/1_CMSDR20-EMTN-01/8+9/1|CM15E11771|176.73 Mbit/s|201 Mbit/s|512 QAM,CPUMT09-EMTN-01/2/1_CPUMT08-EMTN-01/2/1|CM07E11142|145.9 Mbit/s|150 Mbit/s|512 QAM,LXKMN12-EMTN-01/2/1_NOMJD23-EMTN-01/18/1|CM13E10981|351.63 Mbit/s|203 Mbit/s|512 QAM,CPHGN26-EMTN-01/2/1_CPHGN05-EMTN-01/6/1|CM15E15900|210.56 Mbit/s|224 Mbit/s|1024 QAM,CMMHG06-EMTN-01/2+3/1_CMMHG03-EMTN-01/4+5/1|CM13E11189|204.4 Mbit/s|224 Mbit/s|1024 QAM,GPSDRO8-EMTN-01/8/1_GPSDRO0-EMTN-01/2/1|DH18E26609|179.47 Mbit/s|200 Mbit/s|512 QAM,CGBAK12-EMTN-01/4/1_CGBAK14-EMTN-01/3/1|CG23E12174|208.51 Mbit/s|224 Mbit/s|1024 QAM,DHSBG05-EMTN-01/2+3/1_DHMJH23-EMTN-02/6+7/1|DH18E07311|119.51 Mbit/s|183 Mbit/s|256 QAM,BBLMA04-EMTN-01/8/1_BBTCI02-EMTN-01/8/1|CG07E16455|355.74 Mbit/s|203 Mbit/s|512 QAM,MNGZR02-EMTN-01/6/1_MNGZR05-EMTN-01/2/1|DH18E17648|224.95 Mbit/s|224 Mbit/s|1024 QAM,DHCNT08-EMTN-01/2/1_DHCNT89-EMTN-01/2/1|DH15E19420|87.2 Mbit/s|97 Mbit/s|512 QAM,NOSNB14-EMTN-01/7/1_NOSNB01-EMTN-01/3/1|CM18E24951|214.67 Mbit/s|224 Mbit/s|1024 QAM,CGRZN01-EMTN-01/17/1_CGRZN17-EMTN-01/2/1|CG18E12344|208.51 Mbit/s|224 Mbit/s|1024 QAM,MYBLK37-EMTN-01/6/1_MYBLK36-EMTN-01/2/1|MY15E21802|194.12 Mbit/s|224 Mbit/s|1024 QAM,CGPTAB0-EMTN-01/2/1_CGPTA16-EMTN-01/4/1|CG26E29123|97.47 Mbit/s|97 Mbit/s|512 QAM,CPSDR15-EMTN-01/6/1_CPSDR30-EMTN-01/2/1|CM15E08039|208.51 Mbit/s|224 Mbit/s|1024 QAM,DHKGNT1-EMTN-02/2+3/1_DHKGN41-EMTN-02/2+3/1|DH23E18252|193.17 Mbit/s|203 Mbit/s|512 QAM,KSOST02-EMTN-01/2/1_BMNNG04-EMTN-01/5/1|CM07E15685|105.32 Mbit/s|107 Mbit/s|1024 QAM,BMSDR04-EMTN-04/2+3/1_BMSDR21-EMTN-02/2+3/1|CM13E21050|449.9 Mbit/s|224 Mbit/s|1024 QAM,NOCMP29-EMTN-01/2/1_NOCMP34-EMTN-01/3/1|CM15E15521|187.12 Mbit/s|203 Mbit/s|512 QAM,LXRPR02-EMTN-01/16/1_LXRPR06-EMTN-01/4/1|CM07E24943|183.01 Mbit/s|203 Mbit/s|512 QAM,CGANW08-EMTN-01/6/1_CGANW09-EMTN-01/2/1|CG07E12873|179.74 Mbit/s|224 Mbit/s|1024 QAM,GPSDRO0-EMTN-01/3/1_GPSDR1C-EMTN-01/2/1|DH26E26609|141.79 Mbit/s|224 Mbit/s|1024 QAM,RMNNC01-EMTN-01/8+9/1_KCMHC03-EMTN-01/2+3/1|CG07E16111|203.56 Mbit/s|203 Mbit/s|512 QAM,FNSDR59-EMTN-01/10/1_FNCGL10-EMTN-01/10/1|CM18E05772|157.13 Mbit/s|224 Mbit/s|1024 QAM,CPUMT01-EMTN-01/6/1_CPUMT05-EMTN-01/3/1|CM13E11400|187.12 Mbit/s|203 Mbit/s|512 QAM,LXSDR12-EMTN-01/18+19/1_NOCTK31-EMTN-01/8+9/1|CM13E15808|202.34 Mbit/s|224 Mbit/s|1024 QAM",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "63.0",
         xAxisData: "2021-01-09",
         date: null,
         categoryNames: "SES",
         dataType1:
            "BMSDR09-HRTN-01/1/1_BMNBG13-HRTN-01/1/1|CM13H30178|Hybrid(432Mbit/s)||,CXSDR34-EMTN-01/2+3/1_CXSDR02-EMTN-01/8+9/1|CG23E12964|220.84 Mbit/s|224 Mbit/s|1024 QAM,CGPTA84-EMTN-01/5/1_CGPTA45-EMTN-01/6/1|CG18E25436|216.73 Mbit/s|224 Mbit/s|1024 QAM,NSSDR14-EMTN-01/3/1_NSSDR03-EMTN-01/6/1|DH15E02360|204.4 Mbit/s|224 Mbit/s|1024 QAM,NSSDR07-EMTN-01/2+3/1_NSSDR06-EMTN-01/16+17/1||135.27 Mbit/s|224 Mbit/s|1024 QAM,CPSDR19-EMTN-01/14+15/1_CPFDG17-EMTN-01/4+5/1|CM13E11257|206.45 Mbit/s|224 Mbit/s|1024 QAM,CGPTA16-EMTN-01/4/1_CGPTAB0-EMTN-01/2/1|CG26E29123|97.47 Mbit/s|97 Mbit/s|512 QAM,CXSDR14-EMTN-01/6/1_CXSDRC4-EMTN-01/2/1|CG18E28901|89.25 Mbit/s|97 Mbit/s|512 QAM,CMBRC27-EMTN-01/4+5/1_CMBRC12-EMTN-01/4+5/1|CM18E05794|202.34 Mbit/s|224 Mbit/s|1024 QAM,CGSDP25-EMTN-01/8/1_CGSDP03-EMTN-02/14/1|CG18E12759|271.26 Mbit/s|201 Mbit/s|1024 QAM,TNDDR04-EMTN-01/2/1_TNMZP31-EMTN-01/2/1|MY13E15202|195.34 Mbit/s|203 Mbit/s|512 QAM,CGLHG01-EMTN-01/13/1_CGLHG09-EMTN-02/2/1|CG23E12306|218.78 Mbit/s|224 Mbit/s|1024 QAM,NGSDRI5-EMTN-01/6/1_NGSDRH6-EMTN-01/2/1|DH23E26516|202.34 Mbit/s|224 Mbit/s|1024 QAM,GPKLG05-EMTN-01/2+3/1_GPKLG15-EMTN-01/4+5/1|DH15E17706|170.56 Mbit/s|201 Mbit/s|1024 QAM,CMDBD09-EMTN-01/3/1_CMDBD41-EMTN-01/6/1||220.84 Mbit/s|224 Mbit/s|1024 QAM,CMHMN23-HRTN-01/4/1_CMHMN10-HRTN-01/3/1|CM18H22585|Hybrid(52Mbit/s)||,KCMHC02-HRTN-02/7/1_KCSDR06-HRTN-01/7/1||Hybrid(273Mbit/s)||,KCMHC02-HRTN-02/7/2_KCMHC03-HRTN-02/7/1||Hybrid(273Mbit/s)||,CGCDG15-EMTN-01/16/1_CGCDGT1-EMTN-01/2/1|CG15E07185|223.84 Mbit/s|224 Mbit/s|1024 QAM,PBSTH05-HRTN-05/3/1_PBSNG02-HRTN-02/3/1|KU13H29647|Hybrid(454Mbit/s)||,CXSDR85-HRTN-01/3/1_CXSDRA2-HRTN-01/5/1||Hybrid(90Mbit/s)||,CMSDR11-HRTN-01/3/1_CMSDR06-HRTN-01/3/1|CM23H29237|Hybrid(242Mbit/s)||,CGCND07-HRTN-01/3/1_CGPTA82-HRTN-02/2/1||Hybrid(90Mbit/s)||,CPFDG40-HRTN-01/6/1_CPFDG39-HRTN-01/4/1|CM15H27867|Hybrid(90Mbit/s)||,CMSDR78-HRTN-01/4/1_CMSDR80-HRTN-01/3/1|CM23H24067|Hybrid(183Mbit/s)||,BMSDR44-HRTN-01/14/1_BMSDR61-HRTN-01/3/1|CM11H27862|Hybrid(183Mbit/s)||,CGPRT12-EMTN-01/4+5/1_CGPRT03-EMTN-01/16+17/1|CG23E12756|206.45 Mbit/s|224 Mbit/s|1024 QAM,CPFDG27-EMTN-01/2/1_CPHMC01-EMTN-01/13/1|CM23E08367|143.85 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,CGBYZ16-EMTN-01/6/1_CGBYZ17-EMTN-01/4/1|CG18E16062|102.86 Mbit/s|203 Mbit/s|512 QAM,GPSDR26-EMTN-01/16/1_GPSDRA6-EMTN-01/4/1|DH26E25560|145.94 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,NGSDRE8-EMTN-01/2+3/1_NGSDRG3-EMTN-01/4+5/1|DH18E19202|208.51 Mbit/s|224 Mbit/s|1024 QAM,CMLXM32-EMTN-01/2/1_CMLXM10-EMTN-01/3/1|CM18E11956|224.95 Mbit/s|224 Mbit/s|1024 QAM,NGSDRI5-EMTN-01/8/1_NGSDRG7-EMTN-01/2/1|DH23E19716|208.51 Mbit/s|224 Mbit/s|1024 QAM,JPISL14-EMTN-01/4/1_SRSDR07-EMTN-01/2/1|MY07E21837|222.89 Mbit/s|224 Mbit/s|1024 QAM,HGMDB02-EMTN-01/4+5/1_HGMDB03-EMTN-02/4+5/1|CM07E15741|214.67 Mbit/s|224 Mbit/s|1024 QAM,CMBRC04-EMTN-01/14/1_CMSDR42-EMTN-01/5/1|CM13E15890|212.62 Mbit/s|224 Mbit/s|1024 QAM,SPSDR02-EMTN-02/5/1_SPNRA01-EMTN-01/3/1|BS07E10127|214.67 Mbit/s|224 Mbit/s|1024 QAM,PTKLP12-EMTN-01/2+3/1_BRAMT02-EMTN-03/2+3/1|BS07E08637|150.04 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,CMMDN09-EMTN-01/3/1_CMMDN29-EMTN-01/2/1|CM18E09076|97.47 Mbit/s|97 Mbit/s|512 QAM,NOCTK42-EMTN-01/8/1_NOCTK14-EMTN-01/4/1|CM23E20411|220.84 Mbit/s|224 Mbit/s|1024 QAM,MYFLB02-EMTN-01/3/1_MYFLB01-EMTN-01/3/1|MY13E04020|214.67 Mbit/s|224 Mbit/s|1024 QAM,GPSDRO0-EMTN-01/2/1_GPSDRO8-EMTN-01/8/1|DH18E26609|179.47 Mbit/s|200 Mbit/s|512 QAM,CXSDR30-EMTN-01/4+5/1_CXSDR33-EMTN-01/4+5/1|CG18H04411|172.73 Mbit/s|203 Mbit/s|512 QAM,CMLXM06-EMTN-01/8+9/1_CPSRT08-EMTN-01/4+5/1|CM07E11692|201.39 Mbit/s|224 Mbit/s|1024 QAM,NOMJD23-EMTN-01/18/1_LXKMN12-EMTN-01/2/1|CM13E10981|351.63 Mbit/s|203 Mbit/s|512 QAM,NOCMP34-EMTN-01/3/1_NOCMP29-EMTN-01/2/1|CM15E15521|187.12 Mbit/s|203 Mbit/s|512 QAM,BMAKH04-EMTN-01/6/1_BMKSB06-EMTN-01/3/1|CM15E11162|224.95 Mbit/s|224 Mbit/s|1024 QAM,SGULP31-EMTN-01/5/1_SGSJP21-EMTN-01/3/1|RS15E21907|194.12 Mbit/s|224 Mbit/s|1024 QAM,NGSDRF0-EMTN-01/2/1_NGSDRI8-EMTN-01/3/1|DH18E19727|174.68 Mbit/s|201 Mbit/s|1024 QAM,CGPRT28-EMTN-01/2/1_CGPRT61-EMTN-01/6/1|CG23H30167|133.6 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,SPZNR04-EMTN-01/5/1_SPZNR01-EMTN-01/2/1|BS13E08585|214.67 Mbit/s|224 Mbit/s|1024 QAM,NOMJD36-EMTN-01/2+3/1_LXSDR09-EMTN-01/8+9/1|CM18E15815|206.45 Mbit/s|224 Mbit/s|1024 QAM,RMBGC05-EMTN-01/2+3/1_RMBGC04-EMTN-01/14+15/1|CG11E25457|200.29 Mbit/s|224 Mbit/s|1024 QAM,CMDBD11-EMTN-01/2+3/1_CMMDN25-EMTN-01/2+3/1|CM15E11827|210.56 Mbit/s|224 Mbit/s|1024 QAM,DHMJHB9-EMTN-01/2/1_DHKHL74-EMTN-01/13/1|DH26E19601|135.66 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,CGPTG07-EMTN-01/2/1_CGPTG18-EMTN-01/4/1|CG26E12324|198.23 Mbit/s|224 Mbit/s|1024 QAM,NOSNM20-EMTN-01/6/1_NOSNM13-EMTN-01/4/1|CM13E15458|187.12 Mbit/s|203 Mbit/s|512 QAM,NOBGM07-EMTN-03/4/1_NOBGM02-EMTN-01/4/1|CM23E02214|134.53 Mbit/s|224 Mbit/s|1024 QAM,BMSDR18-EMTN-01/2/1_BMSDR09-EMTN-01/4/1|CM18E15636|210.56 Mbit/s|224 Mbit/s|1024 QAM,GPSDRB1-EMTN-01/6+7/1_GPSDR50-EMTN-01/2+3/1|DH18E14018|194.12 Mbit/s|224 Mbit/s|1024 QAM,CXMHK08-EMTN-01/18/1_CXMHK05-EMTN-01/5/1|CG18E24710|204.4 Mbit/s|224 Mbit/s|1024 QAM,CXSDR08-EMTN-02/2/1_CXRMU06-EMTN-01/6/1|CG07E12199|220.84 Mbit/s|224 Mbit/s|1024 QAM,NOCTK28-EMTN-01/4/1_NOCTK16-EMTN-01/8/1|CM23E20406|183.01 Mbit/s|224 Mbit/s|1024 QAM",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "61.0",
         xAxisData: "2021-01-10",
         date: null,
         categoryNames: "SES",
         dataType1:
            "DHMJHB9-EMTN-01/2/1_DHKHL74-EMTN-01/13/1|DH26E19601|135.66 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,CPMTB01-EMTN-01/4/1_CPUMT07-EMTN-01/2/1|CM07E11817|277.41999999999996 Mbit/s|201 Mbit/s|1024 QAM,NOBGM07-EMTN-03/4/1_NOBGM02-EMTN-01/4/1|CM23E02214|134.53 Mbit/s|224 Mbit/s|1024 QAM,BMSDR18-EMTN-01/2/1_BMSDR09-EMTN-01/4/1|CM18E15636|210.56 Mbit/s|224 Mbit/s|1024 QAM,GPSDRB1-EMTN-01/6+7/1_GPSDR50-EMTN-01/2+3/1|DH18E14018|194.12 Mbit/s|224 Mbit/s|1024 QAM,CXMHK08-EMTN-01/18/1_CXMHK05-EMTN-01/5/1|CG18E24710|204.4 Mbit/s|224 Mbit/s|1024 QAM,MAMDP01-EMTN-02/2/1_MASDR20-EMTN-01/2/1|KU18E10289|90.44 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,CMMDN09-EMTN-01/3/1_CMMDN29-EMTN-01/2/1|CM18E09076|97.47 Mbit/s|97 Mbit/s|512 QAM,JPISL14-EMTN-01/4/1_SRSDR07-EMTN-01/2/1|MY07E21837|222.89 Mbit/s|224 Mbit/s|1024 QAM,SPSDR02-EMTN-02/5/1_SPNRA01-EMTN-01/3/1|BS07E10127|214.67 Mbit/s|224 Mbit/s|1024 QAM,CGBYZ16-EMTN-01/6/1_CGBYZ17-EMTN-01/4/1|CG18E16062|102.86 Mbit/s|203 Mbit/s|512 QAM,NOSNM20-EMTN-01/6/1_NOSNM13-EMTN-01/4/1|CM13E15458|187.12 Mbit/s|203 Mbit/s|512 QAM,NOCTK28-EMTN-01/4/1_NOCTK16-EMTN-01/8/1|CM23E20406|183.01 Mbit/s|224 Mbit/s|1024 QAM,CXSDR08-EMTN-02/2/1_CXRMU06-EMTN-01/6/1|CG07E12199|220.84 Mbit/s|224 Mbit/s|1024 QAM,CPFDG27-EMTN-01/2/1_CPHMC01-EMTN-01/13/1|CM23E08367|143.85 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NOCTK42-EMTN-01/8/1_NOCTK14-EMTN-01/4/1|CM23E20411|220.84 Mbit/s|224 Mbit/s|1024 QAM,CGBYZ25-EMTN-01/2/1_CGBYZ19-EMTN-01/3/1|CG23E16066|202.34 Mbit/s|224 Mbit/s|1024 QAM,NSPLS02-EMTN-03/2/1_NSPLS13-EMTN-02/2/1|DH15E020401|163.3 Mbit/s|224 Mbit/s|1024 QAM,CMLXM32-EMTN-01/2/1_CMLXM10-EMTN-01/3/1|CM18E11956|224.95 Mbit/s|224 Mbit/s|1024 QAM,NSSDR45-EMTN-01/6/1_NSSDR53-EMTN-01/15/1|DH11E27162|204.4 Mbit/s|224 Mbit/s|1024 QAM,MYFLB02-EMTN-01/3/1_MYFLB01-EMTN-01/3/1|MY13E04020|214.67 Mbit/s|224 Mbit/s|1024 QAM,CMBRC04-EMTN-01/14/1_CMSDR42-EMTN-01/5/1|CM13E15890|212.62 Mbit/s|224 Mbit/s|1024 QAM,HGMDB02-EMTN-01/4+5/1_HGMDB03-EMTN-02/4+5/1|CM07E15741|214.67 Mbit/s|224 Mbit/s|1024 QAM,PTKLP12-EMTN-01/2+3/1_BRAMT02-EMTN-03/2+3/1|BS07E08637|150.04 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NOMJD36-EMTN-01/2+3/1_LXSDR09-EMTN-01/8+9/1|CM18E15815|206.45 Mbit/s|224 Mbit/s|1024 QAM,CMDBD11-EMTN-01/2+3/1_CMMDN25-EMTN-01/2+3/1|CM15E11827|210.56 Mbit/s|224 Mbit/s|1024 QAM,SPZNR04-EMTN-01/5/1_SPZNR01-EMTN-01/2/1|BS13E08585|214.67 Mbit/s|224 Mbit/s|1024 QAM,JKSDR01-HRTN-02/3/1_JKSDR15-HRTN-01/5/1|BS26H25962|Hybrid(242Mbit/s)||,SYSDR94-HRTN-02/6/1_SYDKS26-HRTN-01/6/1|SY07H20891|Hybrid(183Mbit/s)||,CMSDR78-HRTN-01/4/1_CMSDR80-HRTN-01/3/1|CM23H24067|Hybrid(183Mbit/s)||,GPKLG05-EMTN-01/2+3/1_GPKLG15-EMTN-01/4+5/1|DH15E17706|170.56 Mbit/s|201 Mbit/s|1024 QAM,CMDBD09-EMTN-01/3/1_CMDBD41-EMTN-01/6/1||220.84 Mbit/s|224 Mbit/s|1024 QAM,CPSDR19-EMTN-01/14+15/1_CPFDG17-EMTN-01/4+5/1|CM13E11257|206.45 Mbit/s|224 Mbit/s|1024 QAM,LXRGN04-EMTN-01/4/1_LXRGN15-EMTN-02/4/1|CM18E24967|445.78 Mbit/s|224 Mbit/s|1024 QAM,TNBPR09-EMTN-01/2/1_TNKLH24-EMTN-01/3/1|MY15E27262|99.15 Mbit/s|107 Mbit/s|1024 QAM,NSSDR07-EMTN-01/2+3/1_NSSDR06-EMTN-01/16+17/1||135.27 Mbit/s|224 Mbit/s|1024 QAM,CGLHG01-EMTN-01/13/1_CGLHG09-EMTN-02/2/1|CG23E12306|218.78 Mbit/s|224 Mbit/s|1024 QAM,NSSDR14-EMTN-01/3/1_NSSDR03-EMTN-01/6/1|DH15E02360|204.4 Mbit/s|224 Mbit/s|1024 QAM,CXSDR14-EMTN-01/6/1_CXSDRC4-EMTN-01/2/1|CG18E28901|89.25 Mbit/s|97 Mbit/s|512 QAM,NOCMP34-EMTN-01/3/1_NOCMP29-EMTN-01/2/1|CM15E15521|187.12 Mbit/s|203 Mbit/s|512 QAM,CGSDP25-EMTN-01/8/1_CGSDP03-EMTN-02/14/1|CG18E12759|271.26 Mbit/s|201 Mbit/s|1024 QAM,TNDDR04-EMTN-01/2/1_TNMZP31-EMTN-01/2/1|MY13E15202|195.34 Mbit/s|203 Mbit/s|512 QAM,CMSDD01-EMTN-01/4/1_CMSDD33-EMTN-01/2/1|CM15E15648|208.51 Mbit/s|224 Mbit/s|1024 QAM,CMBRC27-EMTN-01/4+5/1_CMBRC12-EMTN-01/4+5/1|CM18E05794|202.34 Mbit/s|224 Mbit/s|1024 QAM,NOMJD23-EMTN-01/18/1_LXKMN12-EMTN-01/2/1|CM13E10981|351.63 Mbit/s|203 Mbit/s|512 QAM,CMLXM06-EMTN-01/8+9/1_CPSRT08-EMTN-01/4+5/1|CM07E11692|201.39 Mbit/s|224 Mbit/s|1024 QAM,CGPTG21-EMTN-01/4/1_CGPRT27-EMTN-01/2/1|CG18E07827|222.89 Mbit/s|224 Mbit/s|1024 QAM,BMBNC12-EMTN-02/4/1_BMBNC30-EMTN-01/2/1|CM11E28843|89.25 Mbit/s|97 Mbit/s|512 QAM,BMAKH04-EMTN-01/6/1_BMKSB06-EMTN-01/3/1|CM15E11162|224.95 Mbit/s|224 Mbit/s|1024 QAM,CMMDN05-EMTN-01/2/1_CMMDN03-EMTN-01/2/1|CM13E10950|97.47 Mbit/s|97 Mbit/s|512 QAM,SYFNC15-HRTN-03/3/1_SYFNC11-HRTN-01/3/1|SY13H14889|Hybrid(217Mbit/s)||,CGCDG15-EMTN-01/16/1_CGCDGT1-EMTN-01/2/1|CG15E07185|223.84 Mbit/s|224 Mbit/s|1024 QAM,CXSDR34-EMTN-01/2+3/1_CXSDR02-EMTN-01/8+9/1|CG23E12964|220.84 Mbit/s|224 Mbit/s|1024 QAM,CGPTA84-EMTN-01/5/1_CGPTA45-EMTN-01/6/1|CG18E25436|216.73 Mbit/s|224 Mbit/s|1024 QAM,KCMHC02-HRTN-02/7/1_KCSDR06-HRTN-01/7/1||Hybrid(273Mbit/s)||,KCMHC02-HRTN-02/7/2_KCMHC03-HRTN-02/7/1||Hybrid(273Mbit/s)||,CMHMN23-HRTN-01/4/1_CMHMN10-HRTN-01/3/1|CM18H22585|Hybrid(52Mbit/s)||,CGCND07-HRTN-01/3/1_CGPTA82-HRTN-02/2/1||Hybrid(90Mbit/s)||,CMSDR11-HRTN-01/3/1_CMSDR06-HRTN-01/3/1|CM23H29237|Hybrid(242Mbit/s)||,BHSDR07-HRTN-01/4/1_BHSDR29-HRTN-02/3/1|BS18H14550|Hybrid(228Mbit/s)||,FPNGR10-HRTN-01/3/1_FPCBH01-HRTN-02/3/1|KU13H09648|Hybrid(183Mbit/s)||",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "55.0",
         xAxisData: "2021-01-11",
         date: null,
         categoryNames: "SES",
         dataType1:
            "CGPTA84-EMTN-01/5/1_CGPTA45-EMTN-01/6/1|CG18E25436|216.73 Mbit/s|224 Mbit/s|1024 QAM,BMBNC12-EMTN-02/4/1_BMBNC30-EMTN-01/2/1|CM11E28843|89.25 Mbit/s|97 Mbit/s|512 QAM,BMAKH04-EMTN-01/6/1_BMKSB06-EMTN-01/3/1|CM15E11162|224.95 Mbit/s|224 Mbit/s|1024 QAM,CGSDP25-EMTN-01/8/1_CGSDP03-EMTN-02/14/1|CG18E12759|271.26 Mbit/s|201 Mbit/s|1024 QAM,TNDDR04-EMTN-01/2/1_TNMZP31-EMTN-01/2/1|MY13E15202|195.34 Mbit/s|203 Mbit/s|512 QAM,CGFTK07-EMTN-01/18/1_CGFTK27-EMTN-01/2/1|CG18E25452|388.24 Mbit/s|224 Mbit/s|1024 QAM,CPUMT34-EMTN-01/3/1_CPUMT11-EMTN-01/16/1|CM13E15941|214.67 Mbit/s|224 Mbit/s|1024 QAM,FNSDR35-EMTN-01/14+15/1_FNSDR03-EMTN-01/4+5/1|CM18E07499|181.79 Mbit/s|224 Mbit/s|1024 QAM,CMLXM06-EMTN-01/8+9/1_CPSRT08-EMTN-01/4+5/1|CM07E11692|201.39 Mbit/s|224 Mbit/s|1024 QAM,CGPTG21-EMTN-01/4/1_CGPRT27-EMTN-01/2/1|CG18E07827|222.89 Mbit/s|224 Mbit/s|1024 QAM,CPFDG27-EMTN-01/2/1_CPHMC01-EMTN-01/13/1|CM23E08367|143.85 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,CMLXM32-EMTN-01/2/1_CMLXM10-EMTN-01/3/1|CM18E11956|224.95 Mbit/s|224 Mbit/s|1024 QAM,NOCTK42-EMTN-01/8/1_NOCTK14-EMTN-01/4/1|CM23E20411|220.84 Mbit/s|224 Mbit/s|1024 QAM,CGBYZ25-EMTN-01/2/1_CGBYZ19-EMTN-01/3/1|CG23E16066|202.34 Mbit/s|224 Mbit/s|1024 QAM,CGBYZ16-EMTN-01/6/1_CGBYZ17-EMTN-01/4/1|CG18E16062|102.86 Mbit/s|203 Mbit/s|512 QAM,TNBPR09-EMTN-01/2/1_TNKLH24-EMTN-01/3/1|MY15E27262|99.15 Mbit/s|107 Mbit/s|1024 QAM,NSSDR07-EMTN-01/2+3/1_NSSDR06-EMTN-01/16+17/1||135.27 Mbit/s|224 Mbit/s|1024 QAM,CGLHG01-EMTN-01/13/1_CGLHG09-EMTN-02/2/1|CG23E12306|218.78 Mbit/s|224 Mbit/s|1024 QAM,CXSDR14-EMTN-01/6/1_CXSDRC4-EMTN-01/2/1|CG18E28901|89.25 Mbit/s|97 Mbit/s|512 QAM,CMBRC27-EMTN-01/4+5/1_CMBRC12-EMTN-01/4+5/1|CM18E05794|202.34 Mbit/s|224 Mbit/s|1024 QAM,NSSDR14-EMTN-01/3/1_NSSDR03-EMTN-01/6/1|DH15E02360|204.4 Mbit/s|224 Mbit/s|1024 QAM,GPKLG05-EMTN-01/2+3/1_GPKLG15-EMTN-01/4+5/1|DH15E17706|170.56 Mbit/s|201 Mbit/s|1024 QAM,CMSDR78-HRTN-01/4/1_CMSDR80-HRTN-01/3/1|CM23H24067|Hybrid(183Mbit/s)||,KCMHC02-HRTN-02/7/1_KCSDR06-HRTN-01/7/1||Hybrid(273Mbit/s)||,KCMHC02-HRTN-02/7/2_KCMHC03-HRTN-02/7/1||Hybrid(273Mbit/s)||,CMHMN23-HRTN-01/4/1_CMHMN10-HRTN-01/3/1|CM18H22585|Hybrid(52Mbit/s)||,CPSDR19-EMTN-01/14+15/1_CPFDG17-EMTN-01/4+5/1|CM13E11257|206.45 Mbit/s|224 Mbit/s|1024 QAM,NOSNM20-EMTN-01/6/1_NOSNM13-EMTN-01/4/1|CM13E15458|187.12 Mbit/s|203 Mbit/s|512 QAM,CXSDR08-EMTN-02/2/1_CXRMU06-EMTN-01/6/1|CG07E12199|220.84 Mbit/s|224 Mbit/s|1024 QAM,NOCTK28-EMTN-01/4/1_NOCTK16-EMTN-01/8/1|CM23E20406|183.01 Mbit/s|224 Mbit/s|1024 QAM,MAMDP01-EMTN-02/2/1_MASDR20-EMTN-01/2/1|KU18E10289|90.44 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NOMJD36-EMTN-01/2+3/1_LXSDR09-EMTN-01/8+9/1|CM18E15815|206.45 Mbit/s|224 Mbit/s|1024 QAM,SGULP31-EMTN-01/5/1_SGSJP21-EMTN-01/3/1|RS15E21907|194.12 Mbit/s|224 Mbit/s|1024 QAM,LXSDR24-EMTN-01/12/1_LXSDR34-EMTN-01/3/1|CM13E10917|202.34 Mbit/s|224 Mbit/s|1024 QAM,CMDBD11-EMTN-01/2+3/1_CMMDN25-EMTN-01/2+3/1|CM15E11827|210.56 Mbit/s|224 Mbit/s|1024 QAM,RMSDR10-EMTN-01/2/1_RMSDR06-EMTN-01/10/1|CG18E16398|210.56 Mbit/s|224 Mbit/s|1024 QAM,NOBGM07-EMTN-03/4/1_NOBGM02-EMTN-01/4/1|CM23E02214|134.53 Mbit/s|224 Mbit/s|1024 QAM,GPSDRB1-EMTN-01/6+7/1_GPSDR50-EMTN-01/2+3/1|DH18E14018|194.12 Mbit/s|224 Mbit/s|1024 QAM,CPMTB01-EMTN-01/4/1_CPUMT07-EMTN-01/2/1|CM07E11817|277.41999999999996 Mbit/s|201 Mbit/s|1024 QAM,CMMDN09-EMTN-01/3/1_CMMDN29-EMTN-01/2/1|CM18E09076|97.47 Mbit/s|97 Mbit/s|512 QAM,SPZNR04-EMTN-01/5/1_SPZNR01-EMTN-01/2/1|BS13E08585|214.67 Mbit/s|224 Mbit/s|1024 QAM,HGMDB02-EMTN-01/4+5/1_HGMDB03-EMTN-02/4+5/1|CM07E15741|214.67 Mbit/s|224 Mbit/s|1024 QAM,JPISL14-EMTN-01/4/1_SRSDR07-EMTN-01/2/1|MY07E21837|222.89 Mbit/s|224 Mbit/s|1024 QAM,SPSDR02-EMTN-02/5/1_SPNRA01-EMTN-01/3/1|BS07E10127|214.67 Mbit/s|224 Mbit/s|1024 QAM,PTKLP12-EMTN-01/2+3/1_BRAMT02-EMTN-03/2+3/1|BS07E08637|150.04 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,CGPRT28-EMTN-01/2/1_CGPRT61-EMTN-01/6/1|CG23H30167|133.6 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,CMBRC04-EMTN-01/14/1_CMSDR42-EMTN-01/5/1|CM13E15890|212.62 Mbit/s|224 Mbit/s|1024 QAM,CPFDG04-EMTN-01/2/1_CPFDG01-EMTN-01/2/1|CM13E11564|160.29 Mbit/s|250 Mbit/s|256 QAM,SYFNC15-HRTN-03/3/1_SYFNC11-HRTN-01/3/1|SY13H14889|Hybrid(217Mbit/s)||,CMSDR11-HRTN-01/3/1_CMSDR06-HRTN-01/3/1|CM23H29237|Hybrid(242Mbit/s)||,BMSDR09-HRTN-01/1/1_BMNBG13-HRTN-01/1/1|CM13H30178|Hybrid(432Mbit/s)||,CXSDR96-HRTN-01/4/1_CXSDR91-HRTN-01/3/1||Hybrid(90Mbit/s)||,CGCND07-HRTN-01/3/1_CGPTA82-HRTN-02/2/1||Hybrid(90Mbit/s)||,SYSDR94-HRTN-02/6/1_SYDKS26-HRTN-01/6/1|SY07H20891|Hybrid(183Mbit/s)||,SNCTK24-HRTN-03/3/1_SNCTK02-HRTN-02/3/1|SY18H20876|Hybrid(183Mbit/s)||",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "71.0",
         xAxisData: "2021-01-12",
         date: null,
         categoryNames: "SES",
         dataType1:
            "BMAKH04-EMTN-01/6/1_BMKSB06-EMTN-01/3/1|CM15E11162|224.95 Mbit/s|224 Mbit/s|1024 QAM,NSPLS13-EMTN-02/2/1_NSPLS02-EMTN-03/2/1|DH15E020401|163.3 Mbit/s|224 Mbit/s|1024 QAM,CXMHK08-EMTN-01/18/1_CXMHK05-EMTN-01/5/1|CG18E24710|204.4 Mbit/s|224 Mbit/s|1024 QAM,BMSDR09-EMTN-01/4/1_BMSDR18-EMTN-01/2/1|CM18E15636|210.56 Mbit/s|224 Mbit/s|1024 QAM,NOSNM20-EMTN-01/6/1_NOSNM13-EMTN-01/4/1|CM13E15458|187.12 Mbit/s|203 Mbit/s|512 QAM,FNSDR03-EMTN-01/4+5/1_FNSDR35-EMTN-01/14+15/1|CM18E07499|181.79 Mbit/s|224 Mbit/s|1024 QAM,CPFDG17-EMTN-01/4+5/1_CPSDR19-EMTN-01/14+15/1|CM13E11257|206.45 Mbit/s|224 Mbit/s|1024 QAM,NOMJD23-EMTN-01/18/1_LXKMN12-EMTN-01/2/1|CM13E10981|183.01 Mbit/s|203 Mbit/s|512 QAM,NOSNM33-EMTN-01/4/1_NOCTK23-EMTN-01/3/1|CM13E24986|158.35 Mbit/s|203 Mbit/s|512 QAM,NOBGM07-EMTN-03/4/1_NOBGM02-EMTN-01/4/1|CM23E02214|134.53 Mbit/s|224 Mbit/s|1024 QAM,CGPTA03-EMTN-01/18/1_CGPTA18-EMTN-01/2/1|CG23E12216|367.7 Mbit/s|224 Mbit/s|1024 QAM,CPUMT11-EMTN-01/16/1_CPUMT34-EMTN-01/3/1|CM13E15941|214.67 Mbit/s|224 Mbit/s|1024 QAM,NKATP01-EMTN-02/2/1_NKATP02-EMTN-01/2/1|MY13E06532|195.34 Mbit/s|203 Mbit/s|512 QAM,CGBYZ17-EMTN-01/4/1_CGBYZ16-EMTN-01/6/1|CG18E16062|216.0 Mbit/s|203 Mbit/s|512 QAM,CGMIR05-EMTN-01/8/1_CGMIR52-EMTN-01/2/1|CG13E25455|359.48 Mbit/s|224 Mbit/s|1024 QAM,CMMDN25-EMTN-01/2+3/1_CMDBD11-EMTN-01/2+3/1|CM15E11827|210.56 Mbit/s|224 Mbit/s|1024 QAM,CMMDN22-EMTN-01/6+7/1_CMMDN05-EMTN-01/4+5/1|CM15E15683|206.45 Mbit/s|224 Mbit/s|1024 QAM,NSSDR14-EMTN-01/3/1_NSSDR03-EMTN-01/6/1|DH15E02360|220.84 Mbit/s|224 Mbit/s|1024 QAM,CXSDR08-EMTN-02/2/1_CXRMU06-EMTN-01/6/1|CG07E12199|445.78999999999996 Mbit/s|224 Mbit/s|1024 QAM,DHSVRH2-EMTN-01/3/1_DHSVRI6-EMTN-01/5/1|DH18E19488|135.66 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,GPKLG15-EMTN-01/4+5/1_GPKLG05-EMTN-01/2+3/1|DH15E17706|170.56 Mbit/s|201 Mbit/s|1024 QAM,CMSDR42-EMTN-01/5/1_CMBRC04-EMTN-01/14/1|CM13E15890|212.62 Mbit/s|224 Mbit/s|1024 QAM,CGSDP25-EMTN-01/8/1_CGSDP03-EMTN-02/14/1|CG18E12759|147.96 Mbit/s|201 Mbit/s|1024 QAM,RPSDR57-EMTN-01/4/1_RPSDR65-EMTN-01/2/1|RP13E24536|224.95 Mbit/s|224 Mbit/s|1024 QAM,NOCTK42-EMTN-01/8/1_NOCTK14-EMTN-01/4/1|CM23E20411|220.84 Mbit/s|224 Mbit/s|1024 QAM,SRSDR07-EMTN-01/2/1_JPISL14-EMTN-01/4/1|MY07E21837|222.89 Mbit/s|224 Mbit/s|1024 QAM,CGBYZ19-EMTN-01/3/1_CGBYZ25-EMTN-01/2/1|CG23E16066|202.34 Mbit/s|224 Mbit/s|1024 QAM,CMLXM32-EMTN-01/2/1_CMLXM10-EMTN-01/3/1|CM18E11956|224.95 Mbit/s|224 Mbit/s|1024 QAM,CMDBD04-EMTN-01/2+3/1_CMBRC26-EMTN-01/2+3/1|CM15E08516|206.45 Mbit/s|224 Mbit/s|1024 QAM,CMSDD33-EMTN-01/2/1_CMSDD01-EMTN-01/4/1|CM15E15648|208.51 Mbit/s|224 Mbit/s|1024 QAM,NOCTK28-EMTN-01/4/1_NOCTK16-EMTN-01/8/1|CM23E20406|183.01 Mbit/s|224 Mbit/s|1024 QAM,NSSDR07-EMTN-01/2+3/1_NSSDR06-EMTN-01/16+17/1||135.27 Mbit/s|224 Mbit/s|1024 QAM,CMMDN29-EMTN-01/2/1_CMMDN09-EMTN-01/3/1|CM18E09076|97.47 Mbit/s|97 Mbit/s|512 QAM,CPFDG09-EMTN-01/4/1_CPHMC01-EMTN-01/6/1|CM13E11549|142.75 Mbit/s|224 Mbit/s|1024 QAM,DHKHL74-EMTN-01/13/1_DHMJHB9-EMTN-01/2/1|DH26E19601|135.66 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,NOSNB08-EMTN-01/7/1_NOSNB26-EMTN-01/3/1|CM13E11135|212.62 Mbit/s|224 Mbit/s|1024 QAM,SPNRA01-EMTN-01/3/1_SPSDR02-EMTN-02/5/1|BS07E10127|214.67 Mbit/s|224 Mbit/s|1024 QAM,GPSDRB1-EMTN-01/6+7/1_GPSDR50-EMTN-01/2+3/1|DH18E14018|194.12 Mbit/s|224 Mbit/s|1024 QAM,CMBRC12-EMTN-01/4+5/1_CMBRC27-EMTN-01/4+5/1|CM18E05794|202.34 Mbit/s|224 Mbit/s|1024 QAM,CGMIR23-EMTN-01/5/1_CGMIR42-EMTN-01/2/1|CG13E16330|178.78 Mbit/s|201 Mbit/s|512 QAM,NSSDR15-EMTN-01/2+3/1_NGARH31-EMTN-01/2+3/1|DH15E17672|194.12 Mbit/s|224 Mbit/s|1024 QAM,NGSNG54-EMTN-01/4+5/1_NGSNG01-EMTN-01/6+7/1|DH15E10235|208.51 Mbit/s|224 Mbit/s|1024 QAM,CGPTA84-EMTN-01/5/1_CGPTA45-EMTN-01/6/1|CG18E25436|216.73 Mbit/s|224 Mbit/s|1024 QAM,CMMDN05-EMTN-01/2/1_CMMDN03-EMTN-01/2/1|CM13E10950|97.47 Mbit/s|97 Mbit/s|512 QAM,CPSRT08-EMTN-01/4+5/1_CMLXM06-EMTN-01/8+9/1|CM07E11692|224.95 Mbit/s|224 Mbit/s|1024 QAM,CGBYZ05-EMTN-02/2/1_CGBYZ49-EMTN-02/2/1|CG38E28905|156.18 Mbit/s|201 Mbit/s|1024 QAM,CPFDG27-EMTN-01/2/1_CPHMC01-EMTN-01/13/1|CM23E08367|143.85 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,TNMZP31-EMTN-01/2/1_TNDDR04-EMTN-01/2/1|MY13E15202|195.34 Mbit/s|203 Mbit/s|512 QAM,JHSDR06-EMTN-03/4/1_JHSDR12-EMTN-02/6/1||146.86 Mbit/s|224 Mbit/s|1024 QAM,CMDBD09-EMTN-01/3/1_CMDBD41-EMTN-01/6/1||220.84 Mbit/s|224 Mbit/s|1024 QAM,BMBNC30-EMTN-01/2/1_BMBNC12-EMTN-02/4/1|CM11E28843|89.25 Mbit/s|97 Mbit/s|512 QAM,RMBGC05-EMTN-01/2+3/1_RMBGC04-EMTN-01/14+15/1|CG11E25457|200.29 Mbit/s|224 Mbit/s|1024 QAM,NSSDR53-EMTN-01/15/1_NSSDR45-EMTN-01/6/1|DH11E27162|204.4 Mbit/s|224 Mbit/s|1024 QAM,CXSDR42-EMTN-01/6+7/1_CXSDR34-EMTN-02/6+7/1|CG23E12834|388.24 Mbit/s|224 Mbit/s|1024 QAM,TNKLH24-EMTN-01/3/1_TNBPR09-EMTN-01/2/1|MY15E27262|99.15 Mbit/s|107 Mbit/s|1024 QAM,CXSDR96-HRTN-01/4/1_CXSDR91-HRTN-01/3/1||Hybrid(90Mbit/s)||,CMSDR11-HRTN-01/3/1_CMSDR06-HRTN-01/3/1|CM23H29237|Hybrid(242Mbit/s)||,BMSDR09-HRTN-01/1/1_BMNBG13-HRTN-01/1/1|CM13H30178|Hybrid(432Mbit/s)||,CGCND07-HRTN-01/3/1_CGPTA82-HRTN-02/2/1||Hybrid(90Mbit/s)||,FPNGR10-HRTN-01/3/1_FPCBH01-HRTN-02/3/1|KU13H09648|Hybrid(183Mbit/s)||,JKSDR01-HRTN-02/3/1_JKSDR15-HRTN-01/5/1|BS26H25962|Hybrid(242Mbit/s)||,BMAKH13-HRTN-01/5/1_BMKSB23-HRTN-01/12/1|CM13H24607|Hybrid(158Mbit/s)||,CMSDR78-HRTN-01/4/1_CMSDR80-HRTN-01/3/1|CM23H24067|Hybrid(183Mbit/s)||,RSTNR02-HRTN-03/3/1_RSTNR08-HRTN-07/3/1|RS11H29946|Hybrid(454Mbit/s)||,CMHMN23-HRTN-01/4/1_CMHMN10-HRTN-01/3/1|CM18H22585|Hybrid(52Mbit/s)||,SNCTK24-HRTN-03/3/1_SNCTK02-HRTN-02/3/1|SY18H20876|Hybrid(183Mbit/s)||,CPKCH16-HRTN-01/7/1_CPKCH01-HRTN-02/7/1|CM15H29817|Hybrid(105Mbit/s)||,CGBSK33-HRTN-01/7/1_CGBSK32-HRTN-01/7/1|CG13H30218|Hybrid(432Mbit/s)||,GPSDR19-HRTN-01/7/1_GPSDRK6-HRTN-01/7/1|DH18H29360|Hybrid(219Mbit/s)||,HGCNR01-HRTN-02/2/1_HGCNR06-HRTN-02/4/1||Hybrid(217Mbit/s)||,SYFNC15-HRTN-03/3/1_SYFNC11-HRTN-01/3/1|SY13H14889|Hybrid(217Mbit/s)||",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "67.0",
         xAxisData: "2021-01-13",
         date: null,
         categoryNames: "SES",
         dataType1:
            "CXCKR08-EMTN-03/2/1_CXPKA05-EMTN-01/2/1|CG13E12993|187.96 Mbit/s|224 Mbit/s|1024 QAM,CGLHG09-EMTN-02/2/1_CGLHG01-EMTN-01/13/1|CG23E12306|218.78 Mbit/s|224 Mbit/s|1024 QAM,CXSDR12-EMTN-01/6/1_CXSDR88-EMTN-01/3/1|CG18E20476|200.02 Mbit/s|200 Mbit/s|512 QAM,CGCND02-EMTN-01/3/1_CGCND34-EMTN-01/14/1|CG23E00591|208.51 Mbit/s|224 Mbit/s|1024 QAM,CGFTK07-EMTN-01/18/1_CGFTK27-EMTN-01/2/1|CG18E25452|388.24 Mbit/s|224 Mbit/s|1024 QAM,CGSDP25-EMTN-01/8/1_CGSDP03-EMTN-02/14/1|CG18E12759|147.96 Mbit/s|201 Mbit/s|1024 QAM,JPISL14-EMTN-01/4/1_SRSDR07-EMTN-01/2/1|MY07E21837|222.89 Mbit/s|224 Mbit/s|1024 QAM,CXRMU06-EMTN-01/6/1_CXSDR08-EMTN-02/2/1|CG07E12199|220.84 Mbit/s|224 Mbit/s|1024 QAM,CPHMC01-EMTN-01/13/1_CPFDG27-EMTN-01/2/1|CM23E08367|143.85 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,NSSDR06-EMTN-01/16+17/1_NSSDR07-EMTN-01/2+3/1||200.29 Mbit/s|224 Mbit/s|1024 QAM,CPFDG01-EMTN-01/2/1_CPFDG04-EMTN-01/2/1|CM13E11564|263.26 Mbit/s|203 Mbit/s|512 QAM,NOBGM02-EMTN-01/4/1_NOBGM07-EMTN-03/4/1|CM23E02214|134.53 Mbit/s|224 Mbit/s|1024 QAM,CMBRC04-EMTN-01/8/1_CMSDR21-EMTN-01/2/1||141.79 Mbit/s|150 Mbit/s|1024 QAM,CMMDN29-EMTN-01/2/1_CMMDN09-EMTN-01/3/1|CM18E09076|97.47 Mbit/s|97 Mbit/s|512 QAM,CMBRC12-EMTN-01/4+5/1_CMBRC27-EMTN-01/4+5/1|CM18E05794|202.34 Mbit/s|224 Mbit/s|1024 QAM,CPUMT11-EMTN-01/16/1_CPUMT34-EMTN-01/3/1|CM13E15941|214.67 Mbit/s|224 Mbit/s|1024 QAM,RPSDR57-EMTN-01/4/1_RPSDR65-EMTN-01/2/1|RP13E24536|224.95 Mbit/s|224 Mbit/s|1024 QAM,CGPRT28-EMTN-01/2/1_CGPRT61-EMTN-01/6/1|CG23H30167|133.6 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,GPSDR50-EMTN-01/2+3/1_GPSDRB1-EMTN-01/6+7/1|DH18E14018|194.12 Mbit/s|224 Mbit/s|1024 QAM,NGSDRE8-EMTN-01/2+3/1_NGSDRG3-EMTN-01/4+5/1|DH18E19202|224.95 Mbit/s|224 Mbit/s|1024 QAM,SPSDR02-EMTN-02/5/1_SPNRA01-EMTN-01/3/1|BS07E10127|214.67 Mbit/s|224 Mbit/s|1024 QAM,LXSDR09-EMTN-01/8+9/1_NOMJD36-EMTN-01/2+3/1|CM18E15815|206.45 Mbit/s|224 Mbit/s|1024 QAM,TNDDR04-EMTN-01/2/1_TNMZP31-EMTN-01/2/1|MY13E15202|195.34 Mbit/s|203 Mbit/s|512 QAM,RMBGC04-EMTN-01/14+15/1_RMBGC05-EMTN-01/2+3/1|CG11E25457|412.90999999999997 Mbit/s|224 Mbit/s|1024 QAM,CGPTA03-EMTN-01/18/1_CGPTA18-EMTN-01/2/1|CG23E12216|183.85 Mbit/s|224 Mbit/s|1024 QAM,CMBRC04-EMTN-01/14/1_CMSDR42-EMTN-01/5/1|CM13E15890|212.62 Mbit/s|224 Mbit/s|1024 QAM,BMSDR09-EMTN-01/4/1_BMSDR18-EMTN-01/2/1|CM18E15636|210.56 Mbit/s|224 Mbit/s|1024 QAM,CPMTB01-EMTN-01/4/1_CPUMT07-EMTN-01/2/1|CM07E11817|277.41999999999996 Mbit/s|201 Mbit/s|1024 QAM,CXSDR14-EMTN-01/6/1_CXSDRC4-EMTN-01/2/1|CG18E28901|89.25 Mbit/s|97 Mbit/s|512 QAM,NSSDR53-EMTN-01/15/1_NSSDR45-EMTN-01/6/1|DH11E27162|204.4 Mbit/s|224 Mbit/s|1024 QAM,CGSKD04-EMTN-01/6+7/1_CGSKD30-EMTN-01/2+3/1|CG23E12115|198.23 Mbit/s|224 Mbit/s|1024 QAM,DHMJHB9-EMTN-01/2/1_DHKHL74-EMTN-01/13/1|DH26E19601|135.66 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,CMDBD11-EMTN-01/2+3/1_CMMDN25-EMTN-01/2+3/1|CM15E11827|210.56 Mbit/s|224 Mbit/s|1024 QAM,FNSDR35-EMTN-01/14+15/1_FNSDR03-EMTN-01/4+5/1|CM18E07499|181.79 Mbit/s|224 Mbit/s|1024 QAM,CMCND46-EMTN-01/2/1_CMCND10-EMTN-01/15/1|CM15E25564|90.42 Mbit/s|100 Mbit/s|1024 QAM,BMBNC12-EMTN-02/4/1_BMBNC30-EMTN-01/2/1|CM11E28843|89.25 Mbit/s|97 Mbit/s|512 QAM,CMSDD01-EMTN-01/4/1_CMSDD33-EMTN-01/2/1|CM15E15648|208.51 Mbit/s|224 Mbit/s|1024 QAM,CMBRC26-EMTN-01/2+3/1_CMDBD04-EMTN-01/2+3/1|CM15E08516|206.45 Mbit/s|224 Mbit/s|1024 QAM,CPSRT08-EMTN-01/4+5/1_CMLXM06-EMTN-01/8+9/1|CM07E11692|224.95 Mbit/s|224 Mbit/s|1024 QAM,CGBYZ16-EMTN-01/6/1_CGBYZ17-EMTN-01/4/1|CG18E16062|216.0 Mbit/s|203 Mbit/s|512 QAM,NOCTK42-EMTN-01/8/1_NOCTK14-EMTN-01/4/1|CM23E20411|220.84 Mbit/s|224 Mbit/s|1024 QAM,CXMHK08-EMTN-01/18/1_CXMHK05-EMTN-01/5/1|CG18E24710|204.4 Mbit/s|224 Mbit/s|1024 QAM,GPKLG05-EMTN-01/2+3/1_GPKLG15-EMTN-01/4+5/1|DH15E17706|170.56 Mbit/s|201 Mbit/s|1024 QAM,NOCTK28-EMTN-01/4/1_NOCTK16-EMTN-01/8/1|CM23E20406|183.01 Mbit/s|224 Mbit/s|1024 QAM,SGULP31-EMTN-01/5/1_SGSJP21-EMTN-01/3/1|RS15E21907|194.12 Mbit/s|224 Mbit/s|1024 QAM,CGBSK27-EMTN-01/2/1_CGBSK16-EMTN-01/6/1|CG15E12981|224.95 Mbit/s|224 Mbit/s|1024 QAM,NSSDR03-EMTN-01/6/1_NSSDR14-EMTN-01/3/1|DH15E02360|220.84 Mbit/s|224 Mbit/s|1024 QAM,TNBPR09-EMTN-01/2/1_TNKLH24-EMTN-01/3/1|MY15E27262|99.15 Mbit/s|107 Mbit/s|1024 QAM,SYSDR94-HRTN-02/6/1_SYDKS26-HRTN-01/6/1|SY07H20891|Hybrid(183Mbit/s)||,CMSDR78-HRTN-01/4/1_CMSDR80-HRTN-01/3/1|CM23H24067|Hybrid(183Mbit/s)||,RSTNR02-HRTN-03/3/1_RSTNR08-HRTN-07/3/1|RS11H29946|Hybrid(454Mbit/s)||,BMAKH13-HRTN-01/5/1_BMKSB23-HRTN-01/12/1|CM13H24607|Hybrid(158Mbit/s)||,CGBSK33-HRTN-01/7/1_CGBSK32-HRTN-01/7/1|CG13H30218|Hybrid(432Mbit/s)||,SNCTK24-HRTN-03/3/1_SNCTK02-HRTN-02/3/1|SY18H20876|Hybrid(183Mbit/s)||,SYFNC15-HRTN-03/3/1_SYFNC11-HRTN-01/3/1|SY13H14889|Hybrid(217Mbit/s)||,HGCNR01-HRTN-02/2/1_HGCNR06-HRTN-02/4/1||Hybrid(217Mbit/s)||,CGCND07-HRTN-01/3/1_CGPTA82-HRTN-02/2/1||Hybrid(90Mbit/s)||,CGSKD75-HRTN-01/6/1_CGSKD70-HRTN-01/3/1|CG15H24839|Hybrid(89Mbit/s)||,CMSDR11-HRTN-01/3/1_CMSDR06-HRTN-01/3/1|CM23H29237|Hybrid(242Mbit/s)||,BMSDR09-HRTN-01/1/1_BMNBG13-HRTN-01/1/1|CM13H30178|Hybrid(432Mbit/s)||,BHSDR07-HRTN-01/4/1_BHSDR29-HRTN-02/3/1|BS18H14550|Hybrid(228Mbit/s)||,FPNGR10-HRTN-01/3/1_FPCBH01-HRTN-02/3/1|KU13H09648|Hybrid(183Mbit/s)||,CPFDG09-EMTN-01/4/1_CPHMC01-EMTN-01/6/1|CM13E11549|367.7 Mbit/s|224 Mbit/s|1024 QAM,BMAKH04-EMTN-01/6/1_BMKSB06-EMTN-01/3/1|CM15E11162|224.95 Mbit/s|224 Mbit/s|1024 QAM,PTKLP12-EMTN-01/2+3/1_BRAMT02-EMTN-03/2+3/1|BS07E08637|150.04 Mbit/s|Adaptive Modulation not Supported|Adaptive Modulation not Supported,CGPTA84-EMTN-01/5/1_CGPTA45-EMTN-01/6/1|CG18E25436|216.73 Mbit/s|224 Mbit/s|1024 QAM,CMHMN23-HRTN-01/4/1_CMHMN10-HRTN-01/3/1|CM18H22585|Hybrid(52Mbit/s)||",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "20.0",
         xAxisData: "2021-01-09",
         date: null,
         categoryNames: "UAS",
         dataType1:
            "CGCDG92-EMTN-01/2/1_CGHTZ30-EMTN-01/14/1|CG15E13031|218.78 Mbit/s|224 Mbit/s|1024 QAM,NOSNB26-EMTN-01/3/1_NOSNB08-EMTN-01/7/1|CM13E11135|212.62 Mbit/s|224 Mbit/s|1024 QAM,BBRMA01-EMTN-01/4+5/1_BBRNC04-EMTN-01/16+17/1|CG07E12923|204.4 Mbit/s|224 Mbit/s|1024 QAM,CGPTA18-EMTN-01/2/1_CGPTA03-EMTN-01/18/1|CG23E12216|183.85 Mbit/s|224 Mbit/s|1024 QAM,CGFTK55-EMTN-01/3/1_CGFTK36-EMTN-01/5/1|CG13E16394|212.62 Mbit/s|224 Mbit/s|1024 QAM,CGLHG26-EMTN-01/17/1_CGLHG27-EMTN-01/5/1|CG15E13000|224.95 Mbit/s|224 Mbit/s|1024 QAM,DHSVR39-EMTN-01/2+3/1_DHSVR12-EMTN-01/4+5/1|DH18E01398|180.84 Mbit/s|201 Mbit/s|512 QAM,CGPCH12-EMTN-01/2+3/1_CGPCHA8-EMTN-01/2+3/1|CG23E12055|210.56 Mbit/s|224 Mbit/s|1024 QAM,JHSDR12-EMTN-02/6/1_JHSDR06-EMTN-03/4/1||146.86 Mbit/s|224 Mbit/s|1024 QAM,CGSDP08-EMTN-01/2+3/1_CGSDP03-EMTN-01/6+7/1|CG13E04316|224.95 Mbit/s|224 Mbit/s|1024 QAM,CMSDR21-EMTN-01/2/1_CMBRC04-EMTN-01/8/1||141.79 Mbit/s|150 Mbit/s|1024 QAM,GPSDRM5-EMTN-01/4/1_GPSDRK0-EMTN-01/2/1|DH18E19755|174.99 Mbit/s|183 Mbit/s|256 QAM,CXSDR34-EMTN-02/6+7/1_CXSDR42-EMTN-01/6+7/1|CG23E12834|355.36 Mbit/s|224 Mbit/s|1024 QAM,CMSDD16-HRTN-01/1/2_CMSDD01-HRTN-01/1/2|CM15H29801|Hybrid(432Mbit/s)||,HGBBL01-HRTN-02/5/1_HGBBL09-HRTN-02/3/1|SY15H20866|Hybrid(183Mbit/s)||,JSSDR04-HRTN-01/1/1_JSSDR08-HRTN-02/1/1|KH15H29656|Hybrid(242Mbit/s)||,CPHMC01-EMTN-01/6/1_CPFDG09-EMTN-01/4/1|CM13E11549|367.7 Mbit/s|224 Mbit/s|1024 QAM,CGBYZ49-EMTN-02/2/1_CGBYZ05-EMTN-02/2/1|CG38E28905|156.18 Mbit/s|201 Mbit/s|1024 QAM,CXPKA05-EMTN-01/2/1_CXCKR08-EMTN-03/2/1|CG13E12993|375.92 Mbit/s|224 Mbit/s|1024 QAM,HGSDR06-HRTN-03/4/1_HGCNR21-HRTN-02/10/1|SY06H25949|Hybrid(183Mbit/s)||",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "12.0",
         xAxisData: "2021-01-10",
         date: null,
         categoryNames: "UAS",
         dataType1:
            "CGPRT45-HRTN-01/3/1_CGPRT48-HRTN-01/3/1||Hybrid(90Mbit/s)||,JSSDR04-HRTN-01/1/1_JSSDR08-HRTN-02/1/1|KH15H29656|Hybrid(242Mbit/s)||,CGFTK55-EMTN-01/3/1_CGFTK36-EMTN-01/5/1|CG13E16394|212.62 Mbit/s|224 Mbit/s|1024 QAM,CGCDG92-EMTN-01/2/1_CGHTZ30-EMTN-01/14/1|CG15E13031|218.78 Mbit/s|224 Mbit/s|1024 QAM,NOSNB26-EMTN-01/3/1_NOSNB08-EMTN-01/7/1|CM13E11135|212.62 Mbit/s|224 Mbit/s|1024 QAM,CGLHG26-EMTN-01/17/1_CGLHG27-EMTN-01/5/1|CG15E13000|224.95 Mbit/s|224 Mbit/s|1024 QAM,HGSDR06-HRTN-03/4/1_HGCNR21-HRTN-02/10/1|SY06H25949|Hybrid(183Mbit/s)||,CXPKA05-EMTN-01/2/1_CXCKR08-EMTN-03/2/1|CG13E12993|375.92 Mbit/s|224 Mbit/s|1024 QAM,HGBBL01-HRTN-02/5/1_HGBBL09-HRTN-02/3/1|SY15H20866|Hybrid(183Mbit/s)||,GGMKS21-HRTN-01/3/1_GGMKS01-HRTN-02/3/1||Hybrid(86Mbit/s)||,FNDGN22-EMTN-01/3/1_FNDGN04-EMTN-01/3/1||179.74 Mbit/s|224 Mbit/s|1024 QAM,CGSDP08-EMTN-01/2+3/1_CGSDP03-EMTN-01/6+7/1|CG13E04316|224.95 Mbit/s|224 Mbit/s|1024 QAM",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "15.0",
         xAxisData: "2021-01-11",
         date: null,
         categoryNames: "UAS",
         dataType1:
            "GGMKS21-HRTN-01/3/1_GGMKS01-HRTN-02/3/1||Hybrid(86Mbit/s)||,BOSJP17-HRTN-01/7/1_BOSDR68-HRTN-01/7/2|RS18H30350|Hybrid(105Mbit/s)||,CGPRT45-HRTN-01/3/1_CGPRT48-HRTN-01/3/1||Hybrid(90Mbit/s)||,CGSDP08-EMTN-01/2+3/1_CGSDP03-EMTN-01/6+7/1|CG13E04316|224.95 Mbit/s|224 Mbit/s|1024 QAM,FNDGN22-EMTN-01/3/1_FNDGN04-EMTN-01/3/1||179.74 Mbit/s|224 Mbit/s|1024 QAM,CGBSK16-EMTN-01/4/1_CGBSK18-EMTN-01/2/1|CG13E12937|224.95 Mbit/s|224 Mbit/s|1024 QAM,HGSDR06-HRTN-03/4/1_HGCNR21-HRTN-02/10/1|SY06H25949|Hybrid(183Mbit/s)||,CGFTK55-EMTN-01/3/1_CGFTK36-EMTN-01/5/1|CG13E16394|212.62 Mbit/s|224 Mbit/s|1024 QAM,CPUMT06-EMTN-01/4/1_CPUMT11-EMTN-01/17/1|CM13E25023|158.35 Mbit/s|203 Mbit/s|512 QAM,CGLHG26-EMTN-01/17/1_CGLHG27-EMTN-01/5/1|CG15E13000|224.95 Mbit/s|224 Mbit/s|1024 QAM,CPHMC01-EMTN-01/6/1_CPFDG09-EMTN-01/4/1|CM13E11549|367.7 Mbit/s|224 Mbit/s|1024 QAM,CXPKA05-EMTN-01/2/1_CXCKR08-EMTN-03/2/1|CG13E12993|375.92 Mbit/s|224 Mbit/s|1024 QAM,CGPCH12-EMTN-01/2+3/1_CGPCHA8-EMTN-01/2+3/1|CG23E12055|210.56 Mbit/s|224 Mbit/s|1024 QAM,CGMIR52-EMTN-01/2/1_CGMIR05-EMTN-01/8/1|CG13E25455|179.74 Mbit/s|224 Mbit/s|1024 QAM,CGCDG92-EMTN-01/2/1_CGHTZ30-EMTN-01/14/1|CG15E13031|218.78 Mbit/s|224 Mbit/s|1024 QAM",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "14.0",
         xAxisData: "2021-01-12",
         date: null,
         categoryNames: "UAS",
         dataType1:
            "HGBBL01-HRTN-02/5/1_HGBBL09-HRTN-02/3/1|SY15H20866|Hybrid(183Mbit/s)||,GGMKS21-HRTN-01/3/1_GGMKS01-HRTN-02/3/1||Hybrid(86Mbit/s)||,CGPCH01-HRTN-01/3/1_CGPCH80-HRTN-01/4/1|CG38H22620|Hybrid(183Mbit/s)||,NOBGM75-HRTN-01/5/1_NOBGM95-HRTN-01/3/1|CM2328911|Hybrid(183Mbit/s)||,HGSDR06-HRTN-03/4/1_HGCNR21-HRTN-02/10/1|SY06H25949|Hybrid(183Mbit/s)||,CGFTK36-EMTN-01/5/1_CGFTK55-EMTN-01/3/1|CG13E16394|224.95 Mbit/s|224 Mbit/s|1024 QAM,JPMDG03-EMTN-01/4/1_JPMDG12-EMTN-01/3/1|MY13E20946|94.53 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,KCMTR03-EMTN-01/2+3/1_KCRMG03-EMTN-02/6+7/1|CG07E10355|51.49 Mbit/s|203 Mbit/s|512 QAM,CGLHG26-EMTN-01/17/1_CGLHG27-EMTN-01/5/1|CG15E13000|224.95 Mbit/s|224 Mbit/s|1024 QAM,CGBSK18-EMTN-01/2/1_CGBSK16-EMTN-01/4/1|CG13E12937|224.95 Mbit/s|224 Mbit/s|1024 QAM,CGBLK16-EMTN-01/4+5/1_CGBLK43-EMTN-01/4+5/1|CG23E12825|220.84 Mbit/s|224 Mbit/s|1024 QAM,CGSDP03-EMTN-02/2+3/1_CGSDP09-EMTN-01/14+15/1|CG13E08495|359.63 Mbit/s|201 Mbit/s|1024 QAM,FNDGN38-EMTN-01/3/1_FNDGN22-EMTN-01/3/1|CM18E09077|179.74 Mbit/s|224 Mbit/s|1024 QAM,CGSDP08-EMTN-01/2+3/1_CGSDP03-EMTN-01/6+7/1|CG13E04316|224.95 Mbit/s|224 Mbit/s|1024 QAM",
         dataFilter: null,
      },
      {
         componentId: null,
         status: 1,
         version: null,
         createdDate: null,
         createdBy: null,
         updatedDate: null,
         updatedBy: null,
         uniqueCode: null,
         operation: null,
         csrfNonce: null,
         vendorName: null,
         yAxisData: "15.0",
         xAxisData: "2021-01-13",
         date: null,
         categoryNames: "UAS",
         dataType1:
            "CGPCH01-HRTN-01/3/1_CGPCH80-HRTN-01/4/1|CG38H22620|Hybrid(183Mbit/s)||,HGSDR06-HRTN-03/4/1_HGCNR21-HRTN-02/10/1|SY06H25949|Hybrid(183Mbit/s)||,HGBBL01-HRTN-02/5/1_HGBBL09-HRTN-02/3/1|SY15H20866|Hybrid(183Mbit/s)||,CGBLK16-EMTN-01/4+5/1_CGBLK43-EMTN-01/4+5/1|CG23E12825|220.84 Mbit/s|224 Mbit/s|1024 QAM,CXSDR34-EMTN-02/6+7/1_CXSDR42-EMTN-01/6+7/1|CG23E12834|388.24 Mbit/s|224 Mbit/s|1024 QAM,CGSKN44-EMTN-01/4/1_CGSKN28-EMTN-01/4/1|CG18E16380|210.56 Mbit/s|224 Mbit/s|1024 QAM,JPMDG12-EMTN-01/3/1_JPMDG03-EMTN-01/4/1|MY13E20946|94.53 Mbit/s|Adaptive Modulation not Enabled|Adaptive Modulation not Enabled,CXRMU05-EMTN-01/5/1_CXRMU18-EMTN-01/2/1|CG15E12193|220.84 Mbit/s|224 Mbit/s|1024 QAM,CGFTK36-EMTN-01/5/1_CGFTK55-EMTN-01/3/1|CG13E16394|224.95 Mbit/s|224 Mbit/s|1024 QAM,CGPCHA8-EMTN-01/2+3/1_CGPCH12-EMTN-01/2+3/1|CG23E12055|210.56 Mbit/s|224 Mbit/s|1024 QAM,FNDGN22-EMTN-01/3/1_FNDGN38-EMTN-01/3/1|CM18E09077|179.74 Mbit/s|224 Mbit/s|1024 QAM,NOSNB26-EMTN-01/3/1_NOSNB08-EMTN-01/7/1|CM13E11135|212.62 Mbit/s|224 Mbit/s|1024 QAM,CMLXM10-EMTN-01/3/1_CMLXM32-EMTN-01/2/1|CM18E11956|224.95 Mbit/s|224 Mbit/s|1024 QAM,SPZNR04-EMTN-01/5/1_SPZNR13-EMTN-01/2/1|BS13E08585|214.67 Mbit/s|224 Mbit/s|1024 QAM,CGSDP03-EMTN-01/6+7/1_CGSDP08-EMTN-01/2+3/1|CG13E04316|224.95 Mbit/s|224 Mbit/s|1024 QAM",
         dataFilter: null,
      },
   ];

   gridOptions: GridOptions;
   mwqosdashboards: Mwqosdashboard[];
   mwqosdashboardList$;
   mwqosdashboard: Mwqosdashboard = {
      componentId: -1,
      uniqueCode: "",
      status: 0,
      version: 0,
      csrfNonce: "",
      operation: "",
      xAxisData: "",
      yAxisData: "",
      vendor: "",
      uploadedAttachment: "",
      uploadedAttachmentFileId: "",
      downloadAttachment: "",
      remarks: "",
   };
   defaultColDef;
   sideBar;
   fromDate: Date;
   toDate: Date;
   showSpinner = false;

   vendorWiseBarChartFilter: FormGroup;
   topNBarChartFilter: FormGroup;
   zoneWisePieChartFilter: FormGroup;
   trajectoryAnalysisFilter: FormGroup;
   singleZoneMultiCategoryPieChartFilter: FormGroup;

   Highcharts = Highcharts;
   /* chartOptionsForVendorWiseBarChart: {};
   chartOptionsForlossAndInterferanceBarChart: {};
   chartOptionsForTopNBarChart;
   chartOptionsForTrajectory: {};
   chartOptionsForCategoryWiseTrajectory: {};
   chartOptionsForZoneWisePieChart: {};
   chartOptionsForSingleZoneMultiCategoryPieChart: {}; */

   vendorNames: { componentId: number; vendorName: string }[];
   licenseNames: { componentId: number; licenseName: string }[];
   topNValues: { componentId: number; topNValue: string }[];
   daysInputTrends: { componentId: number; dayInputTrend: string }[];

   categoryList: any[];
   finalCategoryList: string;

   chartconfigurations: Mwqosdashboardconfiguration[];

   edotcoZones: Locationhierarchyoss[];
   commercialZones: Locationhierarchyoss[];
   finalDistricts: Locationhierarchyoss[];
   districts: Locationhierarchyoss[];
   finallocationhierarchyosss: Locationhierarchyoss[];
   locationhierarchyosss: Locationhierarchyoss[];
   finalUnions: Locationhierarchyoss[];
   unions: Locationhierarchyoss[];
   thanas: Locationhierarchyoss[];
   finalThanas: Locationhierarchyoss[];

   mwrVendorWiseBarChartList$;
   mwTopNList$;
   mwTrajectoryList;
   mwCategoryWisePieChart;
   mwZoneAlarmList;

   vendorWiseConfiguredData: Mwqosdashboardconfiguration;
   topNConfiguredData: Mwqosdashboardconfiguration;
   trajectoryData: Mwqosdashboardconfiguration;
   piechartData: Mwqosdashboardconfiguration;
   categoryWisePieConfiguredData: Mwqosdashboardconfiguration;

   showSpinnerForVendorWiseBarChart = false;
   showSpinnerForTopNBarChart = false;
   showSpinnerForTrajectory = false;
   showSpinnerForZoneWisePieChart = false;
   showSpinnerForCategoryWisePieChart = false;

   dropdownSettingsForVendorNames: IDropdownSettings;
   dropdownSettingsForSingleZone: IDropdownSettings;
   dropdownSettingsForSiteCode: IDropdownSettings;
   dropdownSettingsForCategory: IDropdownSettings;
   dropdownSettingsForCommercialZone: IDropdownSettings;
   dropdownSettingsForDistrict: IDropdownSettings;
   dropdownSettingsForThana: IDropdownSettings;
   dropdownSettingsForUnion: IDropdownSettings;
   dropdownSettingsForEdotcoZone: IDropdownSettings;
   dropdownSettingsForReason: IDropdownSettings;
   dropdownSettingsForDaysInput: IDropdownSettings;
   dropdownSettingsForDaysInputTrend: IDropdownSettings;
   dropdownSettingsForLicenseNames: IDropdownSettings;

   dropdownSettingsForSingleCategory: IDropdownSettings;
   dropdownSettingsForSingleZoneCommercialZone: IDropdownSettings;
   dropdownSettingsForSingleZoneDistrict: IDropdownSettings;
   dropdownSettingsForSingleZoneThana: IDropdownSettings;
   dropdownSettingsForSingleZoneUnion: IDropdownSettings;
   dropdownSettingsForSingleZoneEdotcoZone: IDropdownSettings;
   dropdownSettingsForSingleTopNValue: IDropdownSettings;

   vendorWiseBarChartDTO: VendorWiseBarChartDTO = {
      vendorName: [],
      categoryName: [],
      sitecode: [],
      zoneListCommercial: [],
      zoneListDistrict: [],
      zoneListThana: [],
      zoneListUnion: [],
      zoneListEdotcoZone: [],
      zoneType: "1",
      fromDate: null,
      toDate: null,
      trendDays: null,
      searchStatus: "",
      isDateRangeFixed: true,
      searchRangeDay: null,
      esValue: null,
      sesValue: null,
      uasValue: null,
   };

   topNBarChartDTO: TopNBarChartDTO = {
      vendorName: [],
      categoryName: [],
      sitecode: [],
      zoneListCommercial: [],
      zoneListDistrict: [],
      zoneListThana: [],
      zoneListUnion: [],
      zoneListEdotcoZone: [],
      zoneType: "1",
      fromDate: null,
      toDate: null,
      topNValue: null,
      trendDays: null,
      searchStatus: "",
      isDateRangeFixed: true,
      searchRangeDay: null,
      esValue: null,
      sesValue: null,
      uasValue: null,
   };

   trajectoryAnalysisDTO: TrajectoryAnalysisDTO = {
      vendorName: [],
      categoryName: [],
      sitecode: [],
      zoneListCommercial: [],
      zoneListDistrict: [],
      zoneListThana: [],
      zoneListUnion: [],
      zoneListEdotcoZone: [],
      zoneType: "1",
      dateSearchType: "",
      fromDate: null,
      toDate: null,
      daysInput: [],
      trendDays: null,
      searchStatus: "",
      isDateRangeFixed: true,
      searchRangeDay: null,
      esValue: null,
      sesValue: null,
      uasValue: null,
   };

   zonewisePiechartDTO: ZonewisePiechartDTO = {
      categoryName: [],
      vendorName: [],
      sitecode: [],
      zoneListCommercial: [],
      zoneListDistrict: [],
      zoneListThana: [],
      zoneListUnion: [],
      zoneListEdotcoZone: [],
      zoneType: "1",
      dateSearchType: "",
      fromDate: null,
      toDate: null,
      trendDays: null,
      searchStatus: "",
      isDateRangeFixed: true,
      searchRangeDay: null,
      esValue: null,
      sesValue: null,
      uasValue: null,
   };

   singleZoneMultiCategoryWisePiechartDTO: SingleZoneMultiCategoryPiechartDTO = {
      categoryName: [],
      vendorName: [],
      sitecode: [],
      zoneListCommercial: [],
      zoneListDistrict: [],
      zoneListThana: [],
      zoneListUnion: [],
      zoneListEdotcoZone: [],
      zoneType: "1",
      dateSearchType: "",
      fromDate: null,
      toDate: null,
      trendDays: null,
      searchStatus: "",
      isDateRangeFixed: true,
      searchRangeDay: null,
      esValue: null,
      sesValue: null,
      uasValue: null,
   };

   chart;
   updateFromInput = false;
   chartConstructor = "chart";
   chartCallback;

   chartOptionsForVendorWiseBarChart = {
      chart: {
         plotBackgroundColor: null,
         plotBorderWidth: null,
         plotShadow: false,
         backgroundColor: "#FFFFFF",
         type: "column",
         style: {
            fontFamily: "Arial, Helvetica, Clean, sans-serif",
         },
      },
      title: {
         text: "Vendor Wise Bar Graph",
      },
      subtitle: {
         text: "www.i2gether.com",
      },
      exporting: {
         enabled: true,
         sourceHeight: 1080,
         sourceWidth: 1920,
         chartOptions: {
            title: {
               style: {
                  color: "#920072",
               },
            },
            chart: {
               backgroundColor: "#FFFFFF",
            },
         },
      },
      credits: {
         enabled: false,
      },
      xAxis: {
         categories: [],
      },
      yAxis: {
         min: 0,
         title: {
            text: "Total Number",
         },
         stackLabels: {
            enabled: true,
            style: {
               fontWeight: "bold",
               color:
                  (Highcharts.defaultOptions.title.style &&
                     Highcharts.defaultOptions.title.style.color) ||
                  "gray",
            },
         },
      },
      tooltip: {
         headerFormat: "<b>{point.x}</b><br/>",
         pointFormat: "{series.name}: {point.y}<br/>Total: {point.stackTotal}",
      },
      labels: {
         style: {
            fontFamily: "Arial, Helvetica, Clean, sans-serif",
         },
      },
      plotOptions: {
         column: {
            stacking: "normal",
            dataLabels: {
               enabled: true,
            },
         },
      },
      series: [],
   };

   chartOptionsForTopNBarChart = {
      chart: {
         plotBackgroundColor: null,
         plotBorderWidth: null,
         plotShadow: false,
         backgroundColor: "#FFFFFF",
         type: "column",
         style: {
            fontFamily: "Arial, Helvetica, Clean, sans-serif",
         },
      },
      title: {
         text: " Top N Bar Graph",
      },
      subtitle: {
         text: "www.i2gether.com",
      },
      exporting: {
         enabled: true,
         sourceHeight: 1080,
         sourceWidth: 1920,
         chartOptions: {
            title: {
               style: {
                  color: "#920072",
               },
            },
            chart: {
               backgroundColor: "#FFFFFF",
            },
         },
      },
      credits: {
         enabled: false,
      },
      xAxis: {
         categories: [],
         crosshair: true,
         scrollbar: {
            enabled: true,
         },
      },
      yAxis: {
         min: 0,
         title: {
            text: "Total Number",
         },
         stackLabels: {
            enabled: true,
            style: {
               fontWeight: "bold",
               color:
                  (Highcharts.defaultOptions.title.style &&
                     Highcharts.defaultOptions.title.style.color) ||
                  "gray",
            },
         },
      },
      tooltip: {
         headerFormat: "<b>{point.x}</b><br/>",
         pointFormat:
            "<b>{series.name}: {point.y}</b> ({point.SystemLinkCode})<br/>Total: {point.stackTotal}",
      },
      labels: {
         style: {
            fontFamily: "Arial, Helvetica, Clean, sans-serif",
         },
      },
      plotOptions: {
         column: {
            stacking: "normal",
            dataLabels: {
               enabled: true,
            },
         },
      },
      series: [],
   };

   chartOptionsForTrajectory = {
      chart: {
         plotBackgroundColor: null,
         plotBorderWidth: null,
         plotShadow: false,
         backgroundColor: "#FFFFFF",
         type: "line",
         style: {
            fontFamily: "Arial, Helvetica, Clean, sans-serif",
         },
      },
      title: {
         text: "Trajectory Analysis",
      },
      subtitle: {
         text: "www.i2gether.com",
      },
      credits: {
         enabled: false,
      },
      exporting: {
         enabled: true,
         sourceHeight: 1080,
         sourceWidth: 1920,
         chartOptions: {
            title: {
               style: {
                  color: "#920072",
               },
            },
            chart: {
               backgroundColor: "#FFFFFF",
            },
         },
      },
      xAxis: {
         categories: [],
      },
      yAxis: {
         title: {
            text: "Total Count",
         },
      },
      labels: {
         style: {
            fontFamily: "Arial, Helvetica, Clean, sans-serif",
         },
      },
      plotOptions: {
         series: {
            dataLabels: {
               enabled: true,
            },
            label: {
               connectorAllowed: true,
            },
         },
      },
      series: [],
   };

   chartOptionsForZoneWisePieChart = {
      chart: {
         plotBackgroundColor: null,
         plotBorderWidth: null,
         plotShadow: false,
         backgroundColor: "#FFFFFF",
         type: "pie",
         style: {
            fontFamily: "Arial, Helvetica, Clean, sans-serif",
         },
      },
      title: {
         text: "Zone Wise Pie Chart",
      },
      subtitle: {
         text: "www.i2gether.com",
      },
      tooltip: {
         pointFormat:
            "{series.name}: <b>{point.percentage:.1f}% </b> || link cose: <b>{point.y} </b>",
      },
      accessibility: {
         point: {
            valueSuffix: "%",
         },
      },
      labels: {
         style: {
            fontFamily: "Arial, Helvetica, Clean, sans-serif",
         },
      },
      plotOptions: {
         pie: {
            allowPointSelect: true,
            cursor: "pointer",
            dataLabels: {
               enabled: true,
               format:
                  "<b>{point.name}</b>: {point.percentage:.1f} % || link code: <b> {point.y} </b>",
            },
            showInLegend: true,
         },
      },
      exporting: {
         enabled: true,
         sourceHeight: 1080,
         sourceWidth: 1920,
         chartOptions: {
            title: {
               style: {
                  color: "#920072",
               },
            },
            chart: {
               backgroundColor: "#FFFFFF",
            },
         },
      },
      credits: {
         enabled: false,
      },
      series: [],
   };

   chartOptionsForSingleZoneMultiCategoryPieChart = {
      chart: {
         plotBackgroundColor: null,
         plotBorderWidth: null,
         plotShadow: false,
         backgroundColor: "#FFFFFF",
         type: "pie",
         style: {
            fontFamily: "Arial, Helvetica, Clean, sans-serif",
         },
      },
      title: {
         text: " Category Wise Pie Chart",
      },
      subtitle: {
         text: "www.i2gether.com",
      },
      tooltip: {
         pointFormat:
            "{series.name}: <b>{point.percentage:.1f}% </b> || link code: <b>{point.y} </b>",
      },
      accessibility: {
         point: {
            valueSuffix: "%",
         },
      },
      labels: {
         style: {
            fontFamily: "Arial, Helvetica, Clean, sans-serif",
         },
      },
      plotOptions: {
         pie: {
            allowPointSelect: true,
            cursor: "pointer",
            dataLabels: {
               enabled: true,
               format:
                  "<b>{point.name}</b>: {point.percentage:.1f} % || link code: <b> {point.y} </b>",
            },
            showInLegend: true,
         },
      },
      exporting: {
         enabled: true,
         sourceHeight: 1080,
         sourceWidth: 1920,
         chartOptions: {
            title: {
               style: {
                  color: "#920072",
               },
            },
            chart: {
               backgroundColor: "#FFFFFF",
            },
         },
      },
      credits: {
         enabled: false,
      },
      series: [],
   };

   constructor(
      private router: Router,
      private mwqosdashboardService: MwqosdashboardService,
      private alertService: AlertService,
      private chartconfigurationService: MwqosdashboardconfigurationService,
      private locationhierarchyossService: LocationhierarchyossService,
      private validationMessage: ShowvalidationinfoService,
      private formBuilder: FormBuilder
   ) {
      this.defaultColDef = {
         flex: 1,
         resizable: true,
         floatingFilter: true,
         wrapText: true,
         autoHeight: true,
         sortable: true,
         minWidth: 200,
      };

      let from = "";
      let to = "";
      if (!(this.fromDate == undefined)) {
         from =
            this.fromDate.getFullYear() +
            "-" +
            (this.fromDate.getMonth() + 1) +
            "-" +
            this.fromDate.getDate() +
            "  00:00:00";
      }
      if (!(this.toDate == undefined)) {
         to =
            this.toDate.getFullYear() +
            "-" +
            (this.toDate.getMonth() + 1) +
            "-" +
            this.toDate.getDate() +
            " 23:59:59";
      }
      this.showSpinner = true;
      //this.mwqosdashboardList$ = this.mwqosdashboardService.getMwqosdashboardList();
      this.mwqosdashboardList$ = this.mwqosdashboardService.getMwqosdashboardsByUniqueCodeAndDate(
         this.mwqosdashboard.uniqueCode,
         from,
         to
      );

      this.sideBar = {
         toolPanels: ["columns", "filters"],
         defaultToolPanel: "",
      };

      this.chartconfigurationService
         .getMwqosdashboardconfigurationList()
         .subscribe((apiResponse) => {
            if (!apiResponse.success) {
               this.alertService.error(apiResponse.message);
               return;
            }
            this.loadChartconfigurationsIntoArray(apiResponse);
         });

      this.locationhierarchyossService
         .getLocationhierarchyossListEdotcoZone()
         .subscribe((apiResponse) => {
            this.loadEdotcoZoneIntoArray(apiResponse);
         });

      this.locationhierarchyossService
         .getLocationhierarchyossListCommercialZone()
         .subscribe((apiResponse) => {
            this.loadCommercialZoneIntoArray(apiResponse);
         });

      this.locationhierarchyossService
         .getLocationhierarchyossListDistrict()
         .subscribe((apiResponse) => {
            this.loadDistrictIntoArray(apiResponse);
         });

      //getting thana lists
      this.locationhierarchyossService
         .getLocationhierarchyossListThana()
         .subscribe((apiResponse) => {
            this.loadThanaIntoArray(apiResponse);
         });

      this.locationhierarchyossService
         .getLocationhierarchyossListUnion()
         .subscribe((apiResponse) => {
            this.loadUnionIntoArray(apiResponse);
         });

      /* this.mwqosdashboardService
         .getCategoryList()
         .subscribe((apiResponse) => {
            if (!apiResponse.success) {
               this.alertService.error(apiResponse.message);
               return;
            }
            this.loadCategoryList(apiResponse);
         }); */

      //getting the sitecodes
      this.locationhierarchyossService
         .getLocationhierarchyossListUniqueCodeOnly()
         .subscribe((apiResponse) => {
            this.loadLocationhierarchyosssIntoArray(apiResponse);
         });

      this.gridOptions = <GridOptions>{
         columnDefs: this.createColumnDefs(),
         enableFilter: true,
         pagination: true,
         paginationPageSize: 100,
         rowSelection: "multiple",
         onGridReady: () => {
            this.mwqosdashboardList$
               .pipe(
                  catchError((err) => {
                     this.alertService.error(err);
                     this.showSpinner = false;
                     return throwError(err);
                  })
               )
               .subscribe((apiResponse) => {
                  if (!apiResponse.success) {
                     this.alertService.error(apiResponse.message);
                     this.showSpinner = false;
                     return;
                  }
                  this.loadMwqosdashboardsIntoArray(apiResponse);
                  // the initial full set of data
                  // note that we don't need to un-subscribe here as it's a one off data load
                  if (this.gridOptions.api) {
                     // can be null when tabbing between the examples
                     this.gridOptions.api.setRowData(this.mwqosdashboards);
                  }
                  this.showSpinner = false;
               });
            this.gridOptions.api.sizeColumnsToFit();
         },
         onCellClicked: (event) => {
            if (event.column.getColId() === "editAction") {
               // do your stuff here
               var selectedRows = this.gridOptions.api.getSelectedRows();
               var selectedItemId = -1;
               selectedRows.forEach(function (selectedRow, index) {
                  selectedItemId = selectedRow.componentId;
               });
               router.navigate(["/mwqosdashboards/" + selectedItemId]);
            }
         },
         /*onSelectionChanged: () => {
				var selectedRows = this.gridOptions.api.getSelectedRows();
				var selectedItemId = -1;
				selectedRows.forEach( function(selectedRow, index) {
					selectedItemId = selectedRow.componentId;
				});
				router.navigate(['/mwqosdashboards/' + selectedItemId]);
			}*/
      };

      const self = this;

      // saving chart reference using chart callback
      this.chartCallback = (chart) => {
         self.chart = chart;
      };

      exporting(Highcharts);
      offline(Highcharts);
      HC_exportData(Highcharts);
   }

   ngOnInit() {
      this.defaultDateInitialization();
      this.showSpinner = false;

      this.toDate = new Date();
      this.fromDate = new Date();
      this.fromDate.setHours(0, 0, 0);
      this.toDate.setHours(23, 59, 59);

      this.vendorWiseBarChartFilter = this.formBuilder.group({
         vendorName: [],
         categoryName: [],
         zoneListCommercial: [],
         zoneListDistrict: [],
         zoneListThana: [],
         zoneListUnion: [],
         zoneListEdotcoZone: [],
         zoneType: [""],
         sitecode: [],
         fromDate: [null],
         toDate: [null],
         trendDays: [null],
         searchStatus: [""],
         searchRangeDay: [null],
         esValue: [null],
         sesValue: [null],
         uasValue: [null],
      });

      this.topNBarChartFilter = this.formBuilder.group({
         vendorName: [],
         categoryName: [],
         zoneListCommercial: [],
         zoneListDistrict: [],
         zoneListThana: [],
         zoneListUnion: [],
         zoneListEdotcoZone: [],
         zoneType: [""],
         sitecode: [],
         fromDate: [null],
         toDate: [null],
         topNValue: [null],
         trendDays: [null],
         searchStatus: [""],
         searchRangeDay: [null],
         esValue: [null],
         sesValue: [null],
         uasValue: [null],
      });

      this.trajectoryAnalysisFilter = this.formBuilder.group({
         vendorName: [],
         categoryName: [],
         sitecode: [],
         zoneListCommercial: [],
         zoneListDistrict: [],
         zoneListThana: [],
         zoneListUnion: [],
         zoneListEdotcoZone: [],
         zoneType: [""],
         dateSearchType: [""],
         fromDate: [null],
         toDate: [null],
         topNValue: [],
         trendDays: [null],
         searchStatus: [""],
         searchRangeDay: [null],
         esValue: [null],
         sesValue: [null],
         uasValue: [null],
      });

      this.zoneWisePieChartFilter = this.formBuilder.group({
         categoryName: [],
         vendorName: [],
         sitecode: [],
         zoneListCommercial: [],
         zoneListDistrict: [],
         zoneListThana: [],
         zoneListUnion: [],
         zoneListEdotcoZone: [],
         zoneType: [""],
         dateSearchType: [""],
         fromDate: null,
         toDate: null,
         trendDays: [null],
         searchStatus: [""],
         searchRangeDay: [null],
         esValue: [null],
         sesValue: [null],
         uasValue: [null],
      });

      this.singleZoneMultiCategoryPieChartFilter = this.formBuilder.group({
         categoryName: [],
         vendorName: [],
         sitecode: [],
         zoneListCommercial: [],
         zoneListDistrict: [],
         zoneListThana: [],
         zoneListUnion: [],
         zoneListEdotcoZone: [],
         zoneType: [""],
         dateSearchType: [""],
         fromDate: null,
         toDate: null,
         trendDays: [null],
         searchStatus: [""],
         searchRangeDay: [null],
         esValue: [null],
         sesValue: [null],
         uasValue: [null],
      });

      setTimeout(() => {
         window.dispatchEvent(new Event("resize"));
      }, 300);

      this.dropdownInit();
      this.dropdownInitForSingleZone();
   }

   /* common for all dashboard */

   returnIndexNumber(param_string, param_list) {
      return param_list.indexOf(param_string);
   }

   defaultDateInitialization() {
      this.vendorWiseBarChartDTO.fromDate = new Date();
      this.vendorWiseBarChartDTO.toDate = new Date();
      this.vendorWiseBarChartDTO.fromDate.setHours(0, 0, 0);
      this.vendorWiseBarChartDTO.toDate.setHours(23, 59, 59);

      this.topNBarChartDTO.fromDate = new Date();
      this.topNBarChartDTO.toDate = new Date();
      this.topNBarChartDTO.fromDate.setHours(0, 0, 0);
      this.topNBarChartDTO.toDate.setHours(23, 59, 59);

      this.zonewisePiechartDTO.fromDate = new Date();
      this.zonewisePiechartDTO.toDate = new Date();
      this.zonewisePiechartDTO.fromDate.setHours(0, 0, 0);
      this.zonewisePiechartDTO.toDate.setHours(23, 59, 59);

      this.singleZoneMultiCategoryWisePiechartDTO.fromDate = new Date();
      this.singleZoneMultiCategoryWisePiechartDTO.toDate = new Date();
      this.singleZoneMultiCategoryWisePiechartDTO.fromDate.setHours(0, 0, 0);
      this.singleZoneMultiCategoryWisePiechartDTO.toDate.setHours(23, 59, 59);

      this.trajectoryAnalysisDTO.fromDate = new Date();
      this.trajectoryAnalysisDTO.toDate = new Date();
      this.trajectoryAnalysisDTO.fromDate.setHours(0, 0, 0);
      this.trajectoryAnalysisDTO.toDate.setHours(23, 59, 59);
   }
   dropdownInit() {
      this.vendorNames = [
         { componentId: 1, vendorName: "Huawei" },
         { componentId: 2, vendorName: "Ericsson" },
         { componentId: 3, vendorName: "Nec" },
      ];

      this.licenseNames = [
         { componentId: 1, licenseName: "License1" },
         { componentId: 2, licenseName: "License2" },
      ];

      this.categoryList = [
         { componentId: 1, categoryName: "ES" },
         { componentId: 2, categoryName: "SES" },
         { componentId: 3, categoryName: "UAS" },
      ];

      /*       this.topNValues = [
	   { componentId: 1, topNValue: "1" },
	   { componentId: 2, topNValue: "2" },
	   { componentId: 3, topNValue: "3" },
	   { componentId: 4, topNValue: "4" },
	   { componentId: 5, topNValue: "5" },
	   { componentId: 6, topNValue: "6" },
	   { componentId: 7, topNValue: "7" },
	   { componentId: 8, topNValue: "8" },
	   { componentId: 9, topNValue: "9" },
	   { componentId: 10, topNValue: "10" },
	]; */

      /*       this.daysInputTrends = [
	   { componentId: 1, dayInputTrend: "1" },
	   { componentId: 2, dayInputTrend: "2" },
	   { componentId: 3, dayInputTrend: "3" },
	   { componentId: 4, dayInputTrend: "4" },
	   { componentId: 5, dayInputTrend: "5" },
	   { componentId: 6, dayInputTrend: "6" },
	   { componentId: 7, dayInputTrend: "7" },
	]; */

      this.dropdownSettingsForCategory = {
         singleSelection: false,
         idField: "categoryName",
         textField: "categoryName",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };

      this.dropdownSettingsForVendorNames = {
         singleSelection: false,
         idField: "vendorName",
         textField: "vendorName",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };

      this.dropdownSettingsForLicenseNames = {
         singleSelection: false,
         idField: "licenseName",
         textField: "licenseName",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };

      this.dropdownSettingsForReason = {
         singleSelection: false,
         idField: "reasonName",
         textField: "reasonName",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };

      this.dropdownSettingsForDaysInput = {
         singleSelection: true,
         idField: "dayNumber",
         textField: "dayNumber",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };

      this.dropdownSettingsForDaysInputTrend = {
         singleSelection: true,
         idField: "dayInputTrend",
         textField: "dayInputTrend",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };

      this.dropdownSettingsForSiteCode = {
         singleSelection: false,
         idField: "siteCode",
         textField: "siteCode",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };
      this.dropdownSettingsForCommercialZone = {
         singleSelection: false,
         idField: "commercialZone",
         textField: "commercialZone",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };
      this.dropdownSettingsForDistrict = {
         singleSelection: false,
         idField: "district",
         textField: "district",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };
      this.dropdownSettingsForThana = {
         singleSelection: false,
         idField: "thana",
         textField: "thana",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };
      this.dropdownSettingsForUnion = {
         singleSelection: false,
         idField: "unionName",
         textField: "unionName",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };
      this.dropdownSettingsForEdotcoZone = {
         singleSelection: false,
         idField: "pmfZone",
         textField: "pmfZone",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };
   }
   dropdownInitForSingleZone() {
      this.dropdownSettingsForSingleCategory = {
         singleSelection: true,
         idField: "categoryName",
         textField: "categoryName",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };

      this.dropdownSettingsForSingleTopNValue = {
         singleSelection: true,
         idField: "topNValue",
         textField: "topNValue",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };

      this.dropdownSettingsForSingleZoneCommercialZone = {
         singleSelection: true,
         idField: "commercialZone",
         textField: "commercialZone",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };
      this.dropdownSettingsForSingleZoneDistrict = {
         singleSelection: true,
         idField: "district",
         textField: "district",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };
      this.dropdownSettingsForSingleZoneThana = {
         singleSelection: true,
         idField: "thana",
         textField: "thana",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };
      this.dropdownSettingsForSingleZoneUnion = {
         singleSelection: true,
         idField: "unionName",
         textField: "unionName",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };
      this.dropdownSettingsForSingleZoneEdotcoZone = {
         singleSelection: true,
         idField: "pmfZone",
         textField: "pmfZone",
         selectAllText: "Select All",
         unSelectAllText: "UnSelect All",
         itemsShowLimit: 1,
         allowSearchFilter: true,
      };
   }

   onFilterChange(text: string): void {
      const filteredOptions = this.finallocationhierarchyosss.filter((option) =>
         option.siteCode.toLowerCase().includes(text.toLowerCase())
      );

      // I use this.largeDataset as a fallback if no matches are found
      const optionsToShow = filteredOptions.length
         ? filteredOptions
         : this.finallocationhierarchyosss;

      this.locationhierarchyosss = optionsToShow.slice(0, 10);
   }

   onFilterChangeForDistrict(text: string): void {
      const filteredOptions = this.finalDistricts.filter((option) =>
         option.district.toLowerCase().includes(text.toLowerCase())
      );

      // I use this.largeDataset as a fallback if no matches are found
      const optionsToShow = filteredOptions.length
         ? filteredOptions
         : this.finalDistricts;

      this.districts = optionsToShow.slice(0, 10);
   }

   onFilterChangeForUnions(text: string): void {
      const filteredOptions = this.finalUnions.filter((option) =>
         option.unionName.toLowerCase().includes(text.toLowerCase())
      );

      // I use this.largeDataset as a fallback if no matches are found
      const optionsToShow = filteredOptions.length
         ? filteredOptions
         : this.finalUnions;

      this.unions = optionsToShow.slice(0, 10);
   }

   onFilterChangeForThanas(text: string): void {
      const filteredOptions = this.finalThanas.filter((option) =>
         option.thana.toLowerCase().includes(text.toLowerCase())
      );

      // I use this.largeDataset as a fallback if no matches are found
      const optionsToShow = filteredOptions.length
         ? filteredOptions
         : this.finalThanas;

      this.thanas = optionsToShow.slice(0, 10);
   }
   /* 
 private loadCategoryList(apiResponse) {
	if (!apiResponse.success) {
	   return;
	}
	this.categoryList = apiResponse.data.map((obj) => {
	   var rObj = {
		  categoryName: obj.uniqueCode,
	   };
	   return rObj;
	});
 } */

   private loadEdotcoZoneIntoArray(apiResponse) {
      if (!apiResponse.success) {
         return;
      }

      this.edotcoZones = apiResponse.data.map((obj) => {
         var rObj = <Locationhierarchyoss>{
            componentId: null,
            pmfZone: obj,
         };
         return rObj;
      });
      // this.finalEdotcoZones = this.edotcoZones;
      // this.initializeDataForEdotcoZone();
   }

   private loadDistrictIntoArray(apiResponse) {
      if (!apiResponse.success) {
         return;
      }

      this.districts = apiResponse.data.map((obj) => {
         var rObj = <Locationhierarchyoss>{
            componentId: null,
            district: obj,
         };

         return rObj;
      });

      this.finalDistricts = this.districts;
      this.initializeDataForDistricts();
   }

   initializeDataForDistricts(): void {
      this.districts = this.finalDistricts.slice(0, 10);
   }

   private loadThanaIntoArray(apiResponse) {
      if (!apiResponse.success) {
         return;
      }

      this.thanas = apiResponse.data.map((obj) => {
         var rObj = <Locationhierarchyoss>{
            componentId: null,
            thana: obj,
         };
         return rObj;
      });
      this.finalThanas = this.thanas;
      this.initializeDataForThana();
   }

   initializeDataForThana(): void {
      this.thanas = this.finalThanas.slice(0, 10);
   }

   private loadUnionIntoArray(apiResponse) {
      if (!apiResponse.success) {
         return;
      }

      this.unions = apiResponse.data.map((obj) => {
         var rObj = <Locationhierarchyoss>{
            unionName: obj,
         };
         return rObj;
      });

      this.finalUnions = this.unions;
      this.initializeDataForUnion();
   }

   initializeDataForUnion(): void {
      this.unions = this.finalUnions.slice(0, 10);
   }

   private loadLocationhierarchyosssIntoArray(apiResponse) {
      if (!apiResponse.success) {
         return;
      }
      // console.log(apiResponse.data)

      this.locationhierarchyosss = apiResponse.data.map((obj) => {
         var rObj = <Locationhierarchyoss>{
            componentId: obj[0],
            siteCode: obj[1],
         };
         return rObj;
      });
      this.finallocationhierarchyosss = this.locationhierarchyosss;
      this.initializeData();
   }

   private initializeData(): void {
      this.locationhierarchyosss = this.finallocationhierarchyosss.slice(0, 10);
   }

   private loadCommercialZoneIntoArray(apiResponse) {
      if (!apiResponse.success) {
         return;
      }

      this.commercialZones = apiResponse.data.map((obj1) => {
         var rObj1 = <Locationhierarchyoss>{
            componentId: null,
            commercialZone: obj1,
         };

         return rObj1;
      });

      // this.finalCommercialZones = this.commercialZones;
      // this.initializeDataForCommercialZone();
   }

   private async loadChartconfigurationsIntoArray(apiResponse) {
      if (!apiResponse.success) {
         return;
      }

      this.chartconfigurations = await apiResponse.data.map((obj) => {
         var rObj = <Mwqosdashboardconfiguration>{
            componentId: obj.componentId,
            status: obj.status,
            version: obj.version,
            uniqueCode: obj.uniqueCode,
            chartName: obj.chartName,
            vendorName: obj.vendorName,
            zoneType: obj.zoneType,
            zoneNameList: obj.zoneNameList,
            siteCode: obj.siteCode,
            category: obj.category,
            dateSearchType: obj.dateSearchType,
            trendDays: obj.trendDays,
            qosTime: obj.qosTime,
            qosType: obj.qosType,
            fromDate: obj.fromDate,
            toDate: obj.toDate,
            uploadedAttachment: obj.uploadedAttachment,
            uploadedAttachmentFileId: obj.uploadedAttachmentFileId,
            downloadAttachment: obj.downloadAttachment,
            remarks: obj.remarks,
            searchRangeDay: obj.searchRangeDay,
            isDateRangeFixed: obj.isDateRangeFixed,
            esValue: obj.esValue,
            sesValue: obj.sesValue,
            uasValue: obj.uasValue,
            topNValue: obj.topNValue,
         };
         return rObj;
      });

      this.getIndividualChartConfigurationData();
   }

   getIndividualChartConfigurationData() {
      /* console.log(
         "******************** this.chartconfigurations **********************"
      );
      console.log(this.chartconfigurations);
      console.log(
         "********************************************************************"
      ); */

      this.vendorWiseConfiguredData = this.chartconfigurations.find(
         (element) => element.uniqueCode == "1"
      );

      this.topNConfiguredData = this.chartconfigurations.find(
         (element) => element.uniqueCode == "2"
      );

      this.trajectoryData = this.chartconfigurations.find(
         (element) => element.uniqueCode == "3"
      );

      this.piechartData = this.chartconfigurations.find(
         (element) => element.uniqueCode == "4"
      );

      this.categoryWisePieConfiguredData = this.chartconfigurations.find(
         (element) => element.uniqueCode == "5"
      );

      this.initialLoadingVendorWiseBarChart();
      this.initialLoadingTopNBarChart();
      this.initialLoadingTrajectoryChart();
      this.initialLoadingPieChart();
      this.initialLoadingForCategoryWisePieChart();

      this.assignDbDataIntoFormVendorWiseBarChart();
      this.assignDbDataIntoFormTopNBarChart();
      this.assignDbDataIntoFormTrajectoryTrend();
      this.assignDbDataIntoFormZoneWisePieChart();
      this.assignDbDataIntoFormCategoryWisePieChart();
   }

   initialLoadingVendorWiseBarChart() {
      if (this.vendorWiseConfiguredData != undefined) {
         let from = "";
         let to = "";
         if (
            this.vendorWiseConfiguredData.fromDate == null ||
            this.vendorWiseConfiguredData.fromDate == undefined
         ) {
            let dateSubValue = new Date();
            dateSubValue.setHours(0, 0, 0);

            if (
               this.vendorWiseConfiguredData.searchRangeDay != null &&
               this.vendorWiseConfiguredData.searchRangeDay > 0
            ) {
               /* let dateSubValue = new Date(); */
               dateSubValue.setDate(
                  dateSubValue.getDate() -
                     this.vendorWiseConfiguredData.searchRangeDay
               );
               from =
                  dateSubValue.getFullYear() +
                  "-" +
                  (dateSubValue.getMonth() + 1) +
                  "-" +
                  dateSubValue.getDate() +
                  " 00:00:00";

               /*   console.log("************* from date ***********");
			 console.log(from);
			 console.log(
				"************* this.vendorWiseConfiguredData.searchRangeDay ***********"
			 ); */
            } else {
               from =
                  dateSubValue.getFullYear() +
                  "-" +
                  (dateSubValue.getMonth() + 1) +
                  "-" +
                  dateSubValue.getDate() +
                  " 00:00:00";
            }
         } else {
            from =
               new Date(this.vendorWiseConfiguredData.fromDate).getFullYear() +
               "-" +
               (new Date(this.vendorWiseConfiguredData.fromDate).getMonth() +
                  1) +
               "-" +
               new Date(this.vendorWiseConfiguredData.fromDate).getDate() +
               "  00:00:00";
         }
         if (
            this.vendorWiseConfiguredData.toDate == null ||
            this.vendorWiseConfiguredData.toDate == undefined
         ) {
            this.vendorWiseConfiguredData.toDate = new Date();
            this.vendorWiseConfiguredData.toDate.setHours(0, 0, 0);

            to =
               this.vendorWiseConfiguredData.toDate.getFullYear() +
               "-" +
               (this.vendorWiseConfiguredData.toDate.getMonth() + 1) +
               "-" +
               this.vendorWiseConfiguredData.toDate.getDate() +
               " 23:59:59";
         } else {
            to =
               new Date(this.vendorWiseConfiguredData.toDate).getFullYear() +
               "-" +
               (new Date(this.vendorWiseConfiguredData.toDate).getMonth() + 1) +
               "-" +
               new Date(this.vendorWiseConfiguredData.toDate).getDate() +
               " 23:59:59";
         }

         // this.showSpinner = true;
         this.showSpinnerForVendorWiseBarChart = true;

         this.mwrVendorWiseBarChartList$ = this.mwqosdashboardService.getdashboardsBarChartByUniqueCodeAndDateCustom(
            this.mwqosdashboard.uniqueCode,
            from,
            to,
            this.vendorWiseConfiguredData.zoneType,
            this.vendorWiseConfiguredData.zoneNameList,
            this.vendorWiseConfiguredData.siteCode,
            this.vendorWiseConfiguredData.category,
            this.vendorWiseConfiguredData.vendorName,
            this.vendorWiseConfiguredData.trendDays,
            this.vendorWiseConfiguredData.esValue,
            this.vendorWiseConfiguredData.sesValue,
            this.vendorWiseConfiguredData.uasValue
         );

         this.mwrVendorWiseBarChartList$.subscribe((apiResponse) => {
            if (!apiResponse.success) {
               this.showSpinnerForVendorWiseBarChart = false;
               this.alertService.error(apiResponse.message);
               return;
            } else {
               this.showSpinnerForVendorWiseBarChart = false;
               this.generateBarDiagramForVendorWise(
                  apiResponse.data,
                  this.vendorWiseConfiguredData.vendorName,
                  this.vendorWiseConfiguredData.category
               );
            }
            this.showSpinner = false;
         });
      } else {
         return;
      }
   }

   initialLoadingTopNBarChart() {
      if (this.topNConfiguredData != undefined) {
         let from = "";
         let to = "";
         if (
            this.topNConfiguredData.fromDate == null ||
            this.topNConfiguredData.fromDate == undefined
         ) {
            let dateSubValue = new Date();
            dateSubValue.setHours(0, 0, 0);

            if (
               this.topNConfiguredData.searchRangeDay != null &&
               this.topNConfiguredData.searchRangeDay > 0
            ) {
               /* let dateSubValue = new Date(); */
               dateSubValue.setDate(
                  dateSubValue.getDate() -
                     this.topNConfiguredData.searchRangeDay
               );
               from =
                  dateSubValue.getFullYear() +
                  "-" +
                  (dateSubValue.getMonth() + 1) +
                  "-" +
                  dateSubValue.getDate() +
                  " 00:00:00";

               /*   console.log("************* from date ***********");
			 console.log(from);
			 console.log(
				"************* this.vendorWiseConfiguredData.searchRangeDay ***********"
			 ); */
            } else {
               from =
                  dateSubValue.getFullYear() +
                  "-" +
                  (dateSubValue.getMonth() + 1) +
                  "-" +
                  dateSubValue.getDate() +
                  " 00:00:00";
            }
         } else {
            from =
               new Date(this.topNConfiguredData.fromDate).getFullYear() +
               "-" +
               (new Date(this.topNConfiguredData.fromDate).getMonth() + 1) +
               "-" +
               new Date(this.topNConfiguredData.fromDate).getDate() +
               "  00:00:00";
         }
         if (
            this.topNConfiguredData.toDate == null ||
            this.topNConfiguredData.toDate == undefined
         ) {
            this.topNConfiguredData.toDate = new Date();
            this.topNConfiguredData.toDate.setHours(0, 0, 0);

            to =
               this.topNConfiguredData.toDate.getFullYear() +
               "-" +
               (this.topNConfiguredData.toDate.getMonth() + 1) +
               "-" +
               this.topNConfiguredData.toDate.getDate() +
               " 23:59:59";
         } else {
            to =
               new Date(this.topNConfiguredData.toDate).getFullYear() +
               "-" +
               (new Date(this.topNConfiguredData.toDate).getMonth() + 1) +
               "-" +
               new Date(this.topNConfiguredData.toDate).getDate() +
               " 23:59:59";
         }

         this.showSpinnerForTopNBarChart = true;
         // let topNValueList = this.topNConfiguredData.topNValue;

         this.mwTopNList$ = this.mwqosdashboardService.getMwTopNBarChart(
            this.mwqosdashboard.uniqueCode,
            from,
            to,
            this.topNConfiguredData.zoneType,
            this.topNConfiguredData.zoneNameList,
            this.topNConfiguredData.siteCode,
            this.topNConfiguredData.category,
            this.topNConfiguredData.vendorName,
            this.topNConfiguredData.topNValue,
            this.topNConfiguredData.esValue,
            this.topNConfiguredData.sesValue,
            this.topNConfiguredData.uasValue,
            this.topNConfiguredData.trendDays
         );

         this.mwTopNList$.subscribe((apiResponse) => {
            if (!apiResponse.success) {
               this.showSpinnerForTopNBarChart = false;
               this.alertService.error(apiResponse.message);
               return;
            } else {
               this.showSpinnerForTopNBarChart = false;
               this.generateTopNBarChart(
                  apiResponse.data,
                  this.topNConfiguredData.vendorName,
                  this.topNConfiguredData.category
               );
            }
            this.showSpinner = false;
         });
      } else {
         return;
      }
   }

   initialLoadingTrajectoryChart() {
      if (this.trajectoryData != undefined) {
         let from = "";
         let to = "";
         if (
            this.trajectoryData.fromDate == null ||
            this.trajectoryData.fromDate == undefined
         ) {
            let dateSubValue = new Date();
            dateSubValue.setHours(0, 0, 0);

            if (
               this.trajectoryData.searchRangeDay != null &&
               this.trajectoryData.searchRangeDay > 0
            ) {
               /* let dateSubValue = new Date(); */
               dateSubValue.setDate(
                  dateSubValue.getDate() - this.trajectoryData.searchRangeDay
               );
               from =
                  dateSubValue.getFullYear() +
                  "-" +
                  (dateSubValue.getMonth() + 1) +
                  "-" +
                  dateSubValue.getDate() +
                  " 00:00:00";

               /*   console.log("************* from date ***********");
			 console.log(from);
			 console.log(
				"************* this.vendorWiseConfiguredData.searchRangeDay ***********"
			 ); */
            } else {
               from =
                  dateSubValue.getFullYear() +
                  "-" +
                  (dateSubValue.getMonth() + 1) +
                  "-" +
                  dateSubValue.getDate() +
                  " 00:00:00";
            }
         } else {
            from =
               new Date(this.trajectoryData.fromDate).getFullYear() +
               "-" +
               (new Date(this.trajectoryData.fromDate).getMonth() + 1) +
               "-" +
               new Date(this.trajectoryData.fromDate).getDate() +
               "  00:00:00";
         }
         if (
            this.trajectoryData.toDate == null ||
            this.trajectoryData.toDate == undefined
         ) {
            this.trajectoryData.toDate = new Date();
            this.trajectoryData.toDate.setHours(0, 0, 0);

            to =
               this.trajectoryData.toDate.getFullYear() +
               "-" +
               (this.trajectoryData.toDate.getMonth() + 1) +
               "-" +
               this.trajectoryData.toDate.getDate() +
               " 23:59:59";
         } else {
            to =
               new Date(this.trajectoryData.toDate).getFullYear() +
               "-" +
               (new Date(this.trajectoryData.toDate).getMonth() + 1) +
               "-" +
               new Date(this.trajectoryData.toDate).getDate() +
               " 23:59:59";
         }

         this.showSpinnerForTrajectory = true;

         this.mwTrajectoryList = this.mwqosdashboardService.getTrajectoryAnalysis(
            this.mwqosdashboard.uniqueCode,
            from,
            to,
            this.trajectoryData.zoneType,
            this.trajectoryData.zoneNameList,
            this.trajectoryData.siteCode,
            this.trajectoryData.category,
            this.trajectoryData.vendorName,
            this.trajectoryData.dateSearchType,
            this.trajectoryData.trendDays,
            this.trajectoryData.esValue,
            this.trajectoryData.sesValue,
            this.trajectoryData.uasValue
         );

         this.mwTrajectoryList
            .pipe(
               catchError((err) => {
                  this.alertService.error(err);
                  this.showSpinnerForTrajectory = false;
                  return throwError(err);
               })
            )
            .subscribe((apiResponse) => {
               if (!apiResponse.success) {
                  this.alertService.error(apiResponse.message);
                  this.showSpinnerForTrajectory = false;
                  return;
               } else {
                  this.showSpinnerForTrajectory = false;
                  this.generateTrajectoryAnalysis(
                     apiResponse.data,
                     this.trajectoryData.category
                  );
               }
            });
      } else {
         return;
      }
   }

   initialLoadingPieChart() {
      if (this.piechartData != undefined) {
         let from = "";
         let to = "";
         if (
            this.piechartData.fromDate == null ||
            this.piechartData.fromDate == undefined
         ) {
            let dateSubValue = new Date();
            dateSubValue.setHours(0, 0, 0);

            if (
               this.piechartData.searchRangeDay != null &&
               this.piechartData.searchRangeDay > 0
            ) {
               /* let dateSubValue = new Date(); */
               dateSubValue.setDate(
                  dateSubValue.getDate() - this.piechartData.searchRangeDay
               );
               from =
                  dateSubValue.getFullYear() +
                  "-" +
                  (dateSubValue.getMonth() + 1) +
                  "-" +
                  dateSubValue.getDate() +
                  " 00:00:00";

               /*   console.log("************* from date ***********");
			 console.log(from);
			 console.log(
				"************* this.vendorWiseConfiguredData.searchRangeDay ***********"
			 ); */
            } else {
               from =
                  dateSubValue.getFullYear() +
                  "-" +
                  (dateSubValue.getMonth() + 1) +
                  "-" +
                  dateSubValue.getDate() +
                  " 00:00:00";
            }
         } else {
            from =
               new Date(this.piechartData.fromDate).getFullYear() +
               "-" +
               (new Date(this.piechartData.fromDate).getMonth() + 1) +
               "-" +
               new Date(this.piechartData.fromDate).getDate() +
               "  00:00:00";
         }
         if (
            this.piechartData.toDate == null ||
            this.piechartData.toDate == undefined
         ) {
            this.piechartData.toDate = new Date();
            this.piechartData.toDate.setHours(0, 0, 0);

            to =
               this.piechartData.toDate.getFullYear() +
               "-" +
               (this.piechartData.toDate.getMonth() + 1) +
               "-" +
               this.piechartData.toDate.getDate() +
               " 23:59:59";
         } else {
            to =
               new Date(this.piechartData.toDate).getFullYear() +
               "-" +
               (new Date(this.piechartData.toDate).getMonth() + 1) +
               "-" +
               new Date(this.piechartData.toDate).getDate() +
               " 23:59:59";
         }

         this.showSpinnerForZoneWisePieChart = true;
         // this.piechartData.trendDays = 1;

         this.mwZoneAlarmList = this.mwqosdashboardService.getZoneWisePieChart(
            this.mwqosdashboard.uniqueCode,
            from,
            to,
            this.piechartData.siteCode,
            this.piechartData.category,
            this.piechartData.vendorName,
            this.piechartData.trendDays,
            this.piechartData.esValue,
            this.piechartData.sesValue,
            this.piechartData.uasValue
         );

         this.mwZoneAlarmList
            .pipe(
               catchError((err) => {
                  this.alertService.error(err);
                  this.showSpinnerForZoneWisePieChart = false;
                  return throwError(err);
               })
            )
            .subscribe((apiResponse) => {
               // console.log(apiResponse);
               if (!apiResponse.success) {
                  this.showSpinnerForZoneWisePieChart = false;
                  return;
               } else {
                  this.showSpinnerForZoneWisePieChart = false;
                  this.generateZoneWisePieChart(apiResponse.data);
                  // console.log(apiResponse.data)
               }
            });
      } else {
         return;
      }
   }

   initialLoadingForCategoryWisePieChart() {
      if (this.categoryWisePieConfiguredData != undefined) {
         let from = "";
         let to = "";
         if (
            this.categoryWisePieConfiguredData.fromDate == null ||
            this.categoryWisePieConfiguredData.fromDate == undefined
         ) {
            let dateSubValue = new Date();
            dateSubValue.setHours(0, 0, 0);

            if (
               this.categoryWisePieConfiguredData.searchRangeDay != null &&
               this.categoryWisePieConfiguredData.searchRangeDay > 0
            ) {
               /* let dateSubValue = new Date(); */
               dateSubValue.setDate(
                  dateSubValue.getDate() -
                     this.categoryWisePieConfiguredData.searchRangeDay
               );
               from =
                  dateSubValue.getFullYear() +
                  "-" +
                  (dateSubValue.getMonth() + 1) +
                  "-" +
                  dateSubValue.getDate() +
                  " 00:00:00";

               /*   console.log("************* from date ***********");
			 console.log(from);
			 console.log(
				"************* this.vendorWiseConfiguredData.searchRangeDay ***********"
			 ); */
            } else {
               from =
                  dateSubValue.getFullYear() +
                  "-" +
                  (dateSubValue.getMonth() + 1) +
                  "-" +
                  dateSubValue.getDate() +
                  " 00:00:00";
            }
         } else {
            from =
               new Date(
                  this.categoryWisePieConfiguredData.fromDate
               ).getFullYear() +
               "-" +
               (new Date(
                  this.categoryWisePieConfiguredData.fromDate
               ).getMonth() +
                  1) +
               "-" +
               new Date(this.categoryWisePieConfiguredData.fromDate).getDate() +
               "  00:00:00";
         }
         if (
            this.categoryWisePieConfiguredData.toDate == null ||
            this.categoryWisePieConfiguredData.toDate == undefined
         ) {
            this.categoryWisePieConfiguredData.toDate = new Date();
            this.categoryWisePieConfiguredData.toDate.setHours(0, 0, 0);

            to =
               this.categoryWisePieConfiguredData.toDate.getFullYear() +
               "-" +
               (this.categoryWisePieConfiguredData.toDate.getMonth() + 1) +
               "-" +
               this.categoryWisePieConfiguredData.toDate.getDate() +
               " 23:59:59";
         } else {
            to =
               new Date(
                  this.categoryWisePieConfiguredData.toDate
               ).getFullYear() +
               "-" +
               (new Date(this.categoryWisePieConfiguredData.toDate).getMonth() +
                  1) +
               "-" +
               new Date(this.categoryWisePieConfiguredData.toDate).getDate() +
               " 23:59:59";
         }

         this.showSpinnerForCategoryWisePieChart = true;

         this.mwCategoryWisePieChart = this.mwqosdashboardService.getCategoryWisePieChart(
            this.mwqosdashboard.uniqueCode,
            from,
            to,
            this.categoryWisePieConfiguredData.zoneType,
            this.categoryWisePieConfiguredData.zoneNameList,
            this.categoryWisePieConfiguredData.siteCode,
            this.categoryWisePieConfiguredData.category,
            this.categoryWisePieConfiguredData.vendorName,
            this.categoryWisePieConfiguredData.trendDays,
            this.categoryWisePieConfiguredData.esValue,
            this.categoryWisePieConfiguredData.sesValue,
            this.categoryWisePieConfiguredData.uasValue
         );

         this.mwCategoryWisePieChart
            .pipe(
               catchError((err) => {
                  this.alertService.error(err);
                  this.showSpinnerForCategoryWisePieChart = false;
                  return throwError(err);
               })
            )
            .subscribe((apiResponse) => {
               // console.log(apiResponse);
               if (!apiResponse.success) {
                  this.showSpinnerForCategoryWisePieChart = false;
                  return;
               } else {
                  this.showSpinnerForCategoryWisePieChart = false;
                  this.generateSingleZoneMultiCategoryPieChart(
                     apiResponse.data,
                     this.categoryWisePieConfiguredData.category
                  );
                  // console.log(apiResponse.data)
               }
            });
      } else {
         return;
      }
   }

   generateBarDiagramForVendorWise(
      apiData,
      param_vendorList,
      param_categoryList
   ) {
      if (apiData == null || apiData == undefined) {
         this.showSpinnerForVendorWiseBarChart = false;
         // new redraw
         const self = this,
            chart = this.chart;

         chart.showLoading();
         setTimeout(() => {
            chart.hideLoading();
            self.chartOptionsForVendorWiseBarChart.xAxis["categories"] = [];
            self.chartOptionsForVendorWiseBarChart.series = [];

            self.updateFromInput = true;
         }, 2000);

         this.showMessageBar("No Data Found For this Search Options");
      } else {
         var vendorList = "";
         // vendorList = param_vendorList;
         var graphFilterDataFinal = [];
         var yAxisData = [];
         var graphFilterName = [];
         var yIndex = 0;
         var xAxisDataFinal = [];
         var vendorNames = [];
         vendorList = param_vendorList;
         vendorNames = vendorList.split(",");
         vendorNames.forEach((category) => {
            graphFilterName[yIndex] = category;
            yIndex++;
         });

         // console.log("1 graphFilterName - " + graphFilterName);
         xAxisDataFinal = param_categoryList
            .split(",")
            .map((item) => item)
            .filter((value, index, self) => self.indexOf(value) === index);

         apiData.forEach((element) => {
            var name = element.dataFilter;
            var data = element.yAxisData;
            var currentXAxisData = element.xAxisData.split(",");
            var currentYAxisData = element.yAxisData.split(",");
            var linkCodeData: any;
            if (element.dataType1 != null && element.dataType1 != undefined)
               linkCodeData = element.dataType1.split("#");
            else linkCodeData = [];
            vendorNames.forEach((vendor) => {
               var dataInd = 0;

               if (vendor == name) {
                  var ind = 0;
                  ind = this.returnIndexNumber(name, graphFilterName);
                  if (
                     graphFilterDataFinal[ind] == undefined ||
                     graphFilterDataFinal[ind] == ""
                  )
                     graphFilterDataFinal[ind] = [];
                  currentXAxisData.forEach((xaxis) => {
                     graphFilterDataFinal[ind].push({
                        x: this.returnIndexNumber(xaxis, xAxisDataFinal),
                        y: +currentYAxisData[dataInd],
                        SystemLinkCode: linkCodeData[dataInd],
                     });
                     dataInd++;
                  });
               }
            });
         });

         vendorNames.forEach((vendor) => {
            yAxisData.push({
               keys: ["SystemLinkCode", "y"],
               name: vendor,
               data:
                  graphFilterDataFinal[
                     this.returnIndexNumber(vendor, graphFilterName)
                  ],
            });
            yIndex++;
         });

         this.showSpinnerForVendorWiseBarChart = false;

         var finalYaxisData = [];
         yAxisData.forEach((element) => {
            var cat = element.name;
            var count = element.data;
            var key = element.keys;
            if (count == undefined) {
               finalYaxisData.push({ keys: key, name: cat, data: [] });
            } else {
               finalYaxisData.push({ keys: key, name: cat, data: count });
            }
         });

         // console.log("final data " + yAxisData);

         // new redraw
         const self = this,
            chart = this.chart;

         chart.showLoading();
         setTimeout(() => {
            chart.hideLoading();
            self.chartOptionsForVendorWiseBarChart.xAxis[
               "categories"
            ] = xAxisDataFinal;
            self.chartOptionsForVendorWiseBarChart.series = finalYaxisData;

            self.updateFromInput = true;
         }, 2000);
      }

      //redraw end
   }

   generateTopNBarChart(apiData, param_vendorList, param_categoryList) {
      if (apiData == null || apiData == undefined) {
         this.showSpinnerForTopNBarChart = false;
         // new redraw
         const self = this,
            chart = this.chart;

         chart.showLoading();
         setTimeout(() => {
            chart.hideLoading();
            self.chartOptionsForTopNBarChart.xAxis["categories"] = [];
            self.chartOptionsForTopNBarChart.series = [];

            self.updateFromInput = true;
         }, 2000);

         this.showMessageBar("No Data Found for this Search Options");
      } else {
         var vendorList = param_vendorList;
         let graphFilterDataFinal = [];
         var yAxisData = [];
         var graphFilterName = [];
         var yIndex = 0;
         var catg = vendorList;
         vendorList = catg.split(",");
         vendorList.forEach((category) => {
            graphFilterName[yIndex] = category;
            yIndex++;
         });

         // console.log("1 graphFilterName - " + graphFilterName);
         var xAxisDataFinal = param_categoryList
            .split(",")
            .map((item) => item)
            .filter((value, index, self) => self.indexOf(value) === index);

         apiData.forEach((element) => {
            var name = element.vendorName;
            var data = element.yAxisData;
            var currentXAxisData = element.xAxisData.split(",");
            var currentYAxisData = element.yAxisData.split(",");
            var linkCodeData: any;
            if (element.dataFilter != null && element.dataFilter != undefined)
               linkCodeData = element.dataFilter;
            else linkCodeData = "";
            vendorList.forEach((vendor) => {
               var dataInd = 0;

               if (vendor == name) {
                  var ind = this.returnIndexNumber(name, graphFilterName);
                  if (
                     graphFilterDataFinal[ind] == undefined ||
                     graphFilterDataFinal[ind] == ""
                  )
                     graphFilterDataFinal[ind] = [];
                  currentXAxisData.forEach((xaxis) => {
                     graphFilterDataFinal[ind].push({
                        x: this.returnIndexNumber(xaxis, xAxisDataFinal),
                        y: +currentYAxisData[dataInd],
                        systemLinkCode: linkCodeData,
                     });
                     dataInd++;
                  });
               }
            });
         });

         vendorList.forEach((vendor) => {
            yAxisData.push({
               keys: ["systemLinkCode", "y"],
               name: vendor,
               data:
                  graphFilterDataFinal[
                     this.returnIndexNumber(vendor, graphFilterName)
                  ],
            });
            yIndex++;
         });
         this.showSpinnerForTopNBarChart = false;

         var finalYaxisData = [];
         yAxisData.forEach((element) => {
            var keys = element.keys;
            var cat = element.name;
            var count = element.data;
            if (count == undefined) {
               finalYaxisData.push({ keys: keys, name: cat, data: [] });
            } else {
               finalYaxisData.push({ keys: keys, name: cat, data: count });
            }
         });

         // new redraw
         const self = this,
            chart = this.chart;

         chart.showLoading();
         setTimeout(() => {
            chart.hideLoading();
            self.chartOptionsForTopNBarChart.xAxis[
               "categories"
            ] = xAxisDataFinal;
            self.chartOptionsForTopNBarChart.series = finalYaxisData;

            self.updateFromInput = true;
         }, 2000);
      }
   }

   generateTrajectoryAnalysis(apiData, categoryList) {
      if (apiData == null || apiData == undefined) {
         this.showSpinnerForTrajectory = false;
         // new redraw
         const self = this,
            chart = this.chart;

         chart.showLoading();
         setTimeout(() => {
            chart.hideLoading();
            self.chartOptionsForTrajectory.xAxis["categories"] = [];
            self.chartOptionsForTrajectory.series = [];

            self.updateFromInput = true;
         }, 2000);

         this.showMessageBar("No Data Found For this Search Options");
      } else {
         //new plot
         var yAxisData = [];
         let graphFilterDataFinal = [];

         var graphFilterName = [];
         var yIndex = 0;
         var catg = categoryList;
         categoryList = catg.split(",");
         categoryList.forEach((category) => {
            graphFilterName[yIndex] = category;
            yIndex++;
         });

         var xAxisDataFinal = apiData
            .map((item) => item.xAxisData)
            .filter((value, index, self) => self.indexOf(value) === index);

         apiData.forEach((element) => {
            var name = element.categoryNames;
            var data = element.yAxisData;
            var linkCodeData: any;
            if (element.dataType1 != null && element.dataType1 != undefined)
               linkCodeData = element.dataType1.split("#");
            else linkCodeData = [];
            categoryList.forEach((category) => {
               var dataInd = 0;
               if (category == name) {
                  var ind = this.returnIndexNumber(name, graphFilterName);
                  if (
                     graphFilterDataFinal[ind] == undefined ||
                     graphFilterDataFinal[ind] == ""
                  )
                     graphFilterDataFinal[ind] = [];
                  graphFilterDataFinal[ind].push({
                     x: this.returnIndexNumber(
                        element.xAxisData,
                        xAxisDataFinal
                     ),
                     y: +data,
                     SystemLinkCode: linkCodeData[dataInd],
                  });
                  dataInd++;
               }
            });
         });

         categoryList.forEach((category) => {
            yAxisData.push({
               keys: ["SystemLinkCode", "y"],
               name: category,
               data:
                  graphFilterDataFinal[
                     this.returnIndexNumber(category, graphFilterName)
                  ],
            });
            yIndex++;
         });

         var finalYaxisData = [];
         yAxisData.forEach((element) => {
            var cat = element.name;
            var count = element.data;
            var key = element.keys;
            if (count == undefined) {
               finalYaxisData.push({ keys: key, name: cat, data: [] });
            } else {
               finalYaxisData.push({ keys: key, name: cat, data: count });
            }
         });
         //plot end
         this.showSpinnerForTrajectory = false;

         //new call back added

         // new redraw
         const self = this,
            chart = this.chart;

         chart.showLoading();
         setTimeout(() => {
            chart.hideLoading();
            self.chartOptionsForTrajectory.xAxis["categories"] = xAxisDataFinal;
            self.chartOptionsForTrajectory.series = finalYaxisData;

            self.updateFromInput = true;
         }, 2000);
         //redraw end
         //callback end
      }
   }

   generateZoneWisePieChart(apiData) {
      if (apiData == null || apiData == undefined) {
         this.showSpinnerForZoneWisePieChart = false;
         // new redraw
         const self = this,
            chart = this.chart;

         chart.showLoading();
         setTimeout(() => {
            chart.hideLoading();
            // self.chartOptionsForCategoryWiseUtilization.xAxis['categories'] = xAxisDataFinal;
            self.chartOptionsForZoneWisePieChart.series = [];

            self.updateFromInput = true;
         }, 2000);

         this.showMessageBar("No Data Found for this Search Options");
      } else {
         var yAxisData = [];

         apiData.forEach((element) => {
            yAxisData.push({
               name: element.xAxisData,
               y: +element.yAxisData,
            });
         });

         // new call back added
         var finalYxis = [];
         finalYxis.push({ name: "Links", colorByPoint: true, data: yAxisData });
         // new plotting end
         // console.log(yAxisData);
         this.showSpinnerForZoneWisePieChart = false;

         // new redraw
         const self = this,
            chart = this.chart;

         chart.showLoading();
         setTimeout(() => {
            chart.hideLoading();
            // self.chartOptionsForCategoryWiseUtilization.xAxis['categories'] = xAxisDataFinal;
            self.chartOptionsForZoneWisePieChart.series = finalYxis;

            self.updateFromInput = true;
         }, 2000);
      }

      exporting(Highcharts);
      offline(Highcharts);
      HC_exportData(Highcharts);
   }

   generateSingleZoneMultiCategoryPieChart(apiData, categoryList) {
      if (apiData == null || apiData == undefined) {
         this.showSpinnerForCategoryWisePieChart = false;
         const self = this,
            chart = this.chart;

         chart.showLoading();
         setTimeout(() => {
            chart.hideLoading();
            // self.chartOptionsForCategoryWiseUtilization.xAxis['categories'] = xAxisDataFinal;
            self.chartOptionsForSingleZoneMultiCategoryPieChart.series = [];

            self.updateFromInput = true;
         }, 2000);

         this.showMessageBar("No Data Found For this Search Options");
      } else {
         var yAxisData = [];
         let graphFilterDataFinal = [];
         let graphLinkDetailsDataFinal = [];

         var graphFilterName = [];
         var yIndex = 0;
         var catg = categoryList;
         categoryList = catg.split(",");
         categoryList.forEach((category) => {
            graphFilterName[yIndex] = category;
            yIndex++;
         });

         var xAxisDataFinal = apiData
            .map((item) => item.xAxisData)
            .filter((value, index, self) => self.indexOf(value) === index);

         apiData.forEach((element) => {
            var name = element.xAxisData;
            var data = element.yAxisData;
            var linkCodeData: any;
            if (element.dataType1 != null && element.dataType1 != undefined)
               linkCodeData = element.dataType1;
            else linkCodeData = "";
            categoryList.forEach((category) => {
               if (category == name) {
                  var ind = this.returnIndexNumber(name, graphFilterName);
                  if (
                     graphFilterDataFinal[ind] == undefined ||
                     graphFilterDataFinal[ind] == ""
                  )
                     graphFilterDataFinal[ind] = null;
                  /* graphFilterDataFinal[ind].push(
			// x: this.returnIndexNumber(element.xAxisData, xAxisDataFinal),
			+data
		  ); */
                  graphFilterDataFinal[ind] = +data;
                  graphLinkDetailsDataFinal[ind] = linkCodeData;
               }
            });
         });

         categoryList.forEach((category) => {
            yAxisData.push({
               keys: ["SystemLinkCode", "y"],
               name: category,
               data: {
                  y:
                     graphFilterDataFinal[
                        this.returnIndexNumber(category, graphFilterName)
                     ],
                  SystemLinkCode:
                     graphLinkDetailsDataFinal[
                        this.returnIndexNumber(category, graphFilterName)
                     ],
               },
            });
            yIndex++;
         });
         var finalYaxisData = [];
         yAxisData.forEach((element) => {
            var cat = element.name;
            var count = element.data.y;
            var key = element.keys;
            if (count == undefined) {
               finalYaxisData.push({ keys: key, name: cat, y: 0 });
            } else {
               finalYaxisData.push({ keys: key, name: cat, y: count });
            }
         });

         // console.log(finalYaxisData);

         /*  var yAxisData = [];
  apiData.forEach((element) => {

	yAxisData.push({
	  name: element.xAxisData,
	  y: +element.yAxisData,
	});
  });  */
         var finalYxis = [];
         finalYxis.push({
            name: "Links",
            colorByPoint: true,
            data: finalYaxisData,
         });
         // new plotting end
         // console.log(yAxisData);

         this.showSpinnerForCategoryWisePieChart = false;

         // new redraw
         const self = this,
            chart = this.chart;

         chart.showLoading();
         setTimeout(() => {
            chart.hideLoading();
            // self.chartOptionsForCategoryWiseUtilization.xAxis['categories'] = xAxisDataFinal;
            self.chartOptionsForSingleZoneMultiCategoryPieChart.series = finalYxis;

            self.updateFromInput = true;
         }, 2000);
         //redraw end
      }
   }

   /* DataBase to Form Data Flow */

   assignDbDataIntoFormVendorWiseBarChart() {
      /* console.log(
         "********************** this.vendorWiseConfiguredData ************************"
      );
      console.log(this.vendorWiseConfiguredData);
      console.log(
         "*****************************************************************************"
      ); */

      var storedCategoryName;
      var storedVendor;
      var storedLicenseName;
      var storedZoneName;
      var storedSiteCode;
      storedCategoryName = this.vendorWiseConfiguredData.category.split(",");
      storedVendor = this.vendorWiseConfiguredData.vendorName.split(",");
      /* storedLicenseName = this.vendorWiseConfiguredData.licenseName.split(
	   ","
	); */
      storedSiteCode = this.vendorWiseConfiguredData.siteCode.split(",");
      storedZoneName = this.vendorWiseConfiguredData.zoneNameList.split(",");
      //   console.log(storedAlarm)
      this.vendorWiseBarChartDTO.categoryName = storedCategoryName.map(
         (obj) => {
            var rObj = <any>{
               categoryName: obj,
            };

            return rObj;
         }
      );
      this.vendorWiseBarChartDTO.vendorName = storedVendor.map((obj) => {
         var rObj = {
            vendorName: obj,
         };

         return rObj;
      });
      /* this.vendorWiseBarChartDTO.licenseName = storedLicenseName.map((obj) => {
	   var rObj = {
		  licenseName: obj,
	   };

	   return rObj;
   }); */
      if (this.vendorWiseConfiguredData.siteCode != "") {
         this.vendorWiseBarChartDTO.sitecode = storedSiteCode.map((obj) => {
            var rObj = {
               siteCode: obj,
            };

            return rObj;
         });
      }
      if (this.vendorWiseConfiguredData.zoneType == "1") {
         this.vendorWiseBarChartDTO.zoneListCommercial = storedZoneName.map(
            (obj) => {
               var rObj = {
                  commercialZone: obj,
               };
               return rObj;
            }
         );
      } else if (this.vendorWiseConfiguredData.zoneType == "2") {
         this.vendorWiseBarChartDTO.zoneListDistrict = storedZoneName.map(
            (obj) => {
               var rObj = {
                  district: obj,
               };
               return rObj;
            }
         );
      } else if (this.vendorWiseConfiguredData.zoneType == "3") {
         this.vendorWiseBarChartDTO.zoneListThana = storedZoneName.map(
            (obj) => {
               var rObj = {
                  thana: obj,
               };
               return rObj;
            }
         );
      } else if (this.vendorWiseConfiguredData.zoneType == "4") {
         this.vendorWiseBarChartDTO.zoneListUnion = storedZoneName.map(
            (obj) => {
               var rObj = {
                  unionName: obj,
               };
               return rObj;
            }
         );
      } else if (this.vendorWiseConfiguredData.zoneType == "5") {
         this.vendorWiseBarChartDTO.zoneListEdotcoZone = storedZoneName.map(
            (obj) => {
               var rObj = {
                  pmfZone: obj,
               };
               return rObj;
            }
         );
      }

      let from = "";
      let to = "";
      if (
         this.vendorWiseConfiguredData.fromDate == null ||
         this.vendorWiseConfiguredData.fromDate == undefined
      ) {
         let dateSubValue = new Date();
         dateSubValue.setHours(0, 0, 0);

         if (this.vendorWiseConfiguredData.searchRangeDay > 0) {
            /* let dateSubValue = new Date(); */
            dateSubValue.setDate(
               dateSubValue.getDate() -
                  this.vendorWiseConfiguredData.searchRangeDay
            );
            from =
               dateSubValue.getFullYear() +
               "-" +
               (dateSubValue.getMonth() + 1) +
               "-" +
               dateSubValue.getDate() +
               " 00:00:00";
         } else {
            from =
               dateSubValue.getFullYear() +
               "-" +
               (dateSubValue.getMonth() + 1) +
               "-" +
               dateSubValue.getDate() +
               " 00:00:00";
         }
      } else {
         from =
            new Date(this.vendorWiseConfiguredData.fromDate).getFullYear() +
            "-" +
            (new Date(this.vendorWiseConfiguredData.fromDate).getMonth() + 1) +
            "-" +
            new Date(this.vendorWiseConfiguredData.fromDate).getDate() +
            "  00:00:00";
      }
      if (
         this.vendorWiseConfiguredData.toDate == null ||
         this.vendorWiseConfiguredData.toDate == undefined
      ) {
         this.vendorWiseConfiguredData.toDate = new Date();
         this.vendorWiseConfiguredData.toDate.setHours(0, 0, 0);

         to =
            this.vendorWiseConfiguredData.toDate.getFullYear() +
            "-" +
            (this.vendorWiseConfiguredData.toDate.getMonth() + 1) +
            "-" +
            this.vendorWiseConfiguredData.toDate.getDate() +
            " 23:59:59";
      } else {
         to =
            new Date(this.vendorWiseConfiguredData.toDate).getFullYear() +
            "-" +
            (new Date(this.vendorWiseConfiguredData.toDate).getMonth() + 1) +
            "-" +
            new Date(this.vendorWiseConfiguredData.toDate).getDate() +
            " 23:59:59";
      }

      this.vendorWiseBarChartDTO.zoneType = this.vendorWiseConfiguredData.zoneType;
      this.vendorWiseBarChartDTO.fromDate = new Date(from);
      this.vendorWiseBarChartDTO.toDate = new Date(to);
      this.vendorWiseBarChartDTO.trendDays = this.vendorWiseConfiguredData.trendDays;
      // this.vendorWiseBarChartDTO.barChartName = this.vendorWiseConfiguredData.barChartName;
      this.vendorWiseBarChartDTO.searchRangeDay = this.vendorWiseConfiguredData.searchRangeDay;
      this.vendorWiseBarChartDTO.isDateRangeFixed = this.vendorWiseConfiguredData.isDateRangeFixed;
      this.vendorWiseBarChartDTO.esValue = this.vendorWiseConfiguredData.esValue;
      this.vendorWiseBarChartDTO.sesValue = this.vendorWiseConfiguredData.sesValue;
      this.vendorWiseBarChartDTO.uasValue = this.vendorWiseConfiguredData.uasValue;
      this.showSpinner = false;
   }

   assignDbDataIntoFormTopNBarChart() {
      var storedCategoryName;
      var storedVendor;
      var storedtopNValue;
      var storedZoneName;
      var storedSiteCode;
      storedCategoryName = this.topNConfiguredData.category.split(",");
      storedVendor = this.topNConfiguredData.vendorName.split(",");
      /* storedLicenseName = this.topNConfiguredData.licenseName.split(
	   ","
	); */
      /* storedtopNValue = this.topNConfiguredData.topNValue.split(
	   ","
	); */
      storedSiteCode = this.topNConfiguredData.siteCode.split(",");
      storedZoneName = this.topNConfiguredData.zoneNameList.split(",");
      //   console.log(storedAlarm)
      this.topNBarChartDTO.categoryName = storedCategoryName.map((obj) => {
         var rObj = <any>{
            categoryName: obj,
         };

         return rObj;
      });
      this.topNBarChartDTO.vendorName = storedVendor.map((obj) => {
         var rObj = {
            vendorName: obj,
         };

         return rObj;
      });
      /*  this.topNBarChartDTO.licenseName = storedLicenseName.map((obj) => {
	   var rObj = {
		  licenseName: obj,
	   };

	   return rObj;
	}); */
      /* this.topNBarChartDTO.topNValue = storedtopNValue.map((obj) => {
	   var rObj = {
		  topNValue: obj,
	   };

	   return rObj;
	}); */
      if (this.topNConfiguredData.siteCode != "") {
         this.topNBarChartDTO.sitecode = storedSiteCode.map((obj) => {
            var rObj = {
               siteCode: obj,
            };

            return rObj;
         });
      }
      if (this.topNConfiguredData.zoneType == "1") {
         this.topNBarChartDTO.zoneListCommercial = storedZoneName.map((obj) => {
            var rObj = {
               commercialZone: obj,
            };
            return rObj;
         });
      } else if (this.topNConfiguredData.zoneType == "2") {
         this.topNBarChartDTO.zoneListDistrict = storedZoneName.map((obj) => {
            var rObj = {
               district: obj,
            };
            return rObj;
         });
      } else if (this.topNConfiguredData.zoneType == "3") {
         this.topNBarChartDTO.zoneListThana = storedZoneName.map((obj) => {
            var rObj = {
               thana: obj,
            };
            return rObj;
         });
      } else if (this.topNConfiguredData.zoneType == "4") {
         this.topNBarChartDTO.zoneListUnion = storedZoneName.map((obj) => {
            var rObj = {
               unionName: obj,
            };
            return rObj;
         });
      } else if (this.topNConfiguredData.zoneType == "5") {
         this.topNBarChartDTO.zoneListEdotcoZone = storedZoneName.map((obj) => {
            var rObj = {
               pmfZone: obj,
            };
            return rObj;
         });
      }

      let from = "";
      let to = "";
      if (
         this.topNConfiguredData.fromDate == null ||
         this.topNConfiguredData.fromDate == undefined
      ) {
         let dateSubValue = new Date();
         dateSubValue.setHours(0, 0, 0);

         if (this.topNConfiguredData.searchRangeDay > 0) {
            /* let dateSubValue = new Date(); */
            dateSubValue.setDate(
               dateSubValue.getDate() - this.topNConfiguredData.searchRangeDay
            );
            from =
               dateSubValue.getFullYear() +
               "-" +
               (dateSubValue.getMonth() + 1) +
               "-" +
               dateSubValue.getDate() +
               " 00:00:00";
         } else {
            from =
               dateSubValue.getFullYear() +
               "-" +
               (dateSubValue.getMonth() + 1) +
               "-" +
               dateSubValue.getDate() +
               " 00:00:00";
         }
      } else {
         from =
            new Date(this.topNConfiguredData.fromDate).getFullYear() +
            "-" +
            (new Date(this.topNConfiguredData.fromDate).getMonth() + 1) +
            "-" +
            new Date(this.topNConfiguredData.fromDate).getDate() +
            "  00:00:00";
      }
      if (
         this.topNConfiguredData.toDate == null ||
         this.topNConfiguredData.toDate == undefined
      ) {
         this.topNConfiguredData.toDate = new Date();
         this.topNConfiguredData.toDate.setHours(0, 0, 0);

         to =
            this.topNConfiguredData.toDate.getFullYear() +
            "-" +
            (this.topNConfiguredData.toDate.getMonth() + 1) +
            "-" +
            this.topNConfiguredData.toDate.getDate() +
            " 23:59:59";
      } else {
         to =
            new Date(this.topNConfiguredData.toDate).getFullYear() +
            "-" +
            (new Date(this.topNConfiguredData.toDate).getMonth() + 1) +
            "-" +
            new Date(this.topNConfiguredData.toDate).getDate() +
            " 23:59:59";
      }

      this.topNBarChartDTO.zoneType = this.topNConfiguredData.zoneType;
      this.topNBarChartDTO.fromDate = new Date(from);
      this.topNBarChartDTO.toDate = new Date(to);
      this.topNBarChartDTO.topNValue = this.topNConfiguredData.topNValue;
      this.topNBarChartDTO.trendDays = this.topNConfiguredData.trendDays;
      this.topNBarChartDTO.searchRangeDay = this.topNConfiguredData.searchRangeDay;
      this.topNBarChartDTO.isDateRangeFixed = this.topNConfiguredData.isDateRangeFixed;
      this.topNBarChartDTO.esValue = this.topNConfiguredData.esValue;
      this.topNBarChartDTO.sesValue = this.topNConfiguredData.sesValue;
      this.topNBarChartDTO.uasValue = this.topNConfiguredData.uasValue;
      this.showSpinner = false;
   }

   assignDbDataIntoFormTrajectoryTrend() {
      var storedCategoryName;
      var storedVendor;
      var storedLicenseName;
      var storedZoneName;
      var storedSiteCode;
      storedCategoryName = this.trajectoryData.category.split(",");
      storedVendor = this.trajectoryData.vendorName.split(",");
      /* storedLicenseName = this.trajectoryData.licenseName.split(
	   ","
	); */
      storedSiteCode = this.trajectoryData.siteCode.split(",");
      storedZoneName = this.trajectoryData.zoneNameList.split(",");
      //   console.log(storedAlarm)
      this.trajectoryAnalysisDTO.categoryName = storedCategoryName.map(
         (obj) => {
            var rObj = <any>{
               categoryName: obj,
            };

            return rObj;
         }
      );
      this.trajectoryAnalysisDTO.vendorName = storedVendor.map((obj) => {
         var rObj = {
            vendorName: obj,
         };

         return rObj;
      });
      /* this.trajectoryAnalysisDTO.licenseName = storedLicenseName.map((obj) => {
	   var rObj = {
		  licenseName: obj,
	   };

	   return rObj;
   }); */
      if (this.trajectoryData.siteCode != "") {
         this.trajectoryAnalysisDTO.sitecode = storedSiteCode.map((obj) => {
            var rObj = {
               siteCode: obj,
            };

            return rObj;
         });
      }
      if (this.trajectoryData.zoneType == "1") {
         this.trajectoryAnalysisDTO.zoneListCommercial = storedZoneName.map(
            (obj) => {
               var rObj = {
                  commercialZone: obj,
               };
               return rObj;
            }
         );
      } else if (this.trajectoryData.zoneType == "2") {
         this.trajectoryAnalysisDTO.zoneListDistrict = storedZoneName.map(
            (obj) => {
               var rObj = {
                  district: obj,
               };
               return rObj;
            }
         );
      } else if (this.trajectoryData.zoneType == "3") {
         this.trajectoryAnalysisDTO.zoneListThana = storedZoneName.map(
            (obj) => {
               var rObj = {
                  thana: obj,
               };
               return rObj;
            }
         );
      } else if (this.trajectoryData.zoneType == "4") {
         this.trajectoryAnalysisDTO.zoneListUnion = storedZoneName.map(
            (obj) => {
               var rObj = {
                  unionName: obj,
               };
               return rObj;
            }
         );
      } else if (this.trajectoryData.zoneType == "5") {
         this.trajectoryAnalysisDTO.zoneListEdotcoZone = storedZoneName.map(
            (obj) => {
               var rObj = {
                  pmfZone: obj,
               };
               return rObj;
            }
         );
      }

      let from = "";
      let to = "";
      if (
         this.trajectoryData.fromDate == null ||
         this.trajectoryData.fromDate == undefined
      ) {
         let dateSubValue = new Date();
         dateSubValue.setHours(0, 0, 0);

         if (this.trajectoryData.searchRangeDay > 0) {
            /* let dateSubValue = new Date(); */
            dateSubValue.setDate(
               dateSubValue.getDate() - this.trajectoryData.searchRangeDay
            );
            from =
               dateSubValue.getFullYear() +
               "-" +
               (dateSubValue.getMonth() + 1) +
               "-" +
               dateSubValue.getDate() +
               " 00:00:00";
         } else {
            from =
               dateSubValue.getFullYear() +
               "-" +
               (dateSubValue.getMonth() + 1) +
               "-" +
               dateSubValue.getDate() +
               " 00:00:00";
         }
      } else {
         from =
            new Date(this.trajectoryData.fromDate).getFullYear() +
            "-" +
            (new Date(this.trajectoryData.fromDate).getMonth() + 1) +
            "-" +
            new Date(this.trajectoryData.fromDate).getDate() +
            "  00:00:00";
      }
      if (
         this.trajectoryData.toDate == null ||
         this.trajectoryData.toDate == undefined
      ) {
         this.trajectoryData.toDate = new Date();
         this.trajectoryData.toDate.setHours(0, 0, 0);

         to =
            this.trajectoryData.toDate.getFullYear() +
            "-" +
            (this.trajectoryData.toDate.getMonth() + 1) +
            "-" +
            this.trajectoryData.toDate.getDate() +
            " 23:59:59";
      } else {
         to =
            new Date(this.trajectoryData.toDate).getFullYear() +
            "-" +
            (new Date(this.trajectoryData.toDate).getMonth() + 1) +
            "-" +
            new Date(this.trajectoryData.toDate).getDate() +
            " 23:59:59";
      }

      this.trajectoryAnalysisDTO.zoneType = this.trajectoryData.zoneType;
      this.trajectoryAnalysisDTO.fromDate = new Date(from);
      this.trajectoryAnalysisDTO.toDate = new Date(to);
      this.trajectoryAnalysisDTO.dateSearchType = this.trajectoryData.dateSearchType;
      this.trajectoryAnalysisDTO.trendDays = this.trajectoryData.trendDays;
      // this.trajectoryAnalysisDTO.barChartName = this.trajectoryData.barChartName;
      this.trajectoryAnalysisDTO.searchRangeDay = this.trajectoryData.searchRangeDay;
      this.trajectoryAnalysisDTO.isDateRangeFixed = this.trajectoryData.isDateRangeFixed;
      this.trajectoryAnalysisDTO.esValue = this.trajectoryData.esValue;
      this.trajectoryAnalysisDTO.sesValue = this.trajectoryData.sesValue;
      this.trajectoryAnalysisDTO.uasValue = this.trajectoryData.uasValue;
      this.showSpinner = false;
   }

   assignDbDataIntoFormZoneWisePieChart() {
      var storedCategoryName;
      var storedVendor;
      var storedZoneName;
      var storedSiteCode;
      storedCategoryName = this.piechartData.category.split(",");
      storedVendor = this.piechartData.vendorName.split(",");
      /* storedLicenseName = this.piechartData.licenseName.split(
	   ","
	); */
      storedSiteCode = this.piechartData.siteCode.split(",");
      storedZoneName = this.piechartData.zoneNameList.split(",");
      //   console.log(storedAlarm)
      this.zonewisePiechartDTO.categoryName = storedCategoryName.map((obj) => {
         var rObj = <any>{
            categoryName: obj,
         };

         return rObj;
      });
      this.zonewisePiechartDTO.vendorName = storedVendor.map((obj) => {
         var rObj = {
            vendorName: obj,
         };

         return rObj;
      });
      /* this.zonewisePiechartDTO.licenseName = storedLicenseName.map((obj) => {
	   var rObj = {
		  licenseName: obj,
	   };

	   return rObj;
   }); */
      if (this.piechartData.siteCode != "") {
         this.zonewisePiechartDTO.sitecode = storedSiteCode.map((obj) => {
            var rObj = {
               siteCode: obj,
            };

            return rObj;
         });
      }
      if (this.piechartData.zoneType == "1") {
         this.zonewisePiechartDTO.zoneListCommercial = storedZoneName.map(
            (obj) => {
               var rObj = {
                  commercialZone: obj,
               };
               return rObj;
            }
         );
      } else if (this.piechartData.zoneType == "2") {
         this.zonewisePiechartDTO.zoneListDistrict = storedZoneName.map(
            (obj) => {
               var rObj = {
                  district: obj,
               };
               return rObj;
            }
         );
      } else if (this.piechartData.zoneType == "3") {
         this.zonewisePiechartDTO.zoneListThana = storedZoneName.map((obj) => {
            var rObj = {
               thana: obj,
            };
            return rObj;
         });
      } else if (this.piechartData.zoneType == "4") {
         this.zonewisePiechartDTO.zoneListUnion = storedZoneName.map((obj) => {
            var rObj = {
               unionName: obj,
            };
            return rObj;
         });
      } else if (this.piechartData.zoneType == "5") {
         this.zonewisePiechartDTO.zoneListEdotcoZone = storedZoneName.map(
            (obj) => {
               var rObj = {
                  pmfZone: obj,
               };
               return rObj;
            }
         );
      }

      let from = "";
      let to = "";
      if (
         this.piechartData.fromDate == null ||
         this.piechartData.fromDate == undefined
      ) {
         let dateSubValue = new Date();
         dateSubValue.setHours(0, 0, 0);

         if (this.piechartData.searchRangeDay > 0) {
            /* let dateSubValue = new Date(); */
            dateSubValue.setDate(
               dateSubValue.getDate() - this.piechartData.searchRangeDay
            );
            from =
               dateSubValue.getFullYear() +
               "-" +
               (dateSubValue.getMonth() + 1) +
               "-" +
               dateSubValue.getDate() +
               " 00:00:00";
         } else {
            from =
               dateSubValue.getFullYear() +
               "-" +
               (dateSubValue.getMonth() + 1) +
               "-" +
               dateSubValue.getDate() +
               " 00:00:00";
         }
      } else {
         from =
            new Date(this.piechartData.fromDate).getFullYear() +
            "-" +
            (new Date(this.piechartData.fromDate).getMonth() + 1) +
            "-" +
            new Date(this.piechartData.fromDate).getDate() +
            "  00:00:00";
      }
      if (
         this.piechartData.toDate == null ||
         this.piechartData.toDate == undefined
      ) {
         this.piechartData.toDate = new Date();
         this.piechartData.toDate.setHours(0, 0, 0);

         to =
            this.piechartData.toDate.getFullYear() +
            "-" +
            (this.piechartData.toDate.getMonth() + 1) +
            "-" +
            this.piechartData.toDate.getDate() +
            " 23:59:59";
      } else {
         to =
            new Date(this.piechartData.toDate).getFullYear() +
            "-" +
            (new Date(this.piechartData.toDate).getMonth() + 1) +
            "-" +
            new Date(this.piechartData.toDate).getDate() +
            " 23:59:59";
      }

      this.zonewisePiechartDTO.zoneType = this.piechartData.zoneType;
      this.zonewisePiechartDTO.fromDate = new Date(from);
      this.zonewisePiechartDTO.toDate = new Date(to);
      this.zonewisePiechartDTO.dateSearchType = this.piechartData.dateSearchType;
      this.zonewisePiechartDTO.trendDays = this.piechartData.trendDays;
      // this.zonewisePiechartDTO.barChartName = this.piechartData.barChartName;
      this.zonewisePiechartDTO.searchRangeDay = this.piechartData.searchRangeDay;
      this.zonewisePiechartDTO.isDateRangeFixed = this.piechartData.isDateRangeFixed;
      this.zonewisePiechartDTO.esValue = this.piechartData.esValue;
      this.zonewisePiechartDTO.sesValue = this.piechartData.sesValue;
      this.zonewisePiechartDTO.uasValue = this.piechartData.uasValue;
      this.showSpinner = false;
   }

   assignDbDataIntoFormCategoryWisePieChart() {
      var storedCategoryName;
      var storedVendor;
      var storedLicenseName;
      var storedZoneName;
      var storedSiteCode;
      storedCategoryName = this.categoryWisePieConfiguredData.category.split(
         ","
      );
      storedVendor = this.categoryWisePieConfiguredData.vendorName.split(",");
      /* storedLicenseName = this.categoryWisePieConfiguredData.licenseName.split(
	   ","
	); */
      storedSiteCode = this.categoryWisePieConfiguredData.siteCode.split(",");
      storedZoneName = this.categoryWisePieConfiguredData.zoneNameList.split(
         ","
      );

      this.singleZoneMultiCategoryWisePiechartDTO.categoryName = storedCategoryName.map(
         (obj) => {
            var rObj = <any>{
               categoryName: obj,
            };

            return rObj;
         }
      );
      this.singleZoneMultiCategoryWisePiechartDTO.vendorName = storedVendor.map(
         (obj) => {
            var rObj = {
               vendorName: obj,
            };

            return rObj;
         }
      );
      /* this.singleZoneMultiCategoryWisePiechartDTO.licenseName = storedLicenseName.map(
	   (obj) => {
		  var rObj = {
			 licenseName: obj,
		  };

		  return rObj;
	   }
   ); */
      if (this.categoryWisePieConfiguredData.siteCode != "") {
         this.singleZoneMultiCategoryWisePiechartDTO.sitecode = storedSiteCode.map(
            (obj) => {
               var rObj = {
                  siteCode: obj,
               };

               return rObj;
            }
         );
      }
      if (this.categoryWisePieConfiguredData.zoneType == "1") {
         this.singleZoneMultiCategoryWisePiechartDTO.zoneListCommercial = storedZoneName.map(
            (obj) => {
               var rObj = {
                  commercialZone: obj,
               };
               return rObj;
            }
         );
      } else if (this.categoryWisePieConfiguredData.zoneType == "2") {
         this.singleZoneMultiCategoryWisePiechartDTO.zoneListDistrict = storedZoneName.map(
            (obj) => {
               var rObj = {
                  district: obj,
               };
               return rObj;
            }
         );
      } else if (this.categoryWisePieConfiguredData.zoneType == "3") {
         this.singleZoneMultiCategoryWisePiechartDTO.zoneListThana = storedZoneName.map(
            (obj) => {
               var rObj = {
                  thana: obj,
               };
               return rObj;
            }
         );
      } else if (this.categoryWisePieConfiguredData.zoneType == "4") {
         this.singleZoneMultiCategoryWisePiechartDTO.zoneListUnion = storedZoneName.map(
            (obj) => {
               var rObj = {
                  unionName: obj,
               };
               return rObj;
            }
         );
      } else if (this.categoryWisePieConfiguredData.zoneType == "5") {
         this.singleZoneMultiCategoryWisePiechartDTO.zoneListEdotcoZone = storedZoneName.map(
            (obj) => {
               var rObj = {
                  pmfZone: obj,
               };
               return rObj;
            }
         );
      }

      let from = "";
      let to = "";
      if (
         this.categoryWisePieConfiguredData.fromDate == null ||
         this.categoryWisePieConfiguredData.fromDate == undefined
      ) {
         /* this.vendorWiseConfiguredData.fromDate = new Date();
         this.vendorWiseConfiguredData.fromDate.setHours(0, 0, 0); */
         let dateSubValue = new Date();
         dateSubValue.setHours(0, 0, 0);

         if (this.categoryWisePieConfiguredData.searchRangeDay > 0) {
            /* let dateSubValue = new Date(); */
            dateSubValue.setDate(
               dateSubValue.getDate() -
                  this.categoryWisePieConfiguredData.searchRangeDay
            );
            from =
               dateSubValue.getFullYear() +
               "-" +
               (dateSubValue.getMonth() + 1) +
               "-" +
               dateSubValue.getDate() +
               " 00:00:00";
         } else {
            from =
               dateSubValue.getFullYear() +
               "-" +
               (dateSubValue.getMonth() + 1) +
               "-" +
               dateSubValue.getDate() +
               " 00:00:00";
         }
      } else {
         from =
            new Date(
               this.categoryWisePieConfiguredData.fromDate
            ).getFullYear() +
            "-" +
            (new Date(this.categoryWisePieConfiguredData.fromDate).getMonth() +
               1) +
            "-" +
            new Date(this.categoryWisePieConfiguredData.fromDate).getDate() +
            "  00:00:00";
      }
      if (
         this.categoryWisePieConfiguredData.toDate == null ||
         this.categoryWisePieConfiguredData.toDate == undefined
      ) {
         this.categoryWisePieConfiguredData.toDate = new Date();
         this.categoryWisePieConfiguredData.toDate.setHours(0, 0, 0);

         to =
            this.categoryWisePieConfiguredData.toDate.getFullYear() +
            "-" +
            (this.categoryWisePieConfiguredData.toDate.getMonth() + 1) +
            "-" +
            this.categoryWisePieConfiguredData.toDate.getDate() +
            " 23:59:59";
      } else {
         to =
            new Date(this.categoryWisePieConfiguredData.toDate).getFullYear() +
            "-" +
            (new Date(this.categoryWisePieConfiguredData.toDate).getMonth() +
               1) +
            "-" +
            new Date(this.categoryWisePieConfiguredData.toDate).getDate() +
            " 23:59:59";
      }

      this.singleZoneMultiCategoryWisePiechartDTO.zoneType = this.categoryWisePieConfiguredData.zoneType;
      this.singleZoneMultiCategoryWisePiechartDTO.fromDate = new Date(from);
      this.singleZoneMultiCategoryWisePiechartDTO.toDate = new Date(to);
      this.singleZoneMultiCategoryWisePiechartDTO.dateSearchType = this.categoryWisePieConfiguredData.dateSearchType;
      this.singleZoneMultiCategoryWisePiechartDTO.trendDays = this.categoryWisePieConfiguredData.trendDays;
      // this.singleZoneMultiCategoryWisePiechartDTO.barChartName = this.categoryWisePieConfiguredData.barChartName;
      this.singleZoneMultiCategoryWisePiechartDTO.searchRangeDay = this.categoryWisePieConfiguredData.searchRangeDay;
      this.singleZoneMultiCategoryWisePiechartDTO.isDateRangeFixed = this.categoryWisePieConfiguredData.isDateRangeFixed;
      this.singleZoneMultiCategoryWisePiechartDTO.esValue = this.categoryWisePieConfiguredData.esValue;
      this.singleZoneMultiCategoryWisePiechartDTO.sesValue = this.categoryWisePieConfiguredData.sesValue;
      this.singleZoneMultiCategoryWisePiechartDTO.uasValue = this.categoryWisePieConfiguredData.uasValue;
      this.showSpinner = false;
   }

   /* ****************************** */

   private loadMwqosdashboardsIntoArray(apiResponse) {
      if (!apiResponse.success) {
         return;
      }

      this.mwqosdashboards = apiResponse.data.map((obj) => {
         var rObj = <Mwqosdashboard>{
            componentId: obj.componentId,
            status: obj.status,
            version: obj.version,
            xAxisData: obj.xAxisData,
            yAxisData: obj.yAxisData,
            vendor: obj.vendor,
            uploadedAttachment: obj.uploadedAttachment,
            uploadedAttachmentFileId: obj.uploadedAttachmentFileId,
            downloadAttachment: obj.downloadAttachment,
            remarks: obj.remarks,
         };
         return rObj;
      });
   }

   onAddMwqosdashboard() {
      this.router.navigate(["/mwqosdashboards/-1"]);
   }

   /* searchByParams(){
		this.showSpinner =true;
		this.mwqosdashboardList$ = this.mwqosdashboardService.getMwqosdashboardsByUniqueCode(this.mwqosdashboard.uniqueCode);
		this.mwqosdashboardList$.pipe(
		      catchError(err => {
		        this.alertService.error(err);
		        this.showSpinner = false;
		        return throwError(err);
		    })
		    ).subscribe(
			apiResponse => {
				if (!apiResponse.success)
				{
					this.alertService.error(apiResponse.message);
					this.showSpinner =false;
					return;
				}
				this.loadMwqosdashboardsIntoArray(apiResponse);
				// the initial full set of data
				// note that we don't need to un-subscribe here as it's a one off data load
				if (this.gridOptions.api) { // can be null when tabbing between the examples
					this.gridOptions.api.setRowData(this.mwqosdashboards);
				}
				this.showSpinner =false;
			}
			);
			if(!this.isMobileAgent())
		this.gridOptions.api.sizeColumnsToFit();
		
	} */

   searchByParams() {
      if (this.toDate < this.fromDate) {
         this.alertService.error("Wrong Input for Calender Date Range");
         return;
      }
      let from = "";
      let to = "";
      if (!(this.fromDate == undefined)) {
         from =
            this.fromDate.getFullYear() +
            "-" +
            (this.fromDate.getMonth() + 1) +
            "-" +
            this.fromDate.getDate() +
            "  00:00:00";
      }
      if (!(this.toDate == undefined)) {
         to =
            this.toDate.getFullYear() +
            "-" +
            (this.toDate.getMonth() + 1) +
            "-" +
            this.toDate.getDate() +
            " 23:59:59";
      }
      this.showSpinner = true;
      this.mwqosdashboardList$ = this.mwqosdashboardService.getMwqosdashboardsByUniqueCodeAndDate(
         this.mwqosdashboard.uniqueCode,
         from,
         to
      );
      this.mwqosdashboardList$
         .pipe(
            catchError((err) => {
               this.alertService.error(err);
               this.showSpinner = false;
               return throwError(err);
            })
         )
         .subscribe((apiResponse) => {
            if (!apiResponse.success) {
               this.alertService.error(apiResponse.message);
               this.showSpinner = false;
               return;
            }
            this.loadMwqosdashboardsIntoArray(apiResponse);
            // the initial full set of data
            // note that we don't need to un-subscribe here as it's a one off data load
            if (this.gridOptions.api) {
               // can be null when tabbing between the examples
               this.gridOptions.api.setRowData(this.mwqosdashboards);
            }
            this.showSpinner = false;
         });
      if (!this.isMobileAgent()) this.gridOptions.api.sizeColumnsToFit();
   }

   /* common for all dashboard */

   searchVendorWiseBarChartByParams() {
      let from = "";
      let to = "";
      if (
         this.vendorWiseBarChartDTO.fromDate == null ||
         this.vendorWiseBarChartDTO.fromDate == undefined
      ) {
         this.vendorWiseBarChartDTO.fromDate = new Date();
         this.vendorWiseBarChartDTO.fromDate.setHours(0, 0, 0);

         from =
            this.vendorWiseBarChartDTO.fromDate.getFullYear() +
            "-" +
            (this.vendorWiseBarChartDTO.fromDate.getMonth() + 1) +
            "-" +
            this.vendorWiseBarChartDTO.fromDate.getDate() +
            " 00:00:00";
      } else {
         from =
            new Date(this.vendorWiseBarChartDTO.fromDate).getFullYear() +
            "-" +
            (new Date(this.vendorWiseBarChartDTO.fromDate).getMonth() + 1) +
            "-" +
            new Date(this.vendorWiseBarChartDTO.fromDate).getDate() +
            "  00:00:00";
      }
      if (
         this.vendorWiseBarChartDTO.toDate == null ||
         this.vendorWiseBarChartDTO.toDate == undefined
      ) {
         this.vendorWiseBarChartDTO.toDate = new Date();
         this.vendorWiseBarChartDTO.toDate.setHours(0, 0, 0);

         to =
            this.vendorWiseBarChartDTO.toDate.getFullYear() +
            "-" +
            (this.vendorWiseBarChartDTO.toDate.getMonth() + 1) +
            "-" +
            this.vendorWiseBarChartDTO.toDate.getDate() +
            " 23:59:59";
      } else {
         to =
            new Date(this.vendorWiseBarChartDTO.toDate).getFullYear() +
            "-" +
            (new Date(this.vendorWiseBarChartDTO.toDate).getMonth() + 1) +
            "-" +
            new Date(this.vendorWiseBarChartDTO.toDate).getDate() +
            " 23:59:59";
      }

      var categoryValueList = "";
      var categoryValueListForGraph = "";
      this.vendorWiseBarChartDTO.categoryName.forEach(function (
         selectedRow,
         index
      ) {
         if (categoryValueList == "") {
            categoryValueList = selectedRow["categoryName"];
            categoryValueListForGraph = '"' + selectedRow["categoryName"] + '"';
         } else {
            categoryValueList += "," + selectedRow["categoryName"];
            categoryValueListForGraph +=
               ',"' + selectedRow["categoryName"] + '"';
         }
      });
      var vendornameList = "";
      this.vendorWiseBarChartDTO.vendorName.forEach((element) => {
         if (vendornameList == "") {
            vendornameList = element["vendorName"];
         } else {
            vendornameList += "," + element["vendorName"];
         }
      });
      /*  var licensenameList = "";
      this.vendorWiseBarChartDTO.licenseName.forEach((element) => {
         if (licensenameList == "") {
            licensenameList = element["licenseName"];
         } else {
            licensenameList += "," + element["licenseName"];
         }
      }); */
      var sitecodeList = "";
      this.vendorWiseBarChartDTO.sitecode.forEach((element) => {
         if (sitecodeList == "") {
            sitecodeList = element["siteCode"];
         } else {
            sitecodeList += "," + element["siteCode"];
         }
      });

      var zoneList = "";

      if (this.vendorWiseBarChartDTO.zoneType == "1") {
         if (
            this.vendorWiseBarChartDTO.zoneListCommercial !== undefined ||
            this.vendorWiseBarChartDTO.zoneListCommercial.length !== 0
         ) {
            this.vendorWiseBarChartDTO.zoneListCommercial.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["commercialZone"];
               } else {
                  zoneList += "," + element["commercialZone"];
               }
            });
         } else {
            this.showMessageBar("Commercial Zone is required");
            return;
         }
      } else if (this.vendorWiseBarChartDTO.zoneType == "2") {
         if (
            this.vendorWiseBarChartDTO.zoneListDistrict !== undefined ||
            this.vendorWiseBarChartDTO.zoneListDistrict.length !== 0
         ) {
            this.vendorWiseBarChartDTO.zoneListDistrict.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["district"];
               } else {
                  zoneList += "," + element["district"];
               }
            });
         } else {
            this.showMessageBar("District is required");
            return;
         }
      } else if (this.vendorWiseBarChartDTO.zoneType == "3") {
         if (
            this.vendorWiseBarChartDTO.zoneListThana !== undefined ||
            this.vendorWiseBarChartDTO.zoneListThana.length !== 0
         ) {
            this.vendorWiseBarChartDTO.zoneListThana.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["thana"];
               } else {
                  zoneList += "," + element["thana"];
               }
            });
         } else {
            this.showMessageBar("Thana is required");
            return;
         }
      } else if (this.vendorWiseBarChartDTO.zoneType == "4") {
         if (
            this.vendorWiseBarChartDTO.zoneListUnion !== undefined ||
            this.vendorWiseBarChartDTO.zoneListUnion.length !== 0
         ) {
            this.vendorWiseBarChartDTO.zoneListUnion.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["unionName"];
               } else {
                  zoneList += "," + element["unionName"];
               }
            });
         } else {
            this.showMessageBar("Union is required");
            return;
         }
      } else if (this.vendorWiseBarChartDTO.zoneType == "5") {
         if (
            this.vendorWiseBarChartDTO.zoneListEdotcoZone !== undefined ||
            this.vendorWiseBarChartDTO.zoneListEdotcoZone.length !== 0
         ) {
            this.vendorWiseBarChartDTO.zoneListEdotcoZone.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["pmfZone"];
               } else {
                  zoneList += "," + element["pmfZone"];
               }
            });
         } else {
            this.showMessageBar("Edotco Zone is required");
            return;
         }
      }

      if (this.vendorWiseBarChartDTO.categoryName.length == 0) {
         this.showMessageBar("Category is required");
         return;
      }
      if (this.vendorWiseBarChartDTO.vendorName.length == 0) {
         this.showMessageBar("Vendor Name is required");
         return;
      }
      /* if (this.vendorWiseBarChartDTO.moduleStatus == "") {
         this.showMessageBar("Status is required");
         return;
      } */
      /*       if (this.vendorWiseBarChartDTO.barChartName == "") {
         this.showMessageBar("Chart Name is required");
         return;
      } */
      if (this.vendorWiseBarChartDTO.trendDays == null) {
         this.showMessageBar("Trend Days is required");
         return;
      }
      if (this.vendorWiseBarChartDTO.esValue == null) {
         this.showMessageBar("ES Value is required");
         return;
      }

      if (this.vendorWiseBarChartDTO.sesValue == null) {
         this.showMessageBar("SES Value is required");
         return;
      }

      if (this.vendorWiseBarChartDTO.uasValue == null) {
         this.showMessageBar("UAS Value is required");
         return;
      }

      var fromDateDiff = new Date(from);
      var toDateDiff = new Date(to);

      var DateDifference = Math.floor(
         (Date.UTC(
            toDateDiff.getFullYear(),
            toDateDiff.getMonth(),
            toDateDiff.getDate()
         ) -
            Date.UTC(
               fromDateDiff.getFullYear(),
               fromDateDiff.getMonth(),
               fromDateDiff.getDate()
            )) /
            (1000 * 60 * 60 * 24)
      );

      if (this.vendorWiseBarChartDTO.trendDays > DateDifference + 1) {
         this.showMessageBar("Trend Days Cannot be Greater Than Date Range");
         return;
      }

      this.finalCategoryList = categoryValueList;
      this.showSpinnerForVendorWiseBarChart = true;

      this.mwrVendorWiseBarChartList$ = this.mwqosdashboardService.getdashboardsBarChartByUniqueCodeAndDateCustom(
         this.mwqosdashboard.uniqueCode,
         from,
         to,
         this.vendorWiseBarChartDTO.zoneType,
         zoneList,
         sitecodeList,
         categoryValueList,
         vendornameList,
         this.vendorWiseBarChartDTO.trendDays,
         this.vendorWiseBarChartDTO.esValue,
         this.vendorWiseBarChartDTO.sesValue,
         this.vendorWiseBarChartDTO.uasValue
      );

      this.mwrVendorWiseBarChartList$.subscribe((apiResponse) => {
         if (!apiResponse.success) {
            this.showSpinnerForVendorWiseBarChart = false;
            this.alertService.error(apiResponse.message);
            return;
         } else {
            this.showSpinnerForVendorWiseBarChart = false;
            this.generateBarDiagramForVendorWise(
               apiResponse.data,
               vendornameList,
               categoryValueList
            );
         }
         this.showSpinner = false;
      });
   }

   searchTopNBarChart() {
      let from = "";
      let to = "";
      if (
         this.topNBarChartDTO.fromDate == null ||
         this.topNBarChartDTO.fromDate == undefined
      ) {
         this.topNBarChartDTO.fromDate = new Date();
         this.topNBarChartDTO.fromDate.setHours(0, 0, 0);

         from =
            this.topNBarChartDTO.fromDate.getFullYear() +
            "-" +
            (this.topNBarChartDTO.fromDate.getMonth() + 1) +
            "-" +
            this.topNBarChartDTO.fromDate.getDate() +
            " 00:00:00";
      } else {
         from =
            new Date(this.topNBarChartDTO.fromDate).getFullYear() +
            "-" +
            (new Date(this.topNBarChartDTO.fromDate).getMonth() + 1) +
            "-" +
            new Date(this.topNBarChartDTO.fromDate).getDate() +
            "  00:00:00";
      }
      if (
         this.topNBarChartDTO.toDate == null ||
         this.topNBarChartDTO.toDate == undefined
      ) {
         this.topNBarChartDTO.toDate = new Date();
         this.topNBarChartDTO.toDate.setHours(0, 0, 0);

         to =
            this.topNBarChartDTO.toDate.getFullYear() +
            "-" +
            (this.topNBarChartDTO.toDate.getMonth() + 1) +
            "-" +
            this.topNBarChartDTO.toDate.getDate() +
            " 23:59:59";
      } else {
         to =
            new Date(this.topNBarChartDTO.toDate).getFullYear() +
            "-" +
            (new Date(this.topNBarChartDTO.toDate).getMonth() + 1) +
            "-" +
            new Date(this.topNBarChartDTO.toDate).getDate() +
            " 23:59:59";
      }

      var categoryValueList = "";
      var categoryValueListForGraph = "";
      this.topNBarChartDTO.categoryName.forEach(function (selectedRow, index) {
         if (categoryValueList == "") {
            categoryValueList = selectedRow["categoryName"];
            categoryValueListForGraph = '"' + selectedRow["categoryName"] + '"';
         } else {
            categoryValueList += "," + selectedRow["categoryName"];
            categoryValueListForGraph +=
               ',"' + selectedRow["categoryName"] + '"';
         }
      });
      var vendornameList = "";
      this.topNBarChartDTO.vendorName.forEach((element) => {
         if (vendornameList == "") {
            vendornameList = element["vendorName"];
         } else {
            vendornameList += "," + element["vendorName"];
         }
      });
      /* var licensenameList = "";
      this.topNBarChartDTO.licenseName.forEach((element) => {
         if (licensenameList == "") {
            licensenameList = element["licenseName"];
         } else {
            licensenameList += "," + element["licenseName"];
         }
      }); */

      /* var topNValueList = "";
      this.topNBarChartDTO.topNValue.forEach((element) => {
         if (topNValueList == "") {
            topNValueList = element["dayNumber"];
         } else {
            topNValueList += "," + element["dayNumber"];
         }
      }); */

      var sitecodeList = "";
      this.topNBarChartDTO.sitecode.forEach((element) => {
         if (sitecodeList == "") {
            sitecodeList = element["siteCode"];
         } else {
            sitecodeList += "," + element["siteCode"];
         }
      });

      var zoneList = "";

      if (this.topNBarChartDTO.zoneType == "1") {
         if (
            this.topNBarChartDTO.zoneListCommercial !== undefined ||
            this.topNBarChartDTO.zoneListCommercial.length !== 0
         ) {
            this.topNBarChartDTO.zoneListCommercial.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["commercialZone"];
               } else {
                  zoneList += "," + element["commercialZone"];
               }
            });
         } else {
            this.showMessageBar("Commercial Zone is required");
            return;
         }
      } else if (this.topNBarChartDTO.zoneType == "2") {
         if (
            this.topNBarChartDTO.zoneListDistrict !== undefined ||
            this.topNBarChartDTO.zoneListDistrict.length !== 0
         ) {
            this.topNBarChartDTO.zoneListDistrict.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["district"];
               } else {
                  zoneList += "," + element["district"];
               }
            });
         } else {
            this.showMessageBar("District is required");
            return;
         }
      } else if (this.topNBarChartDTO.zoneType == "3") {
         if (
            this.topNBarChartDTO.zoneListThana !== undefined ||
            this.topNBarChartDTO.zoneListThana.length !== 0
         ) {
            this.topNBarChartDTO.zoneListThana.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["thana"];
               } else {
                  zoneList += "," + element["thana"];
               }
            });
         } else {
            this.showMessageBar("Thana is required");
            return;
         }
      } else if (this.topNBarChartDTO.zoneType == "4") {
         if (
            this.topNBarChartDTO.zoneListUnion !== undefined ||
            this.topNBarChartDTO.zoneListUnion.length !== 0
         ) {
            this.topNBarChartDTO.zoneListUnion.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["unionName"];
               } else {
                  zoneList += "," + element["unionName"];
               }
            });
         } else {
            this.showMessageBar("Union is required");
            return;
         }
      } else if (this.topNBarChartDTO.zoneType == "5") {
         if (
            this.topNBarChartDTO.zoneListEdotcoZone !== undefined ||
            this.topNBarChartDTO.zoneListEdotcoZone.length !== 0
         ) {
            this.topNBarChartDTO.zoneListEdotcoZone.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["pmfZone"];
               } else {
                  zoneList += "," + element["pmfZone"];
               }
            });
         } else {
            this.showMessageBar("Edotco Zone is required");
            return;
         }
      }

      if (this.topNBarChartDTO.categoryName.length == 0) {
         this.showMessageBar("Category is required");
         return;
      }
      if (this.topNBarChartDTO.vendorName.length == 0) {
         this.showMessageBar("Vendor Name is required");
         return;
      }

      /* if (this.topNBarChartDTO.moduleStatus == "") {
         this.showMessageBar("Status is required");
         return;
      } */
      /*       if (this.topNBarChartDTO.barChartName == "") {
         this.showMessageBar("Chart Name is required");
         return;
      } */
      if (this.topNBarChartDTO.esValue == null) {
         this.showMessageBar("ES Value is required");
         return;
      }

      if (this.topNBarChartDTO.sesValue == null) {
         this.showMessageBar("SES Value is required");
         return;
      }

      if (this.topNBarChartDTO.uasValue == null) {
         this.showMessageBar("UAS Value is required");
         return;
      }
      if (this.topNBarChartDTO.trendDays == null) {
         this.showMessageBar("Trend Days is required");
         return;
      }
      if (this.topNBarChartDTO.topNValue == null) {
         this.showMessageBar("Top N Value is required");
         return;
      }

      var fromDateDiff = new Date(from);
      var toDateDiff = new Date(to);

      var DateDifference = Math.floor(
         (Date.UTC(
            toDateDiff.getFullYear(),
            toDateDiff.getMonth(),
            toDateDiff.getDate()
         ) -
            Date.UTC(
               fromDateDiff.getFullYear(),
               fromDateDiff.getMonth(),
               fromDateDiff.getDate()
            )) /
            (1000 * 60 * 60 * 24)
      );

      if (this.topNBarChartDTO.trendDays > DateDifference + 1) {
         this.showMessageBar("Trend Days Cannot be Greater Than Date Range");
         return;
      }

      this.finalCategoryList = categoryValueList;
      this.showSpinnerForTopNBarChart = true;

      this.mwTopNList$ = this.mwqosdashboardService.getMwTopNBarChart(
         this.mwqosdashboard.uniqueCode,
         from,
         to,
         this.topNBarChartDTO.zoneType,
         zoneList,
         sitecodeList,
         categoryValueList,
         vendornameList,
         this.topNBarChartDTO.topNValue,
         this.topNBarChartDTO.esValue,
         this.topNBarChartDTO.sesValue,
         this.topNBarChartDTO.uasValue,
         this.topNBarChartDTO.trendDays
      );

      this.mwTopNList$.subscribe((apiResponse) => {
         if (!apiResponse.success) {
            this.showSpinnerForTopNBarChart = false;
            this.alertService.error(apiResponse.message);
            return;
         } else {
            this.showSpinnerForTopNBarChart = false;
            this.generateTopNBarChart(
               apiResponse.data,
               vendornameList,
               categoryValueList
            );
         }
      });
   }

   searchByParamsForZoneWisePieChart() {
      let from = "";
      let to = "";
      if (
         this.zonewisePiechartDTO.fromDate == null ||
         this.zonewisePiechartDTO.fromDate == undefined
      ) {
         this.zonewisePiechartDTO.fromDate = new Date();
         this.zonewisePiechartDTO.fromDate.setHours(0, 0, 0);

         from =
            this.zonewisePiechartDTO.fromDate.getFullYear() +
            "-" +
            (this.zonewisePiechartDTO.fromDate.getMonth() + 1) +
            "-" +
            this.zonewisePiechartDTO.fromDate.getDate() +
            " 00:00:00";
      } else {
         from =
            new Date(this.zonewisePiechartDTO.fromDate).getFullYear() +
            "-" +
            (new Date(this.zonewisePiechartDTO.fromDate).getMonth() + 1) +
            "-" +
            new Date(this.zonewisePiechartDTO.fromDate).getDate() +
            "  00:00:00";
      }
      if (
         this.zonewisePiechartDTO.toDate == null ||
         this.zonewisePiechartDTO.toDate == undefined
      ) {
         this.zonewisePiechartDTO.toDate = new Date();
         this.zonewisePiechartDTO.toDate.setHours(0, 0, 0);

         to =
            this.zonewisePiechartDTO.toDate.getFullYear() +
            "-" +
            (this.zonewisePiechartDTO.toDate.getMonth() + 1) +
            "-" +
            this.zonewisePiechartDTO.toDate.getDate() +
            " 23:59:59";
      } else {
         to =
            new Date(this.zonewisePiechartDTO.toDate).getFullYear() +
            "-" +
            (new Date(this.zonewisePiechartDTO.toDate).getMonth() + 1) +
            "-" +
            new Date(this.zonewisePiechartDTO.toDate).getDate() +
            " 23:59:59";
      }

      var categoryValueList = "";
      var categoryValueListForGraph = "";
      this.zonewisePiechartDTO.categoryName.forEach(function (
         selectedRow,
         index
      ) {
         if (categoryValueList == "") {
            categoryValueList = selectedRow["categoryName"];
            categoryValueListForGraph = '"' + selectedRow["categoryName"] + '"';
         } else {
            categoryValueList += "," + selectedRow["categoryName"];
            categoryValueListForGraph +=
               ',"' + selectedRow["categoryName"] + '"';
         }
      });
      var vendornameList = "";
      this.zonewisePiechartDTO.vendorName.forEach((element) => {
         if (vendornameList == "") {
            vendornameList = element["vendorName"];
         } else {
            vendornameList += "," + element["vendorName"];
         }
      });
      /*   var licensenameList = "";
      this.zonewisePiechartDTO.licenseName.forEach((element) => {
         if (licensenameList == "") {
            licensenameList = element["licenseName"];
         } else {
            licensenameList += "," + element["licenseName"];
         }
      }); */
      var sitecodeList = "";
      this.zonewisePiechartDTO.sitecode.forEach((element) => {
         if (sitecodeList == "") {
            sitecodeList = element["siteCode"];
         } else {
            sitecodeList += "," + element["siteCode"];
         }
      });

      /* var zoneList = "";
    
    if(this.zonewisePiechartDTO.zoneType == "1")
    {
      if (
        this.zonewisePiechartDTO.zoneListCommercial !== undefined ||
        this.zonewisePiechartDTO.zoneListCommercial.length !== 0
      ) {
        this.zonewisePiechartDTO.zoneListCommercial.forEach((element) => {
          if (zoneList == "") {
            zoneList = element["commercialZone"];
          } else {
            zoneList += "," + element["commercialZone"];
          }
        });
      }
      else
      {
        this.showMessageBar("Commercial Zone is required");
        return;
      }
    }
    else if(this.zonewisePiechartDTO.zoneType=="2")
    {
      if (
        this.zonewisePiechartDTO.zoneListDistrict !== undefined ||
        this.zonewisePiechartDTO.zoneListDistrict.length !== 0
      ) {
        this.zonewisePiechartDTO.zoneListDistrict.forEach((element) => {
          if (zoneList == "") {
            zoneList = element["district"];
          } else {
            zoneList += "," + element["district"];
          }
        });
      }
      else
      {
        this.showMessageBar("District is required");
        return;
      }
    }
    else if(this.zonewisePiechartDTO.zoneType=="3")
    {
      if (
        this.zonewisePiechartDTO.zoneListThana !== undefined ||
        this.zonewisePiechartDTO.zoneListThana.length !== 0
      ) {
        this.zonewisePiechartDTO.zoneListThana.forEach((element) => {
          if (zoneList == "") {
            zoneList = element["thana"];
          } else {
            zoneList += "," + element["thana"];
          }
        });
      }
      
      else
      {
        this.showMessageBar("Thana is required");
        return;
      } 
    }
    else if(this.zonewisePiechartDTO.zoneType=="4")
    {
      if (
        this.zonewisePiechartDTO.zoneListUnion !== undefined ||
        this.zonewisePiechartDTO.zoneListUnion.length !== 0
      ) {
        this.zonewisePiechartDTO.zoneListUnion.forEach((element) => {
          if (zoneList == "") {
            zoneList = element["unionName"];
          } else {
            zoneList += "," + element["unionName"];
          }
        });
      }
      else
      {
        this.showMessageBar("Union is required");
        return;
      }
    }
    else if(this.zonewisePiechartDTO.zoneType=="5")
    {
      if (
        this.zonewisePiechartDTO.zoneListEdotcoZone !== undefined ||
        this.zonewisePiechartDTO.zoneListEdotcoZone.length !== 0
      ) {
        this.zonewisePiechartDTO.zoneListEdotcoZone.forEach((element) => {
          if (zoneList == "") {
            zoneList = element["pmfZone"];
          } else {
            zoneList += "," + element["pmfZone"];
          }
        });
      }
      else
      {
        this.showMessageBar("Edotco Zone is required");
        return;
      }
    } */

      if (this.zonewisePiechartDTO.categoryName.length == 0) {
         this.showMessageBar("Category is required");
         return;
      }
      if (this.zonewisePiechartDTO.vendorName.length == 0) {
         this.showMessageBar("Vendor Name is required");
         return;
      }
      // if (this.zonewisePiechartDTO.daysInput.length == 0) {
      //   this.showMessageBar("Top-N is required");
      //   return;
      // }
      /* if (this.zonewisePiechartDTO.moduleStatus == "") {
         this.showMessageBar("Status is required");
         return;
      } */
      /* if (this.zonewisePiechartDTO.dateSearchType == "") {
         this.showMessageBar("Day Search is required");
         return;
      } */
      /*       if (this.zonewisePiechartDTO.barChartName == "") {
         this.showMessageBar("Chart Name is required");
         return;
      } */
      if (this.zonewisePiechartDTO.trendDays == null) {
         this.showMessageBar("Trend Days is required");
         return;
      }
      if (this.zonewisePiechartDTO.esValue == null) {
         this.showMessageBar("ES Value is required");
         return;
      }

      if (this.zonewisePiechartDTO.sesValue == null) {
         this.showMessageBar("SES Value is required");
         return;
      }

      if (this.zonewisePiechartDTO.uasValue == null) {
         this.showMessageBar("UAS Value is required");
         return;
      }

      var fromDateDiff = new Date(from);
      var toDateDiff = new Date(to);

      var DateDifference = Math.floor(
         (Date.UTC(
            toDateDiff.getFullYear(),
            toDateDiff.getMonth(),
            toDateDiff.getDate()
         ) -
            Date.UTC(
               fromDateDiff.getFullYear(),
               fromDateDiff.getMonth(),
               fromDateDiff.getDate()
            )) /
            (1000 * 60 * 60 * 24)
      );

      if (this.zonewisePiechartDTO.trendDays > DateDifference + 1) {
         this.showMessageBar("Trend Days Cannot be Greater Than Date Range");
         return;
      }

      this.finalCategoryList = categoryValueList;

      this.showSpinnerForZoneWisePieChart = true;

      this.mwZoneAlarmList = this.mwqosdashboardService.getZoneWisePieChart(
         this.mwqosdashboard.uniqueCode,
         from,
         to,
         sitecodeList,
         this.finalCategoryList,
         vendornameList,
         this.zonewisePiechartDTO.trendDays,
         this.zonewisePiechartDTO.esValue,
         this.zonewisePiechartDTO.sesValue,
         this.zonewisePiechartDTO.uasValue
      );

      this.mwZoneAlarmList
         .pipe(
            catchError((err) => {
               this.alertService.error(err);
               this.showSpinnerForZoneWisePieChart = false;
               return throwError(err);
            })
         )
         .subscribe((apiResponse) => {
            if (!apiResponse.success) {
               this.showSpinnerForZoneWisePieChart = false;
               return;
            } else {
               this.showSpinnerForZoneWisePieChart = false;
               this.generateZoneWisePieChart(apiResponse.data);
            }
         });
   }

   showCategoryWisePieChart() {
      let from = "";
      let to = "";
      if (
         this.singleZoneMultiCategoryWisePiechartDTO.fromDate == null ||
         this.singleZoneMultiCategoryWisePiechartDTO.fromDate == undefined
      ) {
         this.singleZoneMultiCategoryWisePiechartDTO.fromDate = new Date();
         this.singleZoneMultiCategoryWisePiechartDTO.fromDate.setHours(0, 0, 0);

         from =
            this.singleZoneMultiCategoryWisePiechartDTO.fromDate.getFullYear() +
            "-" +
            (this.singleZoneMultiCategoryWisePiechartDTO.fromDate.getMonth() +
               1) +
            "-" +
            this.singleZoneMultiCategoryWisePiechartDTO.fromDate.getDate() +
            " 00:00:00";
      } else {
         from =
            new Date(
               this.singleZoneMultiCategoryWisePiechartDTO.fromDate
            ).getFullYear() +
            "-" +
            (new Date(
               this.singleZoneMultiCategoryWisePiechartDTO.fromDate
            ).getMonth() +
               1) +
            "-" +
            new Date(
               this.singleZoneMultiCategoryWisePiechartDTO.fromDate
            ).getDate() +
            "  00:00:00";
      }
      if (
         this.singleZoneMultiCategoryWisePiechartDTO.toDate == null ||
         this.singleZoneMultiCategoryWisePiechartDTO.toDate == undefined
      ) {
         this.singleZoneMultiCategoryWisePiechartDTO.toDate = new Date();
         this.singleZoneMultiCategoryWisePiechartDTO.toDate.setHours(0, 0, 0);

         to =
            this.singleZoneMultiCategoryWisePiechartDTO.toDate.getFullYear() +
            "-" +
            (this.singleZoneMultiCategoryWisePiechartDTO.toDate.getMonth() +
               1) +
            "-" +
            this.singleZoneMultiCategoryWisePiechartDTO.toDate.getDate() +
            " 23:59:59";
      } else {
         to =
            new Date(
               this.singleZoneMultiCategoryWisePiechartDTO.toDate
            ).getFullYear() +
            "-" +
            (new Date(
               this.singleZoneMultiCategoryWisePiechartDTO.toDate
            ).getMonth() +
               1) +
            "-" +
            new Date(
               this.singleZoneMultiCategoryWisePiechartDTO.toDate
            ).getDate() +
            " 23:59:59";
      }

      var categoryValueList = "";
      var categoryValueListForGraph = "";
      this.singleZoneMultiCategoryWisePiechartDTO.categoryName.forEach(
         function (selectedRow, index) {
            if (categoryValueList == "") {
               categoryValueList = selectedRow["categoryName"];
               categoryValueListForGraph =
                  '"' + selectedRow["categoryName"] + '"';
            } else {
               categoryValueList += "," + selectedRow["categoryName"];
               categoryValueListForGraph +=
                  ',"' + selectedRow["categoryName"] + '"';
            }
         }
      );
      var vendornameList = "";
      this.singleZoneMultiCategoryWisePiechartDTO.vendorName.forEach(
         (element) => {
            if (vendornameList == "") {
               vendornameList = element["vendorName"];
            } else {
               vendornameList += "," + element["vendorName"];
            }
         }
      );
      /*  var licensenameList = "";
      this.singleZoneMultiCategoryWisePiechartDTO.licenseName.forEach(
         (element) => {
            if (licensenameList == "") {
               licensenameList = element["licenseName"];
            } else {
               licensenameList += "," + element["licenseName"];
            }
         }
      ); */
      var sitecodeList = "";
      this.singleZoneMultiCategoryWisePiechartDTO.sitecode.forEach(
         (element) => {
            if (sitecodeList == "") {
               sitecodeList = element["siteCode"];
            } else {
               sitecodeList += "," + element["siteCode"];
            }
         }
      );

      var zoneList = "";

      if (this.singleZoneMultiCategoryWisePiechartDTO.zoneType == "1") {
         if (
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListCommercial !==
               undefined ||
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListCommercial
               .length !== 0
         ) {
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListCommercial.forEach(
               (element) => {
                  if (zoneList == "") {
                     zoneList = element["commercialZone"];
                  } else {
                     zoneList += "," + element["commercialZone"];
                  }
               }
            );
         } else {
            this.showMessageBar("Commercial Zone is required");
            return;
         }
      } else if (this.singleZoneMultiCategoryWisePiechartDTO.zoneType == "2") {
         if (
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListDistrict !==
               undefined ||
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListDistrict
               .length !== 0
         ) {
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListDistrict.forEach(
               (element) => {
                  if (zoneList == "") {
                     zoneList = element["district"];
                  } else {
                     zoneList += "," + element["district"];
                  }
               }
            );
         } else {
            this.showMessageBar("District is required");
            return;
         }
      } else if (this.singleZoneMultiCategoryWisePiechartDTO.zoneType == "3") {
         if (
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListThana !==
               undefined ||
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListThana.length !==
               0
         ) {
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListThana.forEach(
               (element) => {
                  if (zoneList == "") {
                     zoneList = element["thana"];
                  } else {
                     zoneList += "," + element["thana"];
                  }
               }
            );
         } else {
            this.showMessageBar("Thana is required");
            return;
         }
      } else if (this.singleZoneMultiCategoryWisePiechartDTO.zoneType == "4") {
         if (
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListUnion !==
               undefined ||
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListUnion.length !==
               0
         ) {
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListUnion.forEach(
               (element) => {
                  if (zoneList == "") {
                     zoneList = element["unionName"];
                  } else {
                     zoneList += "," + element["unionName"];
                  }
               }
            );
         } else {
            this.showMessageBar("Union is required");
            return;
         }
      } else if (this.singleZoneMultiCategoryWisePiechartDTO.zoneType == "5") {
         if (
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListEdotcoZone !==
               undefined ||
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListEdotcoZone
               .length !== 0
         ) {
            this.singleZoneMultiCategoryWisePiechartDTO.zoneListEdotcoZone.forEach(
               (element) => {
                  if (zoneList == "") {
                     zoneList = element["pmfZone"];
                  } else {
                     zoneList += "," + element["pmfZone"];
                  }
               }
            );
         } else {
            this.showMessageBar("Edotco Zone is required");
            return;
         }
      }

      if (
         this.singleZoneMultiCategoryWisePiechartDTO.categoryName.length == 0
      ) {
         this.showMessageBar("Category is required");
         return;
      }
      if (this.singleZoneMultiCategoryWisePiechartDTO.vendorName.length == 0) {
         this.showMessageBar("Vendor Name is required");
         return;
      }
      // if (this.singleZoneMultiCategoryWisePiechartDTO.daysInput.length == 0) {
      //   this.showMessageBar("Top-N is required");
      //   return;
      // }
      /* if (this.singleZoneMultiCategoryWisePiechartDTO.moduleStatus == "") {
         this.showMessageBar("Status is required");
         return;
      } */
      /* if (this.singleZoneMultiCategoryWisePiechartDTO.barChartName == "") {
         this.showMessageBar("Chart Name is required");
         return;
      } */
      /* if (this.singleZoneMultiCategoryWisePiechartDTO.dateSearchType == "") {
         this.showMessageBar("Day Search is required");
         return;
      } */
      /*  console.log(
         "****************** this.singleZoneMultiCategoryWisePiechartDTO.trendDays **************"
      );
      console.log(this.singleZoneMultiCategoryWisePiechartDTO.trendDays);
      console.log(
         "****************************************************************************************"
      ); */

      if (this.singleZoneMultiCategoryWisePiechartDTO.trendDays == null) {
         this.showMessageBar("Trend Days is required");
         return;
      }
      if (this.singleZoneMultiCategoryWisePiechartDTO.esValue == null) {
         this.showMessageBar("ES Value is required");
         return;
      }

      if (this.singleZoneMultiCategoryWisePiechartDTO.sesValue == null) {
         this.showMessageBar("SES Value is required");
         return;
      }

      if (this.singleZoneMultiCategoryWisePiechartDTO.uasValue == null) {
         this.showMessageBar("UAS Value is required");
         return;
      }

      var fromDateDiff = new Date(from);
      var toDateDiff = new Date(to);

      var DateDifference = Math.floor(
         (Date.UTC(
            toDateDiff.getFullYear(),
            toDateDiff.getMonth(),
            toDateDiff.getDate()
         ) -
            Date.UTC(
               fromDateDiff.getFullYear(),
               fromDateDiff.getMonth(),
               fromDateDiff.getDate()
            )) /
            (1000 * 60 * 60 * 24)
      );

      if (
         this.singleZoneMultiCategoryWisePiechartDTO.trendDays >
         DateDifference + 1
      ) {
         this.showMessageBar("Trend Days Cannot be Greater Than Date Range");
         return;
      }

      this.finalCategoryList = categoryValueList;
      this.showSpinnerForCategoryWisePieChart = true;

      this.mwCategoryWisePieChart = this.mwqosdashboardService.getCategoryWisePieChart(
         this.mwqosdashboard.uniqueCode,
         from,
         to,
         this.singleZoneMultiCategoryWisePiechartDTO.zoneType,
         zoneList,
         sitecodeList,
         this.finalCategoryList,
         vendornameList,
         this.singleZoneMultiCategoryWisePiechartDTO.trendDays,
         this.singleZoneMultiCategoryWisePiechartDTO.esValue,
         this.singleZoneMultiCategoryWisePiechartDTO.sesValue,
         this.singleZoneMultiCategoryWisePiechartDTO.uasValue
      );

      this.mwCategoryWisePieChart
         .pipe(
            catchError((err) => {
               this.alertService.error(err);
               this.showSpinnerForCategoryWisePieChart = false;
               return throwError(err);
            })
         )
         .subscribe((apiResponse) => {
            if (!apiResponse.success) {
               this.alertService.error(apiResponse.message);
               this.showSpinnerForCategoryWisePieChart = false;
               return;
            } else {
               this.showSpinnerForCategoryWisePieChart = false;
               this.generateSingleZoneMultiCategoryPieChart(
                  apiResponse.data,
                  categoryValueList
               );
            }
         });
   }

   showTrajectory() {
      let from = "";
      let to = "";
      if (
         this.trajectoryAnalysisDTO.fromDate == null ||
         this.trajectoryAnalysisDTO.fromDate == undefined
      ) {
         this.trajectoryAnalysisDTO.fromDate = new Date();
         this.trajectoryAnalysisDTO.fromDate.setHours(0, 0, 0);

         from =
            this.trajectoryAnalysisDTO.fromDate.getFullYear() +
            "-" +
            (this.trajectoryAnalysisDTO.fromDate.getMonth() + 1) +
            "-" +
            this.trajectoryAnalysisDTO.fromDate.getDate() +
            " 00:00:00";
      } else {
         from =
            new Date(this.trajectoryAnalysisDTO.fromDate).getFullYear() +
            "-" +
            (new Date(this.trajectoryAnalysisDTO.fromDate).getMonth() + 1) +
            "-" +
            new Date(this.trajectoryAnalysisDTO.fromDate).getDate() +
            "  00:00:00";
      }
      if (
         this.trajectoryAnalysisDTO.toDate == null ||
         this.trajectoryAnalysisDTO.toDate == undefined
      ) {
         this.trajectoryAnalysisDTO.toDate = new Date();
         this.trajectoryAnalysisDTO.toDate.setHours(0, 0, 0);

         to =
            this.trajectoryAnalysisDTO.toDate.getFullYear() +
            "-" +
            (this.trajectoryAnalysisDTO.toDate.getMonth() + 1) +
            "-" +
            this.trajectoryAnalysisDTO.toDate.getDate() +
            " 23:59:59";
      } else {
         to =
            new Date(this.trajectoryAnalysisDTO.toDate).getFullYear() +
            "-" +
            (new Date(this.trajectoryAnalysisDTO.toDate).getMonth() + 1) +
            "-" +
            new Date(this.trajectoryAnalysisDTO.toDate).getDate() +
            " 23:59:59";
      }

      var categoryValueList = "";
      var categoryValueListForGraph = "";
      this.trajectoryAnalysisDTO.categoryName.forEach(function (
         selectedRow,
         index
      ) {
         if (categoryValueList == "") {
            categoryValueList = selectedRow["categoryName"];
            categoryValueListForGraph = '"' + selectedRow["categoryName"] + '"';
         } else {
            categoryValueList += "," + selectedRow["categoryName"];
            categoryValueListForGraph +=
               ',"' + selectedRow["categoryName"] + '"';
         }
      });
      var vendornameList = "";
      this.trajectoryAnalysisDTO.vendorName.forEach((element) => {
         if (vendornameList == "") {
            vendornameList = element["vendorName"];
         } else {
            vendornameList += "," + element["vendorName"];
         }
      });
      /*   var licensenameList = "";
      this.trajectoryAnalysisDTO.licenseName.forEach((element) => {
         if (licensenameList == "") {
            licensenameList = element["licenseName"];
         } else {
            licensenameList += "," + element["licenseName"];
         }
      }); */
      var daysInputTrendList = "";
      this.trajectoryAnalysisDTO.daysInput.forEach((element) => {
         if (daysInputTrendList == "") {
            daysInputTrendList = element["dayInputTrend"];
         } else {
            daysInputTrendList += "," + element["dayInputTrend"];
         }
      });

      var sitecodeList = "";
      this.trajectoryAnalysisDTO.sitecode.forEach((element) => {
         if (sitecodeList == "") {
            sitecodeList = element["siteCode"];
         } else {
            sitecodeList += "," + element["siteCode"];
         }
      });

      var zoneList = "";

      if (this.trajectoryAnalysisDTO.zoneType == "1") {
         if (
            this.trajectoryAnalysisDTO.zoneListCommercial !== undefined ||
            this.trajectoryAnalysisDTO.zoneListCommercial.length !== 0
         ) {
            this.trajectoryAnalysisDTO.zoneListCommercial.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["commercialZone"];
               } else {
                  zoneList += "," + element["commercialZone"];
               }
            });
         } else {
            this.showMessageBar("Commercial Zone is required");
            return;
         }
      } else if (this.trajectoryAnalysisDTO.zoneType == "2") {
         if (
            this.trajectoryAnalysisDTO.zoneListDistrict !== undefined ||
            this.trajectoryAnalysisDTO.zoneListDistrict.length !== 0
         ) {
            this.trajectoryAnalysisDTO.zoneListDistrict.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["district"];
               } else {
                  zoneList += "," + element["district"];
               }
            });
         } else {
            this.showMessageBar("District is required");
            return;
         }
      } else if (this.trajectoryAnalysisDTO.zoneType == "3") {
         if (
            this.trajectoryAnalysisDTO.zoneListThana !== undefined ||
            this.trajectoryAnalysisDTO.zoneListThana.length !== 0
         ) {
            this.trajectoryAnalysisDTO.zoneListThana.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["thana"];
               } else {
                  zoneList += "," + element["thana"];
               }
            });
         } else {
            this.showMessageBar("Thana is required");
            return;
         }
      } else if (this.trajectoryAnalysisDTO.zoneType == "4") {
         if (
            this.trajectoryAnalysisDTO.zoneListUnion !== undefined ||
            this.trajectoryAnalysisDTO.zoneListUnion.length !== 0
         ) {
            this.trajectoryAnalysisDTO.zoneListUnion.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["unionName"];
               } else {
                  zoneList += "," + element["unionName"];
               }
            });
         } else {
            this.showMessageBar("Union is required");
            return;
         }
      } else if (this.trajectoryAnalysisDTO.zoneType == "5") {
         if (
            this.trajectoryAnalysisDTO.zoneListEdotcoZone !== undefined ||
            this.trajectoryAnalysisDTO.zoneListEdotcoZone.length !== 0
         ) {
            this.trajectoryAnalysisDTO.zoneListEdotcoZone.forEach((element) => {
               if (zoneList == "") {
                  zoneList = element["pmfZone"];
               } else {
                  zoneList += "," + element["pmfZone"];
               }
            });
         } else {
            this.showMessageBar("Edotco Zone is required");
            return;
         }
      }

      if (this.trajectoryAnalysisDTO.categoryName.length == 0) {
         this.showMessageBar("Category is required");
         return;
      }
      if (this.trajectoryAnalysisDTO.vendorName.length == 0) {
         this.showMessageBar("Vendor Name is required");
         return;
      }
      if (this.trajectoryAnalysisDTO.esValue == null) {
         this.showMessageBar("ES Value is required");
         return;
      }

      if (this.trajectoryAnalysisDTO.sesValue == null) {
         this.showMessageBar("SES Value is required");
         return;
      }

      if (this.trajectoryAnalysisDTO.uasValue == null) {
         this.showMessageBar("UAS Value is required");
         return;
      }
      /* if (this.trajectoryAnalysisDTO.daysInput.length == 0) {
        this.showMessageBar("Top-N is required");
        return;
      } */
      /* if (this.trajectoryAnalysisDTO.moduleStatus == "") {
         this.showMessageBar("Status is required");
         return;
      } */
      /*       if (this.trajectoryAnalysisDTO.barChartName == "") {
         this.showMessageBar("Chart Name is required");
         return;
      } */

      if (this.trajectoryAnalysisDTO.dateSearchType == "") {
         this.showMessageBar("Day Search is required");
         return;
      }
      if (this.trajectoryAnalysisDTO.trendDays == null) {
         this.showMessageBar("Trend Days is required");
         return;
      }
      // trend days validation
      if (
         this.trajectoryAnalysisDTO.trendDays > 1 &&
         this.trajectoryAnalysisDTO.dateSearchType == "Daily"
      ) {
         this.showMessageBar(
            "Invalid input of Trend Days For Daily Trajectory"
         );
         return;
      }
      if (
         this.trajectoryAnalysisDTO.trendDays > 7 &&
         this.trajectoryAnalysisDTO.dateSearchType == "Weekly"
      ) {
         this.showMessageBar(
            "Invalid input of Trend Days For Weekly Trajectory"
         );
         return;
      }
      if (
         this.trajectoryAnalysisDTO.trendDays > 30 &&
         this.trajectoryAnalysisDTO.dateSearchType == "Monthly"
      ) {
         this.showMessageBar(
            "Invalid input of Trend Days For Monthly Trajectory"
         );
         return;
      }

      var fromDateDiff = new Date(from);
      var toDateDiff = new Date(to);

      var DateDifference = Math.floor(
         (Date.UTC(
            toDateDiff.getFullYear(),
            toDateDiff.getMonth(),
            toDateDiff.getDate()
         ) -
            Date.UTC(
               fromDateDiff.getFullYear(),
               fromDateDiff.getMonth(),
               fromDateDiff.getDate()
            )) /
            (1000 * 60 * 60 * 24)
      );

      if (this.trajectoryAnalysisDTO.trendDays > DateDifference + 1) {
         this.showMessageBar("Trend Days Cannot be Greater Than Date Range");
         return;
      }

      this.finalCategoryList = categoryValueList;
      this.showSpinnerForTrajectory = true;

      this.mwTrajectoryList = this.mwqosdashboardService.getTrajectoryAnalysis(
         this.mwqosdashboard.uniqueCode,
         from,
         to,
         this.trajectoryAnalysisDTO.zoneType,
         zoneList,
         sitecodeList,
         this.finalCategoryList,
         vendornameList,
         this.trajectoryAnalysisDTO.dateSearchType,
         this.trajectoryAnalysisDTO.trendDays,
         this.trajectoryAnalysisDTO.esValue,
         this.trajectoryAnalysisDTO.sesValue,
         this.trajectoryAnalysisDTO.uasValue
      );
      this.mwTrajectoryList
         .pipe(
            catchError((err) => {
               this.alertService.error(err);
               this.showSpinnerForTrajectory = false;
               return throwError(err);
            })
         )
         .subscribe((apiResponse) => {
            if (!apiResponse.success) {
               this.alertService.error(apiResponse.message);
               this.showSpinnerForTrajectory = false;
               return;
            } else {
               this.showSpinnerForTrajectory = false;
               this.generateTrajectoryAnalysis(
                  apiResponse.data,
                  this.finalCategoryList
               );
            }
         });
   }

   /* end for this time */

   downloadReport() {
      if (this.toDate < this.fromDate) {
         this.alertService.error("Wrong Input for Calender Date Range");
         return;
      }
      let from = "";
      let to = "";
      let fromTime = "00:00:00";
      let toTime = "23:59:59";
      if (!(this.fromDate == undefined)) {
         from =
            this.fromDate.getFullYear() +
            "-" +
            (this.fromDate.getMonth() + 1) +
            "-" +
            this.fromDate.getDate();
         fromTime =
            this.fromDate.getHours() +
            ":" +
            this.fromDate.getMinutes() +
            ":" +
            this.fromDate.getSeconds();
      }
      if (!(this.toDate == undefined)) {
         to =
            this.toDate.getFullYear() +
            "-" +
            (this.toDate.getMonth() + 1) +
            "-" +
            this.toDate.getDate();
         toTime =
            this.toDate.getHours() +
            ":" +
            this.toDate.getMinutes() +
            ":" +
            this.toDate.getSeconds();
      }
      if (from.length > 0 || to.length > 0) {
         this.showSpinner = true;
         let finalRequestParam =
            "?uniqueCode=" +
            this.mwqosdashboard.uniqueCode +
            "&from=" +
            from +
            "&to=" +
            to +
            "&fromTime=" +
            fromTime +
            "&toTime=" +
            toTime;
         this.mwqosdashboardService.downloadReport(finalRequestParam).subscribe(
            (response) => {
               let blob: any = new Blob([response.blob()], {
                  type: "text/csv; charset=utf-8",
               });
               saveAs(blob, "mwqosdashboard Report.csv");
               this.showSpinner = false;
            },
            (err) => {
               console.log("Error downloading the file");
               this.alertService.error(err);
               this.showSpinner = false;
            },
            () => console.info("File downloaded successfully")
         );
      } else {
         this.showSpinner = true;
         let finalRequestParam1 =
            "?uniqueCode=" + this.mwqosdashboard.uniqueCode;
         this.mwqosdashboardService
            .downloadReport(finalRequestParam1)
            .subscribe(
               (response) => {
                  let blob: any = new Blob([response.blob()], {
                     type: "text/csv; charset=utf-8",
                  });
                  saveAs(blob, "Mwqosdashboard Report.csv");
                  this.showSpinner = false;
               },
               (err) => {
                  console.log("Error downloading the file");
                  this.alertService.error(err);
                  this.showSpinner = false;
               },
               () => console.info("File downloaded successfully")
            );
      }
   }

   private isMobileAgent() {
      var ua = navigator.userAgent;
      if (
         /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i.test(
            ua
         )
      ) {
         return true;
      }

      return false;
   }

   private createColumnDefs() {
      return [
         {
            headerName: "",
            field: "editAction",
            maxWidth: 50,
            cellRenderer: function () {
               return '<span><i class="fa fa-edit"></i></span>';
            },
            pinned: "left",
            lockPinned: true,
            cellClass: "lock-pinned",
         },
         {
            headerName: "ID",
            field: "componentId",
            filter: "agNumberColumnFilter",
            pinned: "left",
         },
         {
            headerName: "Unique Code",
            field: "uniqueCode",
            filter: "agTextColumnFilter",
            pinned: "left",
         },

         {
            headerName: "X Axis Data",
            field: "xAxisData",
            filter: "agTextColumnFilter",
         },
         {
            headerName: "Y Axis Data",
            field: "yAxisData",
            filter: "agTextColumnFilter",
         },
         {
            headerName: "Vendor",
            field: "vendor",
            filter: "agTextColumnFilter",
         },
         {
            headerName: "Uploaded Attachment",
            field: "uploadedAttachment",
            filter: "agTextColumnFilter",
         },
         {
            headerName: "Uploaded Attachment File Id",
            field: "uploadedAttachmentFileId",
            filter: "agTextColumnFilter",
         },
         {
            headerName: "Download Attachment",
            field: "downloadAttachment",
            filter: "agTextColumnFilter",
         },
         {
            headerName: "Remarks",
            field: "remarks",
            filter: "agTextColumnFilter",
         },
      ];
   }

   dateFormatter(params) {
      return moment(params.value).format("YYYY-MM-DD HH:mm:ss");
   }

   showMessageBar(errorMessage) {
      this.validationMessage.openSnackBar({
         data: { message: errorMessage, isAccepted: false },
         duration: 2,
         panelClass: ["alert-red"],
         horizontalPosition: "center",
         verticalPosition: "bottom",
      });
   }

   scroll(el: HTMLElement) {
      el.scrollIntoView();
   }
}

var filterParams = {
   comparator: function (filterLocalDateAtMidnight, cellValue) {
      var dateAsString = moment(cellValue).format("DD/MM/YYYY");
      if (dateAsString == null) return -1;
      var dateParts = dateAsString.split("/");
      var cellDate = new Date(
         Number(dateParts[2]),
         Number(dateParts[1]) - 1,
         Number(dateParts[0])
      );
      if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {
         return 0;
      }
      if (cellDate < filterLocalDateAtMidnight) {
         return -1;
      }
      if (cellDate > filterLocalDateAtMidnight) {
         return 1;
      }
   },
   browserDatePicker: true,
   minValidYear: 2000,
};
