// @author Jewel Rana
// @this component is auto generated by code generator
// @version V1
// @date 6th August 2020

import { Component, OnInit } from "@angular/core";
import { ActivatedRoute } from "@angular/router";
import { Location } from "@angular/common";

import { HttpbaseService } from "../../common";
import { Sampledashboard } from "../dto/sampledashboard";
import { SampledashboardService } from "../service/sampledashboard.service";

import { FormBuilder, FormGroup, Validators } from "@angular/forms";
import { AlertService } from "../../alert/_services";

@Component({
  selector: "app-sampledashboarddetail",
  templateUrl: "./sampledashboarddetail.component.html",
  styleUrls: ["./sampledashboarddetail.component.css"],
})
export class SampledashboarddetailComponent implements OnInit {
  selectedId: number;
  sampledashboard: Sampledashboard = {
    componentId: -1,
    uniqueCode: "",
    status: 0,
    version: 0,
    csrfNonce: "",
    operation: "",
    officeId: 0,
    officeName: "",
    officeType: "",
    address: "",
    longitude: "",
    latitude: "",
    assetType: "",
    remarks: "",
  };

  sampledashboarddetailForm: FormGroup;
  isSubmitted = false;
  isFormCheckRequired = false;

  constructor(
    private formBuilder: FormBuilder,
    private route: ActivatedRoute,
    private location: Location,
    private sampledashboardService: SampledashboardService,
    private alertService: AlertService,
    private httpbaseService: HttpbaseService
  ) {}

  ngOnInit(): void {
    this.getSampledashboardDetail();
    this.sampledashboarddetailForm = this.formBuilder.group({
      csrfNonce: [],
      officeId: [0, Validators.required],
      officeName: ["", Validators.required],
      officeType: [""],
      address: [""],
      longitude: [""],
      latitude: [""],
      assetType: [""],
      remarks: [""],
    });
  }

  // convenience getter for easy access to form fields
  get f() {
    return this.sampledashboarddetailForm.controls;
  }

  getSampledashboardDetail(): void {
    const id = +this.route.snapshot.paramMap.get("id");
    this.selectedId = id;
    this.getSampledashboardData();
  }

  onSubmit() {
    //if a previous submission is still on going then do nothing. just return.
    if (this.isSubmitted) {
      return;
    }

    this.isFormCheckRequired = true;

    // stop here if form is invalid
    if (this.sampledashboarddetailForm.invalid) {
      return;
    }

    this.isSubmitted = true;
    this.saveSampledashboard();
  }

  onDelete() {
    //if a previous submission is still on going then do nothing. just return.
    if (this.isSubmitted) {
      return;
    }

    var result = confirm(
      "Realy want to delete sampledashboard '" +
        this.sampledashboard.uniqueCode +
        "'?"
    );
    if (result) {
      this.isSubmitted = true;
      this.deleteSampledashboard();
    }
  }

  goBack(): void {
    this.location.back();
  }

  private getSampledashboardData() {
    if (this.selectedId <= 0) {
      //this is new form, so loading nonce
      this.loadCSRFNonce();
      //and return from here.
      return;
    }

    this.sampledashboardService
      .getSampledashboardById(this.selectedId)
      .subscribe((apiResponse) => {
        this.loadSampledashboardData(apiResponse);
      });
  }
  private loadSampledashboardData(apiResponse) {
    if (apiResponse.success) {
      this.sampledashboard = Object.assign(
        <Sampledashboard>{},
        apiResponse.data
      );
    } else {
      this.alertService.error(apiResponse.message);
    }
  }

  private saveSampledashboard() {
    this.sampledashboardService
      .saveSampledashboard(this.sampledashboard)
      .subscribe((apiResponse) => {
        if (apiResponse.success) {
          this.isSubmitted = false;
          this.isFormCheckRequired = false;
          if (
            this.sampledashboard.componentId == undefined ||
            this.sampledashboard.componentId <= 0
          ) {
            this.sampledashboarddetailForm.reset();
            //this is new form after reset, so loading new nonce
            this.loadCSRFNonce();
          }
          this.alertService.success(apiResponse.message);
        } else {
          this.alertService.error(apiResponse.message);
        }
      });
  }

  private deleteSampledashboard() {
    this.sampledashboardService
      .deleteSampledashboard(this.sampledashboard)
      .subscribe((apiResponse) => {
        this.isSubmitted = false;
        if (apiResponse.success) {
          this.alertService.success(apiResponse.message);
          this.goBack();
        } else {
          this.alertService.error(apiResponse.message);
        }
      });
  }

  private loadCSRFNonce() {
    this.httpbaseService.getCSRFNonce().subscribe((response) => {
      if (response.success) {
        this.sampledashboard.csrfNonce =
          response.data == null || response.data == undefined
            ? ""
            : response.data.toString();
        //console.log('SampledashboarddetailComponent: received csrf nonce = ' + this.sampledashboard.csrfNonce);
      } else {
        console.error(
          "SampledashboarddetailComponent: csrf nonce is not recieved from server"
        );
      }
    });
  }
}
