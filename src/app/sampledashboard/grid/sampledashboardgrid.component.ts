// @author Jewel Rana
// @this component is auto generated by code generator
// @version V1
// @date 6th August 2020

import { Component, OnInit } from "@angular/core";
import { Router } from "@angular/router";
import { GridOptions } from "ag-grid";
import { BluecolumnComponent } from "../../grid-ui/bluecolumn/bluecolumn.component";

import { Sampledashboard } from "../dto/sampledashboard";
import { SampledashboardService } from "../service/sampledashboard.service";
import { ApiResponse } from "../../common/apiresponse";

@Component({
  selector: "app-sampledashboardgrid",
  templateUrl: "./sampledashboardgrid.component.html",
  styleUrls: ["./sampledashboardgrid.component.css"],
})
export class SampledashboardgridComponent implements OnInit {
  gridOptions: GridOptions;
  sampledashboards: Sampledashboard[];
  sampledashboardList$;

  constructor(
    private router: Router,
    private sampledashboardService: SampledashboardService
  ) {
    this.sampledashboardList$ = this.sampledashboardService.getSampledashboardList();

    this.gridOptions = <GridOptions>{
      columnDefs: this.createColumnDefs(),
      enableFilter: true,
      pagination: true,
      paginationPageSize: 10,
      rowSelection: "single",
      onGridReady: () => {
        this.sampledashboardList$.subscribe((apiResponse) => {
          this.loadSampledashboardsIntoArray(apiResponse);
          // the initial full set of data
          // note that we don't need to un-subscribe here as it's a one off data load
          if (this.gridOptions.api) {
            // can be null when tabbing between the examples
            this.gridOptions.api.setRowData(this.sampledashboards);
          }
        });
        this.gridOptions.api.sizeColumnsToFit();
      },
      onSelectionChanged: () => {
        var selectedRows = this.gridOptions.api.getSelectedRows();
        var selectedItemId = -1;
        selectedRows.forEach(function (selectedRow, index) {
          selectedItemId = selectedRow.componentId;
        });
        router.navigate(["/sampledashboards/" + selectedItemId]);
      },
    };
  }

  ngOnInit() {}

  private loadSampledashboardsIntoArray(apiResponse) {
    if (!apiResponse.success) {
      return;
    }

    this.sampledashboards = apiResponse.data.map((obj) => {
      var rObj = <Sampledashboard>{
        componentId: obj.componentId,
        status: obj.status,
        version: obj.version,
        officeId: obj.officeId,
        officeName: obj.officeName,
        officeType: obj.officeType,
        address: obj.address,
        longitude: obj.longitude,
        latitude: obj.latitude,
        assetType: obj.assetType,
        remarks: obj.remarks,
      };
      return rObj;
    });
  }

  onAddSampledashboard() {
    this.router.navigate(["/sampledashboards/-1"]);
  }

  private createColumnDefs() {
    return [
      {
        headerName: "ID",
        field: "componentId",
        filter: "agNumberColumnFilter",
      },

      {
        headerName: "Office Id",
        field: "officeId",
        filter: "agNumberColumnFilter",
      },
      {
        headerName: "Office Name",
        field: "officeName",
        filter: "agTextColumnFilter",
      },
      {
        headerName: "Office Type",
        field: "officeType",
        filter: "agTextColumnFilter",
      },
      {
        headerName: "Address",
        field: "address",
        filter: "agTextColumnFilter",
      },
      {
        headerName: "Longitude",
        field: "longitude",
        filter: "agTextColumnFilter",
      },
      {
        headerName: "Latitude",
        field: "latitude",
        filter: "agTextColumnFilter",
      },
      {
        headerName: "Asset Type",
        field: "assetType",
        filter: "agTextColumnFilter",
      },
      {
        headerName: "Remarks",
        field: "remarks",
        filter: "agTextColumnFilter",
      },
    ];
  }
}
